<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.1.2" created="2012-09-30 05:33" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>TheMySQL</title>
	<link>http://www.themysql.com</link>
	<description>专注于MySQL</description>
	<pubDate>Sun, 30 Sep 2012 05:33:25 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://www.themysql.com</wp:base_site_url>
	<wp:base_blog_url>http://www.themysql.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>rj03hou@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>51</wp:term_id><wp:category_nicename>dba-tools</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[DBA Tools]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>59</wp:term_id><wp:category_nicename>hbase</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Hbase]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Linux]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>mysql</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[MySQL]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>52</wp:term_id><wp:category_nicename>nosql</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[NoSQL]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>32</wp:term_id><wp:category_nicename>percona</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Percona]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>29</wp:term_id><wp:category_nicename>wordpress-2</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[wordpress]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>42</wp:term_id><wp:category_nicename>%e5%8e%9f%e5%88%9b</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[原创]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>50</wp:term_id><wp:category_nicename>%e6%96%87%e5%ad%a6</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[文学]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>%e6%9c%aa%e5%88%86%e7%b1%bb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>34</wp:term_id><wp:category_nicename>%e6%9c%aa%e5%ae%8c%e5%be%85%e7%bb%ad</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未完待续]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>auto_increment</wp:tag_slug><wp:tag_name><![CDATA[auto_increment]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>crontab</wp:tag_slug><wp:tag_name><![CDATA[crontab]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>datetime</wp:tag_slug><wp:tag_name><![CDATA[datetime]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>dba-tools</wp:tag_slug><wp:tag_name><![CDATA[DBA Tools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>falcon</wp:tag_slug><wp:tag_name><![CDATA[falcon]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>fedoral</wp:tag_slug><wp:tag_name><![CDATA[fedoral]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>index</wp:tag_slug><wp:tag_name><![CDATA[index]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>innobackupex</wp:tag_slug><wp:tag_name><![CDATA[innobackupex]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>innodb</wp:tag_slug><wp:tag_name><![CDATA[innodb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>innodb-plugin</wp:tag_slug><wp:tag_name><![CDATA[innodb plugin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>insert-buffer</wp:tag_slug><wp:tag_name><![CDATA[insert buffer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>linux-2</wp:tag_slug><wp:tag_name><![CDATA[linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[mongodb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>mysql-2</wp:tag_slug><wp:tag_name><![CDATA[mysql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>mysql-install</wp:tag_slug><wp:tag_name><![CDATA[mysql install]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>mysql-rpm</wp:tag_slug><wp:tag_name><![CDATA[mysql rpm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>mysql-shared-compat</wp:tag_slug><wp:tag_name><![CDATA[MySQL-shared-compat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>mysql5-6</wp:tag_slug><wp:tag_name><![CDATA[MySQL5.6]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>mysqldb</wp:tag_slug><wp:tag_name><![CDATA[MySQLdb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>mysqlsla</wp:tag_slug><wp:tag_name><![CDATA[mysqlsla]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>mysql%e9%80%89%e9%a1%b9</wp:tag_slug><wp:tag_name><![CDATA[MySQL选项]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>nosql</wp:tag_slug><wp:tag_name><![CDATA[NoSQL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>online-chema-change</wp:tag_slug><wp:tag_name><![CDATA[online chema change]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>option</wp:tag_slug><wp:tag_name><![CDATA[option]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>optparse</wp:tag_slug><wp:tag_name><![CDATA[optparse]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>percona-2</wp:tag_slug><wp:tag_name><![CDATA[percona]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>performance</wp:tag_slug><wp:tag_name><![CDATA[performance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>phpmyadmin</wp:tag_slug><wp:tag_name><![CDATA[phpMyAdmin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>python-2</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>raid</wp:tag_slug><wp:tag_name><![CDATA[raid]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>redis</wp:tag_slug><wp:tag_name><![CDATA[redis]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>replication</wp:tag_slug><wp:tag_name><![CDATA[replication]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>seo</wp:tag_slug><wp:tag_name><![CDATA[SEO]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>slow-log</wp:tag_slug><wp:tag_name><![CDATA[slow log]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>ssd</wp:tag_slug><wp:tag_name><![CDATA[ssd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>sybench</wp:tag_slug><wp:tag_name><![CDATA[sybench]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>timedelta</wp:tag_slug><wp:tag_name><![CDATA[timedelta]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>tools</wp:tag_slug><wp:tag_name><![CDATA[tools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>trigger</wp:tag_slug><wp:tag_name><![CDATA[trigger]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>vmstat</wp:tag_slug><wp:tag_name><![CDATA[vmstat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>wordpress-2</wp:tag_slug><wp:tag_name><![CDATA[wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>xampp</wp:tag_slug><wp:tag_name><![CDATA[xampp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>%e5%90%b9%e6%af%9b%e6%b1%82%e7%96%b5</wp:tag_slug><wp:tag_name><![CDATA[吹毛求疵]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>%e6%b5%8b%e8%af%95</wp:tag_slug><wp:tag_name><![CDATA[测试]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>%e9%94%81</wp:tag_slug><wp:tag_name><![CDATA[锁]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.1.2</generator>

	<item>
		<title>关于</title>
		<link>http://www.themysql.com/%e5%85%b3%e4%ba%8e</link>
		<pubDate>Fri, 24 Sep 2010 10:46:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[这是一个专注与mysql的技术博客，欢迎大家一起分享心得、讨论，共同提高。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-09-24 10:46:34</wp:post_date>
		<wp:post_date_gmt>2010-09-24 10:46:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8e</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[479]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>innodb_tablespace</title>
		<link>http://www.themysql.com/mysql/innodb-tablespaces-%e8%a1%a8%e7%a9%ba%e9%97%b4.html/attachment/innodb_tablespace</link>
		<pubDate>Sun, 21 Nov 2010 11:53:58 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2010/11/innodb_tablespace.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2010-11-21 19:53:58</wp:post_date>
		<wp:post_date_gmt>2010-11-21 11:53:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>innodb_tablespace</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>128</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2010/11/innodb_tablespace.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/innodb_tablespace.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"670";s:6:"height";s:3:"481";s:14:"hwstring_small";s:23:"height='91' width='128'";s:4:"file";s:29:"2010/11/innodb_tablespace.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"innodb_tablespace-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"innodb_tablespace-300x215.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"215";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tablespace2</title>
		<link>http://www.themysql.com/mysql/innodb-tablespaces-%e8%a1%a8%e7%a9%ba%e9%97%b4.html/attachment/tablespace2</link>
		<pubDate>Sun, 21 Nov 2010 12:02:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2010/11/tablespace2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2010-11-21 20:02:54</wp:post_date>
		<wp:post_date_gmt>2010-11-21 12:02:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tablespace2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>128</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2010/11/tablespace2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/tablespace2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"500";s:6:"height";s:3:"500";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:23:"2010/11/tablespace2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"tablespace2-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"tablespace2-300x300.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>page_struct</title>
		<link>http://www.themysql.com/mysql/innodb-tablespaces-%e8%a1%a8%e7%a9%ba%e9%97%b4.html/attachment/page_struct</link>
		<pubDate>Sun, 21 Nov 2010 12:04:05 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2010/11/page_struct.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2010-11-21 20:04:05</wp:post_date>
		<wp:post_date_gmt>2010-11-21 12:04:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>page_struct</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>128</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2010/11/page_struct.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/page_struct.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"581";s:6:"height";s:3:"395";s:14:"hwstring_small";s:23:"height='87' width='128'";s:4:"file";s:23:"2010/11/page_struct.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"page_struct-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"page_struct-300x203.png";s:5:"width";s:3:"300";s:6:"height";s:3:"203";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>标准版测试结果</title>
		<link>http://www.themysql.com/mysql/mysql%e4%b8%adidle-connections%e7%9a%84%e5%bd%b1%e5%93%8d.html/attachment/notpm_vs_idle_conn_v2-1023x578</link>
		<pubDate>Tue, 21 Dec 2010 09:04:31 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn_v2-1023x578.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2010-12-21 17:04:31</wp:post_date>
		<wp:post_date_gmt>2010-12-21 09:04:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>notpm_vs_idle_conn_v2-1023x578</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>150</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn_v2-1023x578.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/12/NOTPM_vs_idle_conn_v2-1023x578.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1023";s:6:"height";s:3:"578";s:14:"hwstring_small";s:23:"height='72' width='128'";s:4:"file";s:42:"2010/12/NOTPM_vs_idle_conn_v2-1023x578.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:42:"NOTPM_vs_idle_conn_v2-1023x578-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:42:"NOTPM_vs_idle_conn_v2-1023x578-300x169.png";s:5:"width";s:3:"300";s:6:"height";s:3:"169";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>debug测试结果</title>
		<link>http://www.themysql.com/mysql/mysql%e4%b8%adidle-connections%e7%9a%84%e5%bd%b1%e5%93%8d.html/attachment/notpm_vs_idle_conn-1023x578</link>
		<pubDate>Tue, 21 Dec 2010 09:04:48 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn-1023x578.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2010-12-21 17:04:48</wp:post_date>
		<wp:post_date_gmt>2010-12-21 09:04:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>notpm_vs_idle_conn-1023x578</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>150</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn-1023x578.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/12/NOTPM_vs_idle_conn-1023x578.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1023";s:6:"height";s:3:"578";s:14:"hwstring_small";s:23:"height='72' width='128'";s:4:"file";s:39:"2010/12/NOTPM_vs_idle_conn-1023x578.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:39:"NOTPM_vs_idle_conn-1023x578-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:39:"NOTPM_vs_idle_conn-1023x578-300x169.png";s:5:"width";s:3:"300";s:6:"height";s:3:"169";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>68_186731_1190616355</title>
		<link>http://www.themysql.com/linux/raid%e5%9f%ba%e7%a1%80%ef%bc%8craid10%e4%b8%8eraid01%e6%af%94%e8%be%83%ef%bc%8craid10%e4%b8%8eraid5%e6%af%94%e8%be%83.html/attachment/68_186731_1190616355</link>
		<pubDate>Thu, 27 Jan 2011 08:36:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2011/01/68_186731_1190616355.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2011-01-27 16:36:53</wp:post_date>
		<wp:post_date_gmt>2011-01-27 08:36:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>68_186731_1190616355</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2011/01/68_186731_1190616355.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/01/68_186731_1190616355.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"514";s:6:"height";s:3:"257";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:32:"2011/01/68_186731_1190616355.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"68_186731_1190616355-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"68_186731_1190616355-300x150.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>美穴地</title>
		<link>http://www.themysql.com/%e6%96%87%e5%ad%a6/%e8%b4%be%e5%b9%b3%e5%87%b9%e3%80%8a%e7%be%8e%e7%a9%b4%e5%9c%b0%e3%80%8b.html/attachment/%e7%be%8e%e7%a9%b4%e5%9c%b0</link>
		<pubDate>Sat, 05 Mar 2011 16:40:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2011/03/美穴地.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2011-03-06 00:40:50</wp:post_date>
		<wp:post_date_gmt>2011-03-05 16:40:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%be%8e%e7%a9%b4%e5%9c%b0</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>218</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2011/03/美穴地.txt</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/03/美穴地.txt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>innodb_flush_log_at_trx_commit性能测试结果</title>
		<link>http://www.themysql.com/mysql/innodb_flush_log_at_trx_commit%e5%8f%82%e6%95%b0%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95.html/attachment/1</link>
		<pubDate>Tue, 31 May 2011 07:09:43 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2011/05/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2011-05-31 15:09:43</wp:post_date>
		<wp:post_date_gmt>2011-05-31 07:09:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>253</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2011/05/1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"440";s:6:"height";s:3:"527";s:14:"hwstring_small";s:22:"height='96' width='80'";s:4:"file";s:13:"2011/05/1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:13:"1-250x300.png";s:5:"width";s:3:"250";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[innodb_flush_log_at_trx_commit性能测试结果]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1</title>
		<link>http://www.themysql.com/yanqing/attachment/1-2</link>
		<pubDate>Wed, 27 Jun 2012 04:54:43 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date>2012-06-27 12:54:43</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:54:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1267";s:6:"height";s:3:"950";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:13:"2012/06/1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:13:"1-300x224.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"224";}s:5:"large";a:3:{s:4:"file";s:14:"1-1024x767.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"767";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"5.6";s:6:"credit";s:0:"";s:6:"camera";s:8:"DMC-FX01";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1239793404";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.6";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:7:"0.00625";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[52]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>688153_49e69a199cf85</title>
		<link>http://www.themysql.com/yanqing/attachment/688153_49e69a199cf85</link>
		<pubDate>Wed, 27 Jun 2012 04:54:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69a199cf85.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date>2012-06-27 12:54:47</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:54:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>688153_49e69a199cf85</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69a199cf85.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/688153_49e69a199cf85.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1267";s:6:"height";s:3:"950";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:32:"2012/06/688153_49e69a199cf85.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"688153_49e69a199cf85-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"688153_49e69a199cf85-300x224.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"224";}s:5:"large";a:3:{s:4:"file";s:33:"688153_49e69a199cf85-1024x767.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"767";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.8";s:6:"credit";s:0:"";s:6:"camera";s:8:"DMC-FX01";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1239801236";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.6";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:15:"0.0333333333333";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[59]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>688153_49e69a35660ae</title>
		<link>http://www.themysql.com/yanqing/attachment/688153_49e69a35660ae</link>
		<pubDate>Wed, 27 Jun 2012 04:54:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69a35660ae.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date>2012-06-27 12:54:51</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:54:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>688153_49e69a35660ae</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69a35660ae.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/688153_49e69a35660ae.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1239";s:6:"height";s:3:"929";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:32:"2012/06/688153_49e69a35660ae.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"688153_49e69a35660ae-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"688153_49e69a35660ae-300x224.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"224";}s:5:"large";a:3:{s:4:"file";s:33:"688153_49e69a35660ae-1024x767.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"767";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.8";s:6:"credit";s:0:"";s:6:"camera";s:8:"DMC-FX01";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1239801242";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.6";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:4:"0.04";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[58]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>688153_49e69e8b046d5</title>
		<link>http://www.themysql.com/yanqing/attachment/688153_49e69e8b046d5</link>
		<pubDate>Wed, 27 Jun 2012 04:54:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69e8b046d5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2012-06-27 12:54:55</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:54:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>688153_49e69e8b046d5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69e8b046d5.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/688153_49e69e8b046d5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1070";s:6:"height";s:3:"803";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:32:"2012/06/688153_49e69e8b046d5.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"688153_49e69e8b046d5-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"688153_49e69e8b046d5-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:5:"large";a:3:{s:4:"file";s:33:"688153_49e69e8b046d5-1024x768.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"768";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.8";s:6:"credit";s:0:"";s:6:"camera";s:8:"DMC-FX01";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1239795164";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.6";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:6:"0.0025";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[62]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>688153_49e6969c5e436</title>
		<link>http://www.themysql.com/yanqing/attachment/688153_49e6969c5e436</link>
		<pubDate>Wed, 27 Jun 2012 04:54:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/688153_49e6969c5e436.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date>2012-06-27 12:54:59</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:54:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>688153_49e6969c5e436</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/688153_49e6969c5e436.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/688153_49e6969c5e436.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1126";s:6:"height";s:3:"845";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:32:"2012/06/688153_49e6969c5e436.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"688153_49e6969c5e436-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"688153_49e6969c5e436-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:5:"large";a:3:{s:4:"file";s:33:"688153_49e6969c5e436-1024x768.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"768";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"3.5";s:6:"credit";s:0:"";s:6:"camera";s:8:"DMC-FX01";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1239793833";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"7.5";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:8:"0.003125";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[61]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>12573195328155746</title>
		<link>http://www.themysql.com/yanqing/attachment/12573195328155746</link>
		<pubDate>Wed, 27 Jun 2012 04:55:03 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/12573195328155746.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date>2012-06-27 12:55:03</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:55:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>12573195328155746</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/12573195328155746.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/12573195328155746.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"434";s:6:"height";s:3:"585";s:14:"hwstring_small";s:22:"height='96' width='71'";s:4:"file";s:29:"2012/06/12573195328155746.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"12573195328155746-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"12573195328155746-222x300.jpg";s:5:"width";s:3:"222";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>12578362676778961</title>
		<link>http://www.themysql.com/yanqing/attachment/12578362676778961</link>
		<pubDate>Wed, 27 Jun 2012 04:55:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/12578362676778961.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date>2012-06-27 12:55:06</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:55:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>12578362676778961</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/12578362676778961.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/12578362676778961.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"500";s:6:"height";s:3:"703";s:14:"hwstring_small";s:22:"height='96' width='68'";s:4:"file";s:29:"2012/06/12578362676778961.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"12578362676778961-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"12578362676778961-213x300.jpg";s:5:"width";s:3:"213";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[55]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>8</title>
		<link>http://www.themysql.com/yanqing/attachment/8</link>
		<pubDate>Wed, 27 Jun 2012 05:05:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/8.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date>2012-06-27 13:05:50</wp:post_date>
		<wp:post_date_gmt>2012-06-27 05:05:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>8</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/8.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[61]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/8.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"450";s:6:"height";s:3:"338";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:13:"2012/06/8.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"8-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:13:"8-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>meishimeike_2002139_361745_m</title>
		<link>http://www.themysql.com/yanqing/attachment/meishimeike_2002139_361745_m</link>
		<pubDate>Wed, 27 Jun 2012 05:05:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361745_m.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date>2012-06-27 13:05:53</wp:post_date>
		<wp:post_date_gmt>2012-06-27 05:05:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meishimeike_2002139_361745_m</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361745_m.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/meishimeike_2002139_361745_m.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"300";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:40:"2012/06/meishimeike_2002139_361745_m.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:40:"meishimeike_2002139_361745_m-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>meishimeike_2002139_361753_m</title>
		<link>http://www.themysql.com/yanqing/attachment/meishimeike_2002139_361753_m</link>
		<pubDate>Wed, 27 Jun 2012 05:05:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361753_m.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2012-06-27 13:05:55</wp:post_date>
		<wp:post_date_gmt>2012-06-27 05:05:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meishimeike_2002139_361753_m</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361753_m.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/meishimeike_2002139_361753_m.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"450";s:6:"height";s:3:"343";s:14:"hwstring_small";s:23:"height='96' width='125'";s:4:"file";s:40:"2012/06/meishimeike_2002139_361753_m.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:40:"meishimeike_2002139_361753_m-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:40:"meishimeike_2002139_361753_m-300x228.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"228";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>meishimeike_2002139_361754_m</title>
		<link>http://www.themysql.com/yanqing/attachment/meishimeike_2002139_361754_m</link>
		<pubDate>Wed, 27 Jun 2012 05:06:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361754_m.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date>2012-06-27 13:06:00</wp:post_date>
		<wp:post_date_gmt>2012-06-27 05:06:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meishimeike_2002139_361754_m</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>318</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361754_m.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[56]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/meishimeike_2002139_361754_m.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"450";s:6:"height";s:3:"339";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:40:"2012/06/meishimeike_2002139_361754_m.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:40:"meishimeike_2002139_361754_m-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:40:"meishimeike_2002139_361754_m-300x226.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"226";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello world！</title>
		<link>http://www.themysql.com/%e6%9c%aa%e5%88%86%e7%b1%bb/hello-world.html</link>
		<pubDate>Fri, 24 Sep 2010 10:46:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[欢迎使用 WordPress。这是系统自动生成的演示文章。编辑或者删除它，开始您的博客！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2010-09-24 10:46:34</wp:post_date>
		<wp:post_date_gmt>2010-09-24 10:46:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1316]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[WordPress 先生]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2010-09-24 10:46:34</wp:comment_date>
			<wp:comment_date_gmt>2010-09-24 10:46:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嗨，这是一条评论。<br />要删除一条评论，请先登录系统，查看这篇文章的评论，然后您可以看到编辑或者删除评论的选项。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>关于mysql auto_increment所带来的锁表操作</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8emysql-auto_increment%e6%89%80%e5%b8%a6%e6%9d%a5%e7%9a%84%e9%94%81%e8%a1%a8%e6%93%8d%e4%bd%9c.html</link>
		<pubDate>Fri, 24 Sep 2010 10:52:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[以前内容主要是对官方文档中的意译，并加入了一些自己的理解（新版本还是很给力的）。侯哥原创，欢迎交流。

详细参照官方文档：http://dev.mysql.com/doc/refman/5.1/en/innodb-auto-increment-handling.html#innodb-auto-increment-configurable

在mysql5.1.22之前，mysql的“INSERT-like”语句（包INSERT, INSERT...SELECT, REPLACE,REPLACE...SELECT, and LOAD DATA)会在执行整个语句的过程中使用一个AUTO-INC锁将表锁住，直到整个语句结束（而不是事务结束）。因此在使用INSERT...SELECT、INSERT...values(...),values(...)时，LOAD DATA等耗费时间较长的操作时，会将整个表锁住，而阻塞其他的“INSERT-like”、Update等语句，推荐使用程序将这些语句分成多条语句，一一插入，减少单一时间的锁表时间，荣嬷嬷的superdump就不错。

mysql5.1.22之后mysql进行了改进，引入了参数 innodb_autoinc_lock_mode，通过这个参数控制mysql的锁表逻辑，在介绍这个之前先引入几个术语，方便说明 innodb_autoinc_lock_mode。

<strong>1.“INSERT-like”：</strong>

INSERT, INSERT ... SELECT, REPLACE, REPLACE ... SELECT, and LOAD DATA, INSERT ... VALUES(),VALUES()

<strong>2.“Simple inserts”</strong>

就是通过分析insert语句可以确定插入数量的insert语句, INSERT, INSERT ... VALUES(),VALUES()

<strong>3.“Bulk inserts”</strong>

就是通过分析insert语句不能确定插入数量的insert语句, INSERT ... SELECT, REPLACE ... SELECT, LOAD DATA

<strong>4.“Mixed-mode inserts”</strong>

下面两种，不确定是否需要分配auto_increment id

INSERT INTO t1 (c1,c2) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');

INSERT ... ON DUPLICATE KEY UPDATE

<strong>一、innodb_autoinc_lock_mode = 0 (“traditional” lock mode)</strong>

这种方式就和mysql5.1.22以前一样，为了向后兼容而保留了这种模式，如同前面介绍的一样，这种方式的特点就是“表级锁定”，并发性较差

<strong>二、innodb_autoinc_lock_mode = 1 (“consecutive” lock mode)</strong>

这种方式是新版本中的默认方式，推荐使用，并发性相对较高，特点是“consecutive”，即保证同一条insert语句中新插入的auto_increment id都是连续的。

这种模式下：

“Simple inserts”：直接通过分析语句，获得要插入的数量，然后一次性分配足够的auto_increment id，只会将整个分配的过程锁住。

“Bulk inserts”：因为不能确定插入的数量，因此使用和以前的模式相同的表级锁定。

“Mixed-mode inserts”：直接分析语句，获得最坏情况下需要插入的数量，然后一次性分配足够的auto_increment id，只会将整个分配的过程锁住。需要注意的是，这种方式下，会分配过多的id，而导致”浪费“。比如INSERT INTO t1 (c1,c2) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');会一次性的分配5个id，而不管用户是否指定了部分id；INSERT ... ON DUPLICATE KEY UPDATE一次性分配，而不管将来插入过程中是否会因为duplicate key而仅仅执行update操作。

注意：当master mysql版本&lt;5.1.22，slave mysql版本&gt;=5.1.22时，slave需要将innodb_autoinc_lock_mode设置为0，因为默认的innodb_autoinc_lock_mode为1，对于INSERT ... ON DUPLICATE KEY UPDATE和INSERT INTO t1 (c1,c2) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');的执行结果不同，现实环境一般会使用INSERT ... ON DUPLICATE KEY UPDATE。

<strong>三、innodb_autoinc_lock_mode = 2 (“interleaved” lock mode)</strong>

这种模式是来一个分配一个，而不会锁表，只会锁住分配id的过程，和innodb_autoinc_lock_mode = 1的区别在于，不会预分配多个，这种方式并发性最高。但是在replication中当binlog_format为statement-based时（简称SBR statement-based replication）存在问题，因为是来一个分配一个，这样当并发执行时，“Bulk inserts”在分配的时会同时向其他的INSERT分配，会出现主从不一致（从库执行结果和主库执行结果不一样），因为binlog只会记录开始的insert id。

测试SBR，执行begin;insert values(),();insert values(),();commit;会在binlog中每条insert values(),();前增加SET INSERT_ID=18/*!*/;。

但是row-based replication RBR时不会存在问题。

另外RBR的主要缺点是日志数量在包括语句中包含大量的update delete（update多条语句，delete多条语句）时，日志会比SBR大很多；假如实际语句中这样语句不是很多的时候（现实中存在很多这样的情况），推荐使用RBR配合innodb_autoinc_lock_mode，不过话说回来，现实生产中“Bulk inserts”本来就很少，因此innodb_autoinc_lock_mode = 1应该是够用了。

下面是官方文档举得几个例子，这里就不翻译的

For example, assume c1 is an AUTO_INCREMENT column of table t1, and that the most recent automatically generated sequence number is 100. Consider the following “mixed-mode insert” statement:

INSERT INTO t1 (c1,c2) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');

With innodb_autoinc_lock_mode set to 0 (“traditional”), the four new rows will be:

+-----+------+

| c1  | c2   |

+-----+------+

|   1 | a    |

| 101 | b    |

|   5 | c    |

| 102 | d    |

+-----+------+

The next available auto-increment value will be 103 because the auto-increment values are allocated one at a time, not all at once at the beginning of statement execution. This result is true whether or not there are concurrently executing “INSERT-like” statements (of any type).

With innodb_autoinc_lock_mode set to 1 (“consecutive”), the four new rows will also be:

+-----+------+

| c1  | c2   |

+-----+------+

|   1 | a    |

| 101 | b    |

|   5 | c    |

| 102 | d    |

+-----+------+

However, in this case, the next available auto-increment value will be 105, not 103 because four auto-increment values are allocated at the time the statement is processed, but only two are used. This result is true whether or not there are concurrently executing “INSERT-like” statements (of any type).

With innodb_autoinc_lock_mode set to mode 2 (“interleaved”), the four new rows will be:

+-----+------+

| c1  | c2   |

+-----+------+

|   1 | a    |

|   x | b    |

|   5 | c    |

|   y | d    |

+-----+------+

The values of x and y will be unique and larger than any previously generated rows. However, the specific values of x and y will depend on the number of auto-increment values generated by concurrently executing statements.

Finally, consider the following statement, issued when the most-recently generated sequence number was the value 4:

INSERT INTO t1 (c1,c2) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');

With any innodb_autoinc_lock_mode setting, this statement will generate a duplicate-key error 23000 (Can't write; duplicate key in table) because 5 will be allocated for the row (NULL, 'b') and insertion of the row (5, 'c') will fail.]]></content:encoded>
		<excerpt:encoded><![CDATA[在mysql5.1.22之前，mysql的“INSERT-like”语句（包INSERT, INSERT...SELECT, REPLACE,REPLACE...SELECT, and LOAD DATA)会在执行整个语句的过程中使用一个AUTO-INC锁将表锁住，直到整个语句结束（而不是事务结束）。因此在使用INSERT...SELECT、INSERT...values(...),values(...)时，LOAD DATA等耗费时间较长的操作时，会将整个表锁住，而阻塞其他的“INSERT-like”、Update等语句，推荐使用程序将这些语句分成多条语句，一一插入，减少单一时间的锁表时间，荣嬷嬷的superdump就不错。

mysql5.1.22之后mysql进行了改进，引入了参数 innodb_autoinc_lock_mode，通过这个参数控制mysql的锁表逻辑]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2010-09-24 10:52:20</wp:post_date>
		<wp:post_date_gmt>2010-09-24 10:52:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8emysql-auto_increment%e6%89%80%e5%b8%a6%e6%9d%a5%e7%9a%84%e9%94%81%e8%a1%a8%e6%93%8d%e4%bd%9c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auto_increment"><![CDATA[auto_increment]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="%e9%94%81"><![CDATA[锁]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2731]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[mysql innodb auto_inc产生死锁 | HelloDML]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.hellodml.com/?p=249</wp:comment_author_url>
			<wp:comment_author_IP>174.37.162.35</wp:comment_author_IP>
			<wp:comment_date>2011-12-17 23:11:57</wp:comment_date>
			<wp:comment_date_gmt>2011-12-17 15:11:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 对于这个问题的产生，mysql中有个参数innodb_autoinc_lock_mode用来控制自增列的锁方式，不过朋友mysql版本为5.0.x，暂时还没有这个参数。这个参数是mysql5.1.22后才有的。在mysql5.1.22之前，mysql的“INSERT-like”语句（包INSERT, INSERT…SELECT, REPLACE,REPLACE…SELECT, and LOAD DATA)会在执行整个语句的过程中使用一个AUTO-INC锁将表锁住，直到整个语句结束（而不是事务结束）。因此在使用INSERT…SELECT、INSERT…values(…),values(…)时，LOAD DATA等耗费时间较长的操作时，会将整个表锁住，而阻塞其他的“INSERT-like”、Update等语句。(复制这里面的，这里阐述的比较清晰，http://www.themysql.com/mysql/%E5%85%B3%E4%BA%8Emysql-auto_increment%E6%89%80%E5%B8%A6%E6%9D%A5%E7%9...) mysql5.1.22之后mysql进行了改进，引入了参数 innodb_autoinc_lock_mode，通过这个参数控制mysql的锁表逻辑，在介绍这个之前先引入几个术语，方便说明 innodb_autoinc_lock_mode。 1.“INSERT-like”： INSERT, INSERT … SELECT, REPLACE, REPLACE … SELECT, and LOAD DATA, INSERT … VALUES(),VALUES() 2.“Simple inserts” 就是通过分析insert语句可以确定插入数量的insert语句, INSERT, INSERT … VALUES(),VALUES() 3.“Bulk inserts” 就是通过分析insert语句不能确定插入数量的insert语句, INSERT … SELECT, REPLACE … SELECT, LOAD DATA 4.“Mixed-mode inserts” 下面两种，不确定是否需要分配auto_increment id INSERT INTO t1 (c1,c2) VALUES (1,’a&#8217;), (NULL,’b&#8217;), (5,’c&#8217;), (NULL,’d&#8217;); INSERT … ON DUPLICATE KEY UPDATE 一、innodb_autoinc_lock_mode = 0 (“traditional” lock mode) 这种方式就和mysql5.1.22以前一样，为了向后兼容而保留了这种模式，如同前面介绍的一样，这种方式的特点就是“表级锁定”，并发性较差 二、innodb_autoinc_lock_mode = 1 (“consecutive” lock mode) 这种方式是新版本中的默认方式，推荐使用，并发性相对较高，特点是“consecutive”，即保证同一条insert语句中新插入的auto_increment id都是连续的。 这种模式下：“Simple inserts”：直接通过分析语句，获得要插入的数量，然后一次性分配足够的auto_increment id，只会将整个分配的过程锁住。 “Bulk inserts”：因为不能确定插入的数量，因此使用和以前的模式相同的表级锁定。 “Mixed-mode inserts”：直接分析语句，获得最坏情况下需要插入的数量，然后一次性分配足够的auto_increment id，只会将整个分配的过程锁住。需要注意的是，这种方式下，会分配过多的id，而导致”浪费“。比如INSERT INTO t1 (c1,c2) VALUES (1,’a&#8217;), (NULL,’b&#8217;), (5,’c&#8217;), (NULL,’d&#8217;);会一次性的分配5个id，而不管用户是否指定了部分id；INSERT … ON DUPLICATE KEY UPDATE一次性分配，而不管将来插入过程中是否会因为duplicate key而仅仅执行update操作。 注意：当master mysql版本&lt;5.1.22，slave mysql版本&gt;=5.1.22时，slave需要将innodb_autoinc_lock_mode设置为0，因为默认的innodb_autoinc_lock_mode为1，对于INSERT … ON DUPLICATE KEY UPDATE和INSERT INTO t1 (c1,c2) VALUES (1,’a&#8217;), (NULL,’b&#8217;), (5,’c&#8217;), (NULL,’d&#8217;);的执行结果不同，现实环境一般会使用INSERT … ON DUPLICATE KEY UPDATE。 三、innodb_autoinc_lock_mode = 2 (“interleaved” lock mode) 这种模式是来一个分配一个，而不会锁表，只会锁住分配id的过程，和innodb_autoinc_lock_mode = 1的区别在于，不会预分配多个，这种方式并发性最高。但是在replication中当binlog_format为statement-based时（简称SBR statement-based replication）存在问题，因为是来一个分配一个，这样当并发执行时，“Bulk inserts”在分配的时会同时向其他的INSERT分配，会出现主从不一致（从库执行结果和主库执行结果不一样），因为binlog只会记录开始的insert id。 测试SBR，执行begin;insert values(),();insert values(),();commit;会在binlog中每条insert values(),();前增加SET INSERT_ID=18/*!*/;。 但是row-based replication RBR时不会存在问题。 另外RBR的主要缺点是日志数量在包括语句中包含大量的update delete（update多条语句，delete多条语句）时，日志会比SBR大很多；假如实际语句中这样语句不是很多的时候（现实中存在很多这样的情况），推荐使用RBR配合innodb_autoinc_lock_mode，不过话说回来，现实生产中“Bulk inserts”本来就很少，因此innodb_autoinc_lock_mode = 1应该是够用了 这个问题的使我对mysql 计数器锁有了更深入的一些认识，哈哈 [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>windows本地可以使用xampp搭建mysql测试环境</title>
		<link>http://www.themysql.com/mysql/windows%e6%9c%ac%e5%9c%b0%e5%8f%af%e4%bb%a5%e4%bd%bf%e7%94%a8xampp%e6%90%ad%e5%bb%bamysql%e6%b5%8b%e8%af%95%e7%8e%af%e5%a2%83.html</link>
		<pubDate>Fri, 24 Sep 2010 10:54:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[在windows上面搭建测试环境，可以使用xampp来迅速搭建，然后使用web管理工具phpMyAdmin来管理MySQL。<a href="http://www.apachefriends.org/zh_cn/xampp.html" target="_blank">xampp下载地址</a>。

安装的时候需要将xampp安装在、根目录下，否则启动Apache时会出现下面的错误（使用xampp crontrl 启动Apache的时候提示busy，查看端口80也没有被占用）：

”xampp apache serverroot must be a valid directory”

xampp包括了安装十分便捷，解压之后执行setup_xampp.bat就可以安装，安装包括了Apache、php、MySQL、phpMyAdmin。

正常情况下安装完毕之后，打开这个页面http://localhost/phpmyadmin/，会出现错误，提示mysql无法连接。解决方法，进入到xampp解压目录（绿色的也就是安装目录），xampp\phpMyAdmin，编辑config.inc.php文件，将$cfg['Servers'][$i]['host'] = ’localhost’;改成 $cfg['Servers'][$i]['host'] = ’127.0.0.1′;因为mysql连接字符串中假如是localhost的话就会使用socket文件（linux的连接方式来连接），改成127.0.0.1之后，使用tcp进行连接。

就可以方便快捷的在windows本地使用mysql了。

也可以独立安装，使用过程中遇到其他问题，可以参照xampp的<a href="http://www.apachefriends.org/zh_cn/faq-xampp-windows.html" target="_blank">官方QA</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[在windows上面搭建测试环境，可以使用xampp来迅速搭建，然后使用web管理工具phpMyAdmin来管理MySQL。xampp下载地址。]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2010-09-24 10:54:19</wp:post_date>
		<wp:post_date_gmt>2010-09-24 10:54:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows%e6%9c%ac%e5%9c%b0%e5%8f%af%e4%bb%a5%e4%bd%bf%e7%94%a8xampp%e6%90%ad%e5%bb%bamysql%e6%b5%8b%e8%af%95%e7%8e%af%e5%a2%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="phpmyadmin"><![CDATA[phpMyAdmin]]></category>
		<category domain="post_tag" nicename="xampp"><![CDATA[xampp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1976]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用mysqlsla分析mysql慢查询</title>
		<link>http://www.themysql.com/mysql/%e4%bd%bf%e7%94%a8mysqlsla%e5%88%86%e6%9e%90mysql%e6%85%a2%e6%9f%a5%e8%af%a2.html</link>
		<pubDate>Fri, 24 Sep 2010 10:55:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[mysqlsla是hackmysql.com推出的一款MySQL的日志分析工具，功能异常强大，可以用来替代mysql自带的slow log分析工具。分析服务器的slow log对于服务器优化非常重要。

官方地址:<a href="http://hackmysql.com/mysqlsla">http://hackmysql.com/mysqlsla</a>

<strong>安装方法：</strong>

Alternatively, you can bypass the installer and simply wget http://hackmysql.com/scripts/mysqlsla-2.03, then chmod +x and run it.

直接wget http://hackmysql.com/scripts/mysqlsla-2.03下载就可以直接运行，不过因为mysqlsla是用perl写的，因此需要perl环境。

<strong>使用方法：</strong>

通过下面几个常用参数，对于mysqlsla的使用就会有一个初步的了解，具体的其他功能再需要的时候可以通过官方文档，详细了解。

详细的参数列表：<a href="http://hackmysql.com/mysqlsla_documentation#meta-filter">http://hackmysql.com/mysqlsla_documentation#meta-filter</a>

--log-type (-lt) TYPE LOGS

Parse MySQL LOGS of TYPE. Default none. TYPE must be either slow, general, binary, msl or udl. LOGS is a space-separated list of MySQL log files.

通过这个参数来制定log的类型，主要有slow、general、binary等，分析slow log时通过制定为slow

--sort META

Sort queries according to META. Default t_sum for slow and msl logs, c_sum for all others. META is any meta-property name; see <a href="http://hackmysql.com/mysqlsla_filters">mysqlsla v2 Filters</a>.

mysqlsla currently does not check that the meta-property name META actually exists. Therefore, if a non-existent meta-property name is given, mysqlsla will print copious errors.

mysqlsla通过这个参数来制定使用什么参数来对分析结果进行排序，默认是按照t_sum来进行排序。

<em>t_sum</em>: Total t

总的消耗时间

<em>c_sum</em>: Total number of times SQL statement appears in log，按照sql语句执行的总时间来进行排序。

<em>c_sum_p</em>: Percentage that c_sum constitutes of grand total c_sum for all SQL statements in log。

sql语句执行时间占总执行时间的百分比。

详细的sort参数可以在下面这个地方查看。

<a href="http://hackmysql.com/mysqlsla_filters#setting_the_filters">http://hackmysql.com/mysqlsla_filters#setting_the_filters</a>

--top N

After <a href="http://hackmysql.com/mysqlsla_documentation#sort">sorting</a> display only the top N queries. Default 10.

显示的sql数，默认是10条

下面不常用的参数简单说明一下：

--statement-filter (-sf) CONDTIONS

通过这个参数过滤sql语句的类型，比如select、update、drop等等

--grep PATTERN

grep statements for PATTERN and keep only those which match. Default none.

PATTERN is a <a href="http://perldoc.perl.org/perlre.html">Perl regular expressions</a> pattern without m//.

--meta-filter (-mf) CONDTIONS

通过这个参数对结果进行过滤，比如执行次数占总次数10%以上

mysqlsla --log-type slow slow.log --meta-filter "c_sum_p&gt;5"

<strong>结果说明：</strong>

<strong> </strong>

<strong>Count         : 4.22k  (1.01%)</strong>

Time          : 8526 s total, 2.018466 s avg, 2 s to 11 s max  (0.61%)

95% of Time : 8024 s total, 2 s avg, 2 s to 2 s max

Lock Time (s) : 0 total, 0 avg, 0 to 0 max  (0.00%)

95% of Lock : 0 total, 0 avg, 0 to 0 max

Rows sent     : 1 avg, 0 to 1 max  (0.01%)

Rows examined : 0 avg, 0 to 0 max  (0.00%)

Count, sql的执行次数及占总的slow log数量的百分比.
Time, 执行时间, 包括总时间, 平均时间, 最小, 最大时间, 时间占到总慢sql时间的百分比.
95% of Time, 去除最快和最慢的sql, 覆盖率占95%的sql的执行时间.
Lock Time, 等待锁的时间.
95% of Lock , 95%的慢sql等待锁时间.
Rows sent, 结果行统计数量, 包括平均, 最小, 最大数量.
Rows examined, 扫描的行数量.
Database, 属于哪个数据库
Users, 哪个用户,IP, 占到所有用户执行的sql百分比
Query abstract, 抽象后的sql语句
Query sample, sql语句

下面这篇文章写的也不错，也可以看看

<a href="http://www.517sou.net/Article/mysqlsla.aspx">http://www.517sou.net/Article/mysqlsla.aspx</a>

突然感觉蛋有点疼--到此为止吧]]></content:encoded>
		<excerpt:encoded><![CDATA[mysqlsla是hackmysql.com推出的一款MySQL的日志分析工具，功能异常强大，可以用来替代mysql自带的slow log分析工具。分析服务器的slow log对于服务器优化非常重要。]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2010-09-24 10:55:44</wp:post_date>
		<wp:post_date_gmt>2010-09-24 10:55:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8mysqlsla%e5%88%86%e6%9e%90mysql%e6%85%a2%e6%9f%a5%e8%af%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqlsla"><![CDATA[mysqlsla]]></category>
		<category domain="post_tag" nicename="slow-log"><![CDATA[slow log]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1509]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python： 使用 optparse 处理命令行参数</title>
		<link>http://www.themysql.com/python/python%ef%bc%9a-%e4%bd%bf%e7%94%a8-optparse-%e5%a4%84%e7%90%86%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%8f%82%e6%95%b0.html</link>
		<pubDate>Fri, 24 Sep 2010 10:57:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[因为太有用了，所以转一下。

原帖地址

<a href="http://mrwlwan.wordpress.com/2008/09/25/python%EF%BC%9A-%E4%BD%BF%E7%94%A8-optparse-%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/">http://mrwlwan.wordpress.com/2008/09/25/python：-使用-optparse-处理命令行参数/</a>

Python 有两个内建的模块用于处理命令行参数，一个是 getopt，《Deep in python》一书中也有提到，只能简单处理命令行参数；另一个是 optparse，它功能强大，而且易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。
<h1>示例</h1>
下面是一个使用 optparse 的简单示例：

from optparse import OptionParser
[...]
parser = OptionParser()
parser.add_option("-f", "--file", dest="filename",
help="write report to FILE", metavar="FILE")
parser.add_option("-q", "--quiet",
action="store_false", dest="verbose", default=True,
help="don't print status messages to stdout")

(options, args) = parser.parse_args()

现在，妳就可以在命令行下输入：

&lt;yourscript&gt; --file=outfile -q
&lt;yourscript&gt; -f outfile --quiet
&lt;yourscript&gt; --quiet --file outfile
&lt;yourscript&gt; -q -foutfile
&lt;yourscript&gt; -qfoutfile

上面这些命令是相同效果的。除此之外， optparse 还为我们自动生成命令行的帮助信息：

&lt;yourscript&gt; -h
&lt;yourscript&gt; --help

输出：

usage: &lt;yourscript&gt; [options]

options:
-h, --help show this help message and exit
-f FILE, --file=FILE write report to FILE
-q, --quiet don't print status messages to stdout
<h1>简单流程</h1>
首先，必须 import OptionParser 类，创建一个 OptionParser 对象：

from optparse import OptionParser
[...]
parser = OptionParser()

然后，使用 add_option 来定义命令行参数：

parser.add_option(opt_str, ...,
attr=value, ...)

每个命令行参数就是由参数名字符串和参数属性组成的。如 <strong>-f</strong> 或者 <strong>–file</strong> 分别是长短参数名：

parser.add_option("-f", "--file", ...)

最后，一旦你已经定义好了所有的命令行参数，调用 parse_args() 来解析程序的命令行：

(options, args) = parser.parse_args()

<strong>注：</strong> 你也可以传递一个命令行参数列表到 parse_args()；否则，默认使用 sys.argv[:1]。

parse_args() 返回的两个值：
<ul>
	<li>options，它是一个对象（optpars.Values），保存有命令行参数值。只要知道命令行参数名，如 file，就可以访问其对应的值： options.file 。</li>
	<li>args，它是一个由 positional arguments 组成的列表。</li>
</ul>
<h1>Actions</h1>
action 是 parse_args() 方法的参数之一，它指示 optparse 当解析到一个命令行参数时该如何处理。actions 有一组固定的值可供选择，默认是’<strong>store</strong>‘，表示将命令行参数值保存在 options 对象里。

示例

parser.add_option("-f", "--file",
action="store", type="string", dest="filename")
args = ["-f", "foo.txt"]
(options, args) = parser.parse_args(args)
print options.filename

最后将会打印出 “foo.txt”。

当 optparse 解析到’-f’，会继续解析后面的’foo.txt’，然后将’foo.txt’保存到 options.filename 里。当调用 parser.args() 后，options.filename 的值就为’foo.txt’。

你也可以指定 add_option() 方法中 type 参数为其它值，如 int 或者 float 等等：

parser.add_option("-n", type="int", dest="num")

默认地，type 为’string’。也正如上面所示，长参数名也是可选的。其实，dest 参数也是可选的。如果没有指定 dest 参数，将用命令行的参数名来对 options 对象的值进行存取。

store 也有其它的两种形式： <strong>store_true</strong> 和 <strong>store_false</strong>，用于处理带命令行参数后面不带值的情况。如 -v,-q 等命令行参数：

parser.add_option("-v", action="store_true", dest="verbose")
parser.add_option("-q", action="store_false", dest="verbose")

这样的话，当解析到 ‘-v’，options.verbose 将被赋予 True 值，反之，解析到 ‘-q’，会被赋予 False 值。

其它的 actions 值还有：

<strong>store_const</strong>、<strong>append</strong>、<strong>count</strong>、<strong>callback</strong>。
<h1>默认值</h1>
parse_args() 方法提供了一个 default 参数用于设置默认值。如：

parser.add_option("-f","--file", action="store", dest="filename", default="foo.txt")
parser.add_option("-v", action="store_true", dest="verbose", default=True)

又或者使用 set_defaults()：

parser.set_defaults(filename="foo.txt",verbose=True)
parser.add_option(...)
(options, args) = parser.parse_args()
<h1>生成程序帮助</h1>
optparse 另一个方便的功能是自动生成程序的帮助信息。你只需要为 add_option() 方法的 help 参数指定帮助信息文本：

usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser(usage=usage)
parser.add_option("-v", "--verbose",
action="store_true", dest="verbose", default=True,
help="make lots of noise [default]")
parser.add_option("-q", "--quiet",
action="store_false", dest="verbose",
help="be vewwy quiet (I'm hunting wabbits)")
parser.add_option("-f", "--filename",
metavar="FILE", help="write output to FILE"),
parser.add_option("-m", "--mode",
default="intermediate",
help="interaction mode: novice, intermediate, "
"or expert [default: %default]")

当 optparse 解析到 -h 或者 –help 命令行参数时，会调用 parser.print_help() 打印程序的帮助信息：

usage: &lt;yourscript&gt; [options] arg1 arg2

options:
-h, --help show this help message and exit
-v, --verbose make lots of noise [default]
-q, --quiet be vewwy quiet (I'm hunting wabbits)
-f FILE, --filename=FILE
write output to FILE
-m MODE, --mode=MODE interaction mode: novice, intermediate, or
expert [default: intermediate]

<strong>注意：</strong> 打印出帮助信息后，optparse 将会退出，不再解析其它的命令行参数。

以上面的例子来一步步解释如何生成帮助信息：
<ul>
	<li>自定义的程序使用方法信息（usage message）：

usage = "usage: %prog [options] arg1 arg2"
这行信息会优先打印在程序的选项信息前。当中的 %prog，optparse 会以当前程序名的字符串来替代：如 os.path.basename.(sys.argv[0])。

如果用户没有提供自定义的使用方法信息，optparse 会默认使用： “usage: %prog [options]”。</li>
	<li>用户在定义命令行参数的帮助信息时，不用担心换行带来的问题，optparse 会处理好这一切。</li>
	<li>设置 add_option 方法中的 metavar 参数，有助于提醒用户，该命令行参数所期待的参数，如 metavar=“mode”：

-m MODE, --mode=MODE
<strong>注意：</strong> metavar 参数中的字符串会自动变为大写。</li>
	<li>在 help 参数的帮助信息里使用 %default 可以插入该命令行参数的默认值。</li>
</ul>
如果程序有很多的命令行参数，你可能想为他们进行分组，这时可以使用 OptonGroup：

group = OptionGroup(parser, ``Dangerous Options'',
``Caution: use these options at your own risk. ``
``It is believed that some of them bite.'')
group.add_option(``-g'', action=''store_true'', help=''Group option.'')
parser.add_option_group(group)

下面是将会打印出来的帮助信息：

usage: [options] arg1 arg2

options:
-h, --help show this help message and exit
-v, --verbose make lots of noise [default]
-q, --quiet be vewwy quiet (I'm hunting wabbits)
-fFILE, --file=FILE write output to FILE
-mMODE, --mode=MODE interaction mode: one of 'novice', 'intermediate'
[default], 'expert'

Dangerous Options:
Caution: use of these options is at your own risk. It is believed that
some of them bite.
-g Group option.
<h1>显示程序版本</h1>
象 usage message 一样，你可以在创建 OptionParser 对象时，指定其 version 参数，用于显示当前程序的版本信息：

parser = OptionParser(usage="%prog [-f] [-q]", version="%prog 1.0")

这样，optparse 就会自动解释 –version 命令行参数：

$ /usr/bin/foo --version
foo 1.0
<h1>处理异常</h1>
包括程序异常和用户异常。这里主要讨论的是用户异常，是指因用户输入无效的、不完整的命令行参数而引发的异常。optparse 可以自动探测并处理一些用户异常：

$ /usr/bin/foo -n 4x
usage: foo [options]

foo: error: option -n: invalid integer value: '4x'

$ /usr/bin/foo -n
usage: foo [options]

foo: error: -n option requires an argument

用户也可以使用 parser.error() 方法来自定义部分异常的处理：

(options, args) = parser.parse_args()
[...]
if options.a and options.b:
parser.error("options -a and -b are mutually exclusive")

上面的例子，当 -b 和 -b 命令行参数同时存在时，会打印出“options -a and -b are mutually exclusive“，以警告用户。

如果以上的异常处理方法还不能满足要求，你可能需要继承 OptionParser 类，并重载 exit() 和 erro() 方法。
<h1>完整的程序例子</h1>
from optparse import OptionParser
[...]
def main():
usage = "usage: %prog [options] arg"
parser = OptionParser(usage)
parser.add_option("-f", "--file", dest="filename",
help="read data from FILENAME")
parser.add_option("-v", "--verbose",
action="store_true", dest="verbose")
parser.add_option("-q", "--quiet",
action="store_false", dest="verbose")
[...]
(options, args) = parser.parse_args()
if len(args) != 1:
parser.error("incorrect number of arguments")
if options.verbose:
print "reading %s..." % options.filename
[...]

if __name__ == "__main__":
main()
<h1>参考资料</h1>
<ul>
	<li><a href="http://docs.python.org/lib/module-optparse.html">http://docs.python.org/lib/module-optparse.html</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[Python 有两个内建的模块用于处理命令行参数，一个是 getopt，《Deep in python》一书中也有提到，只能简单处理命令行参数；另一个是 optparse，它功能强大，而且易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2010-09-24 10:57:00</wp:post_date>
		<wp:post_date_gmt>2010-09-24 10:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python%ef%bc%9a-%e4%bd%bf%e7%94%a8-optparse-%e5%a4%84%e7%90%86%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%8f%82%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="optparse"><![CDATA[optparse]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1671]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于mysql insert触发器Can&#039;t update table &#039;tbl&#039;错误</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8emysql-insert%e8%a7%a6%e5%8f%91%e5%99%a8cant-update-table-tbl%e9%94%99%e8%af%af.html</link>
		<pubDate>Fri, 24 Sep 2010 10:58:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[Can't update table 'tbl' in stored function/trigger because it is already used by statement which invoked this stored function/trigger

链接：<a href="http://forums.mysql.com/read.php?99,122354,122354#msg-122354">http://forums.mysql.com/read.php?99,122354,122354#msg-122354</a>

<strong>原因：</strong>

when you insert a record mysql is doing some lock stuff. you can't insert/update/delete rows of the same table where you insert.. because then the trigger would called again and again.. ending up in a recursion。

别人测试的结果是类似这样的触发器在MSSQL, Oracle, DB2, PostgreSQL都没有问题，应该是mysql的一个缺陷，估计会在以后得版本中完成，因为担心陷入死循环，完全可以暴力一点判断再该条语句引发的第三次对该表的操作时，终止该操作，然后给一个waring。mysql目前的做法就是传统的“一个ip出问题，然后封锁一个网段”的做法，mysql因为触发器刚刚推出，再一步一步的完善中。

I think the reason is because a table-level lock is issued while the trigger is running, meaning, no modifications allowed to the calling table by the trigger.

这是另外一个人提出的假设，他假设mysql现在使用触发器时使用的table lock

下面是另外一个人的回帖，对这个是否产生的recursion进行了分析，并给出了测试语句。

What's that stuff about recursion?

CREATE TABLE a (
id int(11) NOT NULL auto_increment primary key,
ref int,
updttime datetime
);

DELIMITER |

CREATE TRIGGER buildref AFTER INSERT ON a
FOR EACH ROW BEGIN
UPDATE a SET a.ref = NEW.id, a.updttime = NOW() WHERE a.id = NEW.id;
END;
|

DELIMITER ;

insert into a values(0,0,0) should work!

What's so recursive about that? The record is created and an update should occur.
There is no way to invoce AFTER INSERT again, because it's not INSERT but UPDATE.
What's wrong with that? It runs in Oracle and Informix. Can't find any reason why this should not work!

<strong>解决方法：</strong>

I know this is an old post but I stumbled on the answer and thought I would share. During the insert/update you have access to the NEW object which contains all of the fields in the table involved. If you do a before insert/update and edit the field(s) that you want to change in the new object it will become a part of the calling statement and not be executed as a separately (eliminating the recursion)
ex.
create trigger test
before update on test
for each row
set NEW.updateTime = NOW();

delimiter |

说白了，就是对该记录的操作将after改成before。

我另外做了一下的测试：

测试版本包括5.0.45和5.1.49

create table test(id serial,value1 int,value2 int);

delimiter |

CREATE TRIGGER t1 AFTER INSERT ON test

FOR EACH ROW BEGIN

update test set value2=value1 where id=NEW.id;

END;

|

delimiter ;

Can't update table ‘test’ in stored function/trigger because it is already used by statement which invoked this stored function/trigger

CREATE TRIGGER t1 BEFORE INSERT ON test

FOR EACH ROW BEGIN

SET NEW.value2 =NEW.value1;

END;

|

delimiter ;

success

CREATE TRIGGER t1 BEFORE INSERT ON test

FOR EACH ROW BEGIN

update test set value2=value1 where id=NEW.id-1;

END;

|

delimiter ;

ERROR 1442 (HY000): Can't update table 'test' in stored function/trigger because it is already used by statement which invoked this stored function/trigger.

因为trigger刚刚加入mysql不久还在剧烈更新中，因此最后再每次添加触发器的时候都要进行详细的测试，能用就OK。]]></content:encoded>
		<excerpt:encoded><![CDATA[Can't update table 'tbl' in stored function/trigger because it is already used by statement which invoked this stored function/trigger.
别人测试的结果是类似这样的触发器在MSSQL, Oracle, DB2, PostgreSQL都没有问题，应该是mysql的一个缺陷，估计会在以后得版本中完成，因为担心陷入死循环，完全可以暴力一点判断再该条语句引发的第三次对该表的操作时，终止该操作，然后给一个waring。mysql目前的做法就是传统的“一个ip出问题，然后封锁一个网段”的做法，mysql因为触发器刚刚推出，再一步一步的完善中。
]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2010-09-24 10:58:59</wp:post_date>
		<wp:post_date_gmt>2010-09-24 10:58:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8emysql-insert%e8%a7%a6%e5%8f%91%e5%99%a8cant-update-table-tbl%e9%94%99%e8%af%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="trigger"><![CDATA[trigger]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[3658]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[小明]]></wp:comment_author>
			<wp:comment_author_email>624088783@qq.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>61.185.28.125</wp:comment_author_IP>
			<wp:comment_date>2011-05-06 23:26:45</wp:comment_date>
			<wp:comment_date_gmt>2011-05-06 15:26:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我想做一个触发器，是在插入表中数据之前进行清空表操作，请问这个为什么不可以？您能帮我实现这一操作吗？谢谢！我的操作是这样的：
CREATE TRIGGER bfin BEFORE INSERT ON tempway  FOR EACH ROW
TRUNCATE TABLE tempway
END

再次感谢！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.150.202.36</wp:comment_author_IP>
			<wp:comment_date>2011-05-07 01:06:20</wp:comment_date>
			<wp:comment_date_gmt>2011-05-06 17:06:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mysql&gt; create trigger trigger_test before insert on test  for each row begin truncate test; end//   
ERROR 1422 (HY000): Explicit or implicit commit is not allowed in stored function or trigger.
mysql&gt; create trigger trigger_test before insert on test  for each row begin delete from test; end//        
Query OK, 0 rows affected (0.01 sec)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>固态硬盘与mysql</title>
		<link>http://www.themysql.com/mysql/%e5%9b%ba%e6%80%81%e7%a1%ac%e7%9b%98%e4%b8%8emysql.html</link>
		<pubDate>Fri, 24 Sep 2010 11:00:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[最近关注mysql新的存储引擎xtradb和innodb-plugin，看到很多人在测试他们在ssd（固态硬盘）上面的性能，以前对固态硬盘不太了解，于是了解了一下。

zol上面的报价ssd大概1G1￥18，内存1G￥100-150，硬盘1G￥0.5，内存还是太贵了。想要大规模的提升mysql的性能，最好的方式就是增加内存，看到他们测试固态硬盘，想到用固态硬盘来加速mysql。

google了一把“Facebook 固态硬盘”，就看到了下面这个消息：

Facebook发布了通过将数据缓存在SSD硬盘加速MySQL的内核模块Flashcache。代码已经放到Github上，目前只测试了Linux kernel版本2.6.18和2.6.20。Facebook 称，Flashcache是其内部开发用于帮助扩展InnoDB/MySQL数据库，但同时Flashcache也是作为一个通用的缓存模块设计的，因此 能用在任何搭建在块设备之上的应用程序。

google了一把“google 固态硬盘”，看到的是google也打算用固态硬盘，不过上面大部分说的是google采用ssd是因为ssd省电，减少内耗，我想速度也是一个考虑吧。

mysql cluster以前的版本数据全部放在内存中，太恐怖了，太费钱了。看来可以使用固态硬盘，通过最少的钱组建一个强大、稳定的mysql。等Flashcache稳定之后也可以关注一把。]]></content:encoded>
		<excerpt:encoded><![CDATA[最近关注mysql新的存储引擎xtradb和innodb-plugin，看到很多人在测试他们在ssd（固态硬盘）上面的性能，以前对固态硬盘不太了解，于是了解了一下。]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2010-09-24 11:00:06</wp:post_date>
		<wp:post_date_gmt>2010-09-24 11:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%9b%ba%e6%80%81%e7%a1%ac%e7%9b%98%e4%b8%8emysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="ssd"><![CDATA[ssd]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1475]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于mysql skip-name-resolve选项</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8emysql-skip-name-resolve%e9%80%89%e9%a1%b9.html</link>
		<pubDate>Fri, 24 Sep 2010 11:01:03 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[When a new thread connects to mysqld, mysqld will spawn a new thread to handle the request. This thread will first check if the hostname is in the hostname cache. If not the thread will call gethostbyaddr_r() and gethostbyname_r() to resolve the hostname.

If the operating system doesn't support the above thread-safe calls, the thread will lock a mutex and call gethostbyaddr() and gethostbyname() instead. Note that in this case no other thread can resolve other hostnames that is not in the hostname cache until the first thread is ready.

You can disable DNS host lookup by starting mysqld with --skip-name-resolve. In this case you can however only use IP names in the MySQL privilege tables.

If you have a very slow DNS and many hosts, you can get more performance by either disabling DNS lookop with --skip-name-resolve or by increasing the HOST_CACHE_SIZE define (default: 128) and recompile mysqld.

You can disable the hostname cache with --skip-host-cache. You can clear the hostname cache with FLUSH HOSTS or mysqladmin flush-hosts.

If you don't want to allow connections over TCP/IP, you can do this by starting mysqld with --skip-networking.

大致翻译如下：

当一个新连接连接mysql服务器时，mysql服务器会对此次连接的合法性进行判定，具体通过查询mysql.user表实现。mysql的权限设置将user和host（客户端的地址）联系起来，只有当两者都符合条件时才能进行下一步认证。

当 客户端连接的时候，客户端的地址假如不在mysql.host表中时，mysql服务器会调用gethostbyaddr和gethostbyname名 字进行解析（同步方法），或者gethostbyaddr_r和gethostbyname_r（异步）来解析客户端地址，这样会导致效率下降。

因此建议安装完毕之后从my.cnf中删除skip-name-resolve，然后在调用grant命令时全部写成ip地址。

假如以前的mysql.user表中host列存在host-name，设置skip-name-resolve时，会出现如下的warning：

[Warning] 'user' entry 'root@XXX.com' ignored in --skip-name-resolve mode.

删掉（因为已经改成ip认证的形式了）重启就ok了]]></content:encoded>
		<excerpt:encoded><![CDATA[当一个新连接连接mysql服务器时，mysql服务器会对此次连接的合法性进行判定，具体通过查询mysql.user表实现。mysql的权限设置将user和host（客户端的地址）联系起来，只有当两者都符合条件时才能进行下一步认证。
当 客户端连接的时候，客户端的地址假如不在mysql.host表中时，mysql服务器会调用gethostbyaddr和gethostbyname名 字进行解析（同步方法），或者gethostbyaddr_r和gethostbyname_r（异步）来解析客户端地址，这样会导致效率下降。]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2010-09-24 11:01:03</wp:post_date>
		<wp:post_date_gmt>2010-09-24 11:01:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8emysql-skip-name-resolve%e9%80%89%e9%a1%b9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="option"><![CDATA[option]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2672]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cpu架构与mysql rpm安装包</title>
		<link>http://www.themysql.com/mysql/cpu%e6%9e%b6%e6%9e%84%e4%b8%8emysql-rpm%e5%ae%89%e8%a3%85%e5%8c%85.html</link>
		<pubDate>Fri, 24 Sep 2010 11:02:14 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[安装mysql rpm包的时候需要选择合适的版本， mysql提供两种<strong>IA-64和X86</strong>，上网了解了一下：

<strong>X86：</strong>Intel的32位服务器Xeon（至 强）处理器系列、AMD的全系列，还有VIA的全系列处理器产品都属于x86架构的

<strong>IA-64</strong><strong>：</strong>Itanium和Itanium2

安装的时候选择合适的版本，可以获得更好的性能和稳定性。]]></content:encoded>
		<excerpt:encoded><![CDATA[安装mysql rpm包的时候需要选择合适的版本， mysql提供两种IA-64和X86，上网了解了一下：

X86：Intel的32位服务器Xeon（至 强）处理器系列、AMD的全系列，还有VIA的全系列处理器产品都属于x86架构的

IA-64：Itanium和Itanium2

安装的时候选择合适的版本，可以获得更好的性能和稳定性。]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2010-09-24 11:02:14</wp:post_date>
		<wp:post_date_gmt>2010-09-24 11:02:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cpu%e6%9e%b6%e6%9e%84%e4%b8%8emysql-rpm%e5%ae%89%e8%a3%85%e5%8c%85</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysql-install"><![CDATA[mysql install]]></category>
		<category domain="post_tag" nicename="mysql-rpm"><![CDATA[mysql rpm]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1061]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>thumbnail</wp:meta_key>
			<wp:meta_value><![CDATA[http://dev.mysql.com/common/logos/logo-mysql-110x57.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于MySQLdb的一些新发现（使用python连接mysql的库）</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8emysqldb%e7%9a%84%e4%b8%80%e4%ba%9b%e6%96%b0%e5%8f%91%e7%8e%b0%ef%bc%88%e4%bd%bf%e7%94%a8python%e8%bf%9e%e6%8e%a5mysql%e7%9a%84%e5%ba%93%ef%bc%89.html</link>
		<pubDate>Fri, 24 Sep 2010 11:03:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[MySQLdb的文档时通过python的工具自动将注释生成的，所以文档的可读性不是很强。下面是通过其他的文章发现的两个比较好点的使用方式：

一、
cursor.execute("select id,ip,port from db limit 5")
for (id,ip,port) in cursor.fetchall():
print id

这样比row[0][0]...这种方式阅读性要好一点，并且代码比较简洁

二、

cursor = conn.cursor (MySQLdb.cursors.DictCursor)
cursor.execute ("SELECT name, category FROM animal")
result_set = cursor.fetchall ()
for row in result_set:
print "%s, %s" % (row["name"], row["category"])

效果同上，感觉相比而言更喜欢第一种，简洁可读性等都较高

三、

cursor有个属性rowcount返回受影响的行数，这个在文档中没有找到，但是实际测试的时候发现确实包含了这个属性，有兴趣的娃可以考证一下。

<a href="http://mysql-python.sourceforge.net/MySQLdb-1.2.2/public/MySQLdb-module.html" target="_blank">官方文档地址</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[MySQLdb的文档时通过python的工具自动将注释生成的，所以文档的可读性不是很强。下面是通过其他的文章发现的两个比较好点的使用方式：

一、
cursor.execute("select id,ip,port from db limit 5")
for (id,ip,port) in cursor.fetchall():
print id

这样比row[0][0]...这种方式阅读性要好一点，并且代码比较简洁

二、

cursor = conn.cursor (MySQLdb.cursors.DictCursor)
cursor.execute ("SELECT name, category FROM animal")
result_set = cursor.fetchall ()
for row in result_set:
print "%s, %s" % (row["name"], row["category"])

效果同上，感觉相比而言更喜欢第一种，简洁可读性等都较高

三、

cursor有个属性rowcount返回受影响的行数，这个在文档中没有找到，但是实际测试的时候发现确实包含了这个属性，有兴趣的娃可以考证一下。

官方文档地址]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2010-09-24 11:03:17</wp:post_date>
		<wp:post_date_gmt>2010-09-24 11:03:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8emysqldb%e7%9a%84%e4%b8%80%e4%ba%9b%e6%96%b0%e5%8f%91%e7%8e%b0%ef%bc%88%e4%bd%bf%e7%94%a8python%e8%bf%9e%e6%8e%a5mysql%e7%9a%84%e5%ba%93%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqldb"><![CDATA[MySQLdb]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1117]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>crontab中运行python程序出错，提示ImportError: No module named解决全过程</title>
		<link>http://www.themysql.com/python/crontab%e4%b8%ad%e8%bf%90%e8%a1%8cpython%e7%a8%8b%e5%ba%8f%e5%87%ba%e9%94%99%ef%bc%8c%e6%8f%90%e7%a4%baimporterror-no-module-named%e8%a7%a3%e5%86%b3%e5%85%a8%e8%bf%87%e7%a8%8b.html</link>
		<pubDate>Fri, 24 Sep 2010 11:04:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[将一个python脚本放入crontab执行时，提示如下错：
ImportError: No module named hashlib
但是在shell中直接执行时没有任何问题，google之后，得到线索是PYTHONPATH的问题，PYTHONPATH会决定python查找lib的路径。
在服务器上面echo $PYTHONPATH的时候没有任何路径
继续调查发现最终影响的是sys.path
分别输出了两种场景中的sys.path

shell:
[root@ short_task]# python
Python 2.6.2 (r262:71600, Aug  7 2009, 18:39:16)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.path
['', '/usr/local/lib/python2.6/site-packages/setuptools-0.6c5-py2.6.egg', '/usr/local/lib/python2.6/site-packages/MySQL_python-1.2.2-py2.6-linux-x86_64.egg', '/home/houjw/short_task', '/home/bonny/sqlLib', '/usr/local/lib/python26.zip', '/usr/local/lib/python2.6', '/usr/local/lib/python2.6/plat-linux2', '/usr/local/lib/python2.6/lib-tk', '/usr/local/lib/python2.6/lib-old', '/usr/local/lib/python2.6/lib-dynload', '/usr/local/lib/python2.6/site-packages']

crontab:
于是修改脚本，查看当脚本在crontab执行时的syspath是多少
[root@ short_task]# less get_email_hash.log
['/home/houjw/short_task', '/usr/lib64/python24.zip', '/usr/lib64/python2.4', '/usr/lib64/python2.4/plat-linux2', '/usr/lib64/python2.4/lib-tk', '/usr/lib64/python2.4/lib-dynloa
d', '/usr/lib64/python2.4/site-packages', '/usr/lib64/python2.4/site-packages/Numeric', '/usr/lib64/python2.4/site-packages/gtk-2.0', '/usr/lib/python2.4/site-packages']
Traceback (most recent call last):
File "/home/houjw/short_task/get_email_hash.py", line 7, in ?
import hashlib
ImportError: No module named hashlib

然后研究了一下sys.patch的生成方式：
A list of strings that specifies the search path for modules. Initialized from the environment variable PYTHONPATH, plus an installation-dependent default.
这个不仅与PYTHONPATH有关系，而且与installation-dependent default有关系，这个估计与python的安装有关系，而且通过上面的sys.path输出发现机器上安装了两个python2.4和2.6，说明crontab中用到的是2.4，而shell中用到的是2.6，hashlib正好是在2.5的时候加入python的，所以2.4就没有找到。

通过cat crontab发现crontab中的PATH变量首先发现的是2.4的python

于是问题就得到了解决，在crontab中使用/usr/loca/bin/python XXX.python而不是python XXX.python或者将XXX.python修改为可执行文件，在python头部#!/usr/local/bin/python]]></content:encoded>
		<excerpt:encoded><![CDATA[将一个python脚本放入crontab执行时，提示如下错：
ImportError: No module named hashlib
但是在shell中直接执行时没有任何问题，google之后，得到线索是PYTHONPATH的问题，]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2010-09-24 11:04:15</wp:post_date>
		<wp:post_date_gmt>2010-09-24 11:04:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>crontab%e4%b8%ad%e8%bf%90%e8%a1%8cpython%e7%a8%8b%e5%ba%8f%e5%87%ba%e9%94%99%ef%bc%8c%e6%8f%90%e7%a4%baimporterror-no-module-named%e8%a7%a3%e5%86%b3%e5%85%a8%e8%bf%87%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="crontab"><![CDATA[crontab]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[4708]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>169</wp:comment_id>
			<wp:comment_author><![CDATA[asiacream]]></wp:comment_author>
			<wp:comment_author_email>asiacream@126.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.116.240.176</wp:comment_author_IP>
			<wp:comment_date>2012-01-05 16:12:59</wp:comment_date>
			<wp:comment_date_gmt>2012-01-05 08:12:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool!  这个真的解决了问题！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>冗余索引对查询效率的影响</title>
		<link>http://www.themysql.com/mysql/%e5%86%97%e4%bd%99%e7%b4%a2%e5%bc%95%e5%af%b9%e6%9f%a5%e8%af%a2%e6%95%88%e7%8e%87%e7%9a%84%e5%bd%b1%e5%93%8d.html</link>
		<pubDate>Sat, 25 Sep 2010 04:15:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>背景：</strong>

在一般的数据库书籍中，简述到如何合理创建索引时都会出现这么一段话：

“索引能提高sql的执行效率，但是过多不合理的索引也会影响数据库的性能”

过度索引是如何影响数据库的性能的呢？

1。 在执行sql之前，数据库会根据metadata信息决定该使用哪个索引，如果索引过多会影响这一步骤的效率。

2。 由于每次数据更新和插入都要更新索引，因此会影响相关操作的效率

而第一点就是本文的讨论重点所在。

过度索引是否真的会影响sql执行效率？

如果影响，程度是多大？</blockquote>
<blockquote>测试环境：

drop table if EXISTS test_index_performance;

CREATE TABLE test_index_performance (

id int primary key ,

col1 varchar(10),

col2 varchar(10),

col3 varchar(10),

col4 varchar(10),

col5 varchar(10),

col6 varchar(10),

col7 varchar(10),

col8 varchar(10),

col9 varchar(10),

col10 varchar(10)

)engine=innodb;

delimiter $$

create PROCEDURE insert_data_for_test_index_performance ()

begin

DECLARE total int default 100000;

DECLARE i int default 0;

truncate table test_index_performance;

while(i &lt; total)

do

insert into test_index_performance values (i,’a',’a',’a',’a',’a',’a',’a',’a',’a',’a');

set i=i+1;

end while ;

end $$

delimiter ;

call insert_data_for_test_index_performance();</blockquote>
正文：
<blockquote>结果一：与执行计划相关的索引（出现在possible keys的那些），索引的数量与sql执行消耗时间成正比。

create index idx1 on test_index_performance (col1);

create index idx2 on test_index_performance (col1,col2);

create index idx3 on test_index_performance (col1,col2,col3);

create index idx4 on test_index_performance (col1,col2,col3,col4);

create index idx5 on test_index_performance (col1,col2,col3,col4,col5);

create index idx6 on test_index_performance (col1,col2,col3,col4,col5,col6);

create index idx7 on test_index_performance (col1,col2,col3,col4,col5,col6,col7);

create index idx8 on test_index_performance (col1,col2,col3,col4,col5,col6,col7,col8);

create index idx9 on test_index_performance (col1,col2,col3,col4,col5,col6,col7,col8,col9);

create index idx10 on test_index_performance (col1,col2,col3,col4,col5,col6,col7,col8,col9,col10);

执行以下语句

select count(*) from test_index_performance where col1=’a’ ;

– show profile for query 1; 结果的statistics部分

– 1索引	0.000070

– 2索引	0.000083

– 3索引	0.000107

– 4索引	0.000112

– 5索引	0.000126

– 6索引	0.000155

– 7索引	0.000152

– 8索引	0.000164

– 9索引	0.000187</blockquote>
<blockquote>结果二： 与执行计划无关的索引（不出现在possible keys的那些），不会影响sql的执行效率。

create index idx12 on test_index_performance (col2);

create index idx13 on test_index_performance (col2,col3);

create index idx14 on test_index_performance (col2,col3,col4);

create index idx15 on test_index_performance (col2,col3,col4,col5);

create index idx16 on test_index_performance (col2,col3,col4,col5,col6);

create index idx17 on test_index_performance (col2,col3,col4,col5,col6,col7);

create index idx18 on test_index_performance (col2,col3,col4,col5,col6,col7,col8);

create index idx19 on test_index_performance (col2,col3,col4,col5,col6,col7,col8,col9);

create index idx20 on test_index_performance (col2,col3,col4,col5,col6,col7,col8,col9,col10);

执行以下语句

select count(*) from test_index_performance where col1=’a’ ;</blockquote>
<blockquote>结果三： 表的大小，与索引对于sql执行效率的影响，没有直接联系

– show profile for query 1; 结果的statistics部分

– 1w条	0.000187

– 10w条   0.000192

– 20w条   0.000198

– 30w条   0.000192</blockquote>
<blockquote>总结：
1。与本条语句执行相关的index的数量（possible key），会影响最终效率

2。对效率的影响体现在，statistics阶段

3。原因在于优化器需要从information_schema中获取相关索引的metadata信息并分析，索引数量越多，这个过程越漫长

4。与本条语句执行无关的index数量不影响最终效率

5。 效率影响在10%左右</blockquote>
转自：<a href="http://www.mysqlsystems.com/2010/09/%E5%86%97%E4%BD%99%E7%B4%A2%E5%BC%95%E5%AF%B9%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E7%9A%84%E5%BD%B1%E5%93%8D.html" target="_blank">mysqlsystems</a> 作者：cenalulu]]></content:encoded>
		<excerpt:encoded><![CDATA[
在一般的数据库书籍中，简述到如何合理创建索引时都会出现这么一段话：

“索引能提高sql的执行效率，但是过多不合理的索引也会影响数据库的性能”

过度索引是如何影响数据库的性能的呢？

1。 在执行sql之前，数据库会根据metadata信息决定该使用哪个索引，如果索引过多会影响这一步骤的效率。

2。 由于每次数据更新和插入都要更新索引，因此会影响相关操作的效率]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2010-09-24 20:15:18</wp:post_date>
		<wp:post_date_gmt>2010-09-25 04:15:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%86%97%e4%bd%99%e7%b4%a2%e5%bc%95%e5%af%b9%e6%9f%a5%e8%af%a2%e6%95%88%e7%8e%87%e7%9a%84%e5%bd%b1%e5%93%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="index"><![CDATA[index]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="%e6%b5%8b%e8%af%95"><![CDATA[测试]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1659]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python计算时间差</title>
		<link>http://www.themysql.com/python/python%e8%ae%a1%e7%ae%97%e6%97%b6%e9%97%b4%e5%b7%ae.html</link>
		<pubDate>Mon, 27 Sep 2010 03:53:13 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[下面举几个实用的例子，来说明如何通过python计算时间差

import datetime
&gt;&gt;&gt; d1 = datetime.datetime(2005, 2, 16)
&gt;&gt;&gt; d2 = datetime.datetime(2004, 12, 31)
&gt;&gt;&gt; (d1 – d2).days

datetime可以查看：天数(day)，小时数(hour)，星期几(weekday())等;

timedelta可以查看：天数(days)，秒数(seconds)等。

datetime支持的操作有下面几种

datetime Supported operations:

datetime2 = datetime1 + timedelta

datetime2 = datetime1 - timedelta

timedelta = datetime1 - datetime2

d3 = d1 + datetime.timedelta(days =10)]]></content:encoded>
		<excerpt:encoded><![CDATA[python计算时间差
>>> d1 = datetime.datetime(2005, 2, 16)
>>> d2 = datetime.datetime(2004, 12, 31)
>>> (d1 – d2).days]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2010-09-26 19:53:13</wp:post_date>
		<wp:post_date_gmt>2010-09-27 03:53:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python%e8%ae%a1%e7%ae%97%e6%97%b6%e9%97%b4%e5%b7%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="datetime"><![CDATA[datetime]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="timedelta"><![CDATA[timedelta]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2701]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sysbench找不到libmysqlclient_r.so.15解决方法</title>
		<link>http://www.themysql.com/mysql/sysbench%e6%89%be%e4%b8%8d%e5%88%b0libmysqlclient_r-so-15%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95.html</link>
		<pubDate>Mon, 27 Sep 2010 09:19:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[运行sysbench时，提示类似下面的error:

./sysbench: error while loading shared libraries: libmysqlclient_r.so.15: cannot open shared object file: No such file or directory

安装对应版本的：

RedHat Enterprise Linux 5 RPM (AMD64, Dynamic client libraries (including 3.23.x libraries)) (10 Jul 2007, 3.1M)

注：AMD64位对应x86_64

5.0.45对应的是MySQL-shared-compat-5.0.45-0.rhel5.x86_64.rpm

安装Percona时，安装Percona-Server-shared-51-5.1.50-rel11.4.111.rhel5.x86_64.rpm后，依然提示找不到libmysqlclient_r.so.15，卸载之后安装对应版本的MySQL-shared-compat-5.1.50-1.rhel5.x86_64.rpm，就好了。

在percona的<a href="https://bugs.launchpad.net/percona-xtradb/+bug/386054">trac</a>上可以看到此前这个被举报为一个bug，按照下面的状态显示应该已经被fixed的，不知道因为什么原因又出来。

另外如果是编译安装的MySQL，可以参考下面的做法：

/usr/local/sysbench/bin/sysbench: error while loading shared libraries: libmysqlclient_r.so.15: cannot open shared object file: No such file or directory找不到连接库，解决方法：①在/usr/local/mysql55/lib/目录下首先执行ln -s libmysqlclient.so.18.0.0 libmysqlclient_r.so.15②编辑/etc/lld.so.conf文件运行ldconfig(ldconfig的作用使得/etc/ld.so.conf文件的变更生效)
或者export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/mysql55/lib长期有效的添加到.bash_profileLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/libexport LD_LIBRARY_PATH]]></content:encoded>
		<excerpt:encoded><![CDATA[安装RedHat Enterprise Linux 5 RPM (AMD64, Dynamic client libraries (including 3.23.x libraries)) (10 Jul 2007, 3.1M)可以解决问题。]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2010-09-27 01:19:26</wp:post_date>
		<wp:post_date_gmt>2010-09-27 09:19:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sysbench%e6%89%be%e4%b8%8d%e5%88%b0libmysqlclient_r-so-15%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-shared-compat"><![CDATA[MySQL-shared-compat]]></category>
		<category domain="post_tag" nicename="sybench"><![CDATA[sybench]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2491]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[sysbench,libmysqlclient_r.so.15]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>十大WordPress的SEO优化技巧</title>
		<link>http://www.themysql.com/%e6%9c%aa%e5%88%86%e7%b1%bb/%e5%8d%81%e5%a4%a7wordpress%e7%9a%84seo%e4%bc%98%e5%8c%96%e6%8a%80%e5%b7%a7.html</link>
		<pubDate>Mon, 27 Sep 2010 10:07:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.williamlong.info/?tags=WordPress" target="_blank">WordPress</a>系统本身，默认安装的情况下使用默认模板，实际上对搜索引擎并不友好，并没有针对搜索引擎进行很好的设计，下面我介绍一些技巧和方法可以使得WordPress能否对搜索引擎更为友好。

<strong>1、文章URL链接结构的优化</strong>

Permalink里面要包含postname.一般的服务器都支持mod_rewrite功能，使用这个功能可以优化Permalink（永久链接），在Option-Permalink里的Common options里进行设置，我比较倾向于使用/%year%/%monthnum%/%postname%.html这种链接结构，一来链接目录只有两级，利于索引，二来这种链接结构和Blogspot和Movable Type的链接结构一致，比较利于系统平滑迁移或切换。postname使用英文，如果是写英文Blog的话，系统会自动将标题的post slug做为postname.
<div id="_mcePaste">%year%</div>
<div id="_mcePaste">The year of the post, four digits, for example 2004</div>
<div id="_mcePaste">%monthnum%</div>
<div id="_mcePaste">Month of the year, for example 05</div>
<div id="_mcePaste">%day%</div>
<div id="_mcePaste">Day of the month, for example 28</div>
<div id="_mcePaste">%hour%</div>
<div id="_mcePaste">Hour of the day, for example 15</div>
<div id="_mcePaste">%minute%</div>
<div id="_mcePaste">Minute of the hour, for example 43</div>
<div id="_mcePaste">%second%</div>
<div id="_mcePaste">Second of the minute, for example 33</div>
<div id="_mcePaste">%postname%</div>
<div id="_mcePaste">A sanitized version of the title of the post (post slug field on Edit Post/Page panel). So “This Is A Great Post!” becomesthis-is-a-great-post in the URI (see Using only %postname%). Starting Permalinks with %postname% is strongly not recommended for performance reasons..</div>
<div id="_mcePaste">%post_id%</div>
<div id="_mcePaste">The unique ID # of the post, for example 423</div>
<div id="_mcePaste">%category%</div>
<div id="_mcePaste">A sanitized version of the category name (category slug field on New/Edit Category panel). Nested sub-categories appear as nested directories in the URI. Starting Permalinks with %category% is strongly not recommended for performance reasons.</div>
<div id="_mcePaste">%tag%</div>
<div id="_mcePaste">A sanitized version of the tag name (tag slug field on New/Edit Tag panel). Starting Permalinks with %tag% is strongly not recommended for performance reasons</div>
<div id="_mcePaste">%author%</div>
<div id="_mcePaste">A sanitized version of the author name. Starting Permalinks with %author% is strongly not recommended for performance reasons</div>
%year%The year of the post, four digits, for example 2004%monthnum%Month of the year, for example 05%day%Day of the month, for example 28%hour%Hour of the day, for example 15%minute%Minute of the hour, for example 43%second%Second of the minute, for example 33%postname%A sanitized version of the title of the post (post slug field on Edit Post/Page panel). So “This Is A Great Post!” becomesthis-is-a-great-post in the URI (see Using only %postname%). Starting Permalinks with %postname% is strongly not recommended for performance reasons..%post_id%The unique ID # of the post, for example 423%category%A sanitized version of the category name (category slug field on New/Edit Category panel). Nested sub-categories appear as nested directories in the URI. Starting Permalinks with %category% is strongly not recommended for performance reasons.%tag%A sanitized version of the tag name (tag slug field on New/Edit Tag panel). Starting Permalinks with %tag% is strongly not recommended for performance reasons%author%A sanitized version of the author name. Starting Permalinks with %author% is strongly not recommended for performance reasons

<strong>2、文章Post Slug的优化</strong>

文章标题中最好包含文章最关键的关键字，不要使用一些没有意义的标题，对于英文Blog来讲，最好启用一个名叫<a href="http://www.vretoolbar.com/news/seo-slugs-wordpress-plugin" target="_blank">SEO Slugs</a>的插件，该插件能够自动将post slug中的the、in等“没用”的单词删除，有利于SEO.

<strong>3、文章Title的优化</strong>

WordPress默认的Title是“博客名-文章名”，这对SEO很不好，我觉得应该使用“文章名-博客名”的形式，建议安装一个名叫<a href="http://wp.uberdose.com/2007/03/24/all-in-one-seo-pack/" target="_blank">All in One SEO Pack</a>的插件，可以自动将Title进行优化，并增加Descriptions和Keywords的Meta.

<strong>4、robots.txt的优化</strong>

在博客根目录下放置一个robots.txt的文件，可以指定搜索引擎只收录指定的内容。 对于WordPress来说，有一些地址是不应该被搜索引擎索引的，比如后台程序、日志文件、FEED地址等，一个针对WordPress的robots.txt的例子如下：

User-agent: *
Disallow: /wp-
Disallow: /feed/
Disallow: /comments/feed
Disallow: /trackback/

<strong>5、Sitemap的优化</strong>

对于Google搜索引擎来讲，使用<a href="http://www.williamlong.info/archives/327.html" target="_blank">Sitemap</a>可以让搜索引擎更为有效的进行索引，安装一个名叫<a href="http://www.arnebrachhold.de/2005/06/05/google-sitemaps-generator-v2-final" target="_blank">Sitemap Generator</a>的插件可以自动完成Google Sitemap的生成，然后将这个地址提交到<a href="http://www.google.com/webmasters/" target="_blank">Google Webmaster</a>即可。

<strong>6、防止垃圾留言评论</strong>

垃圾留言评论会影响Blog在搜索引擎中的表现，因此需要安装一个自动过滤垃圾留言评论的的插件，推荐使用<a href="http://akismet.com/" target="_blank">Akismet</a>。

<strong>7、相关文章</strong>

通过tag的标记来实现相关文章，不过我建议使用WordPress 2.3里面的tag系统来实现，那样效率会更高一些。

<strong>8、搜索引擎来源的优化</strong>

安装一个名叫<a href="http://theundersigned.net/2006/06/landing-sites-11/" target="_blank">Landing sites</a>的插件，可以让那些从搜索引擎搜索过来的用户体验更好，通过这个插件能够选择显示给用户搜索关键字相关的文章。

<strong>9、不要轻易做变动</strong>

不要总是草率的变动自己的域名、博客名、链接结构、链接地址等，早期应该做全局的规划，中途进行大的变动是非常不明智的。

<strong>10、更新你的博客</strong>

记着经常更新，并且写出高质量的内容，这才是SEO中最关键的地方，写出高质量的文章，将会更容易实现SEO的目标。

下面是一些其他中文的WordPress SEO优化技巧文章：

<a href="http://www.osxcn.com/wordpress/seo-for-wordpress.html" target="_blank">SEO for WordPress 完全指南</a>

<a href="http://blogunion.org/wordpress/wordpress-tips/wordpress-seo.html" target="_blank">10步实现WordPress搜索引擎优化</a>

下面是一些英文的WordPress SEO优化技巧文章：

<a href="http://www.moon-blog.com/2008/02/top-ten-wordpress-seo-tips.html" target="_blank">Top Ten WordPress SEO Tips</a>

<a href="http://www.solostream.com/2006/01/16/savvy-search-engine-optimization-seo-tips-for-wordpress-20/">Search Engine Optimization (SEO) Tips for Wordpress 2.0</a>

<a href="http://www.johntp.com/2006/04/21/8-simple-seo-tips-for-blogs/">8 simple SEO tips for blogs</a>

<a href="http://www.geek-notes.com/wordpress/25/optimize-wordpress-for-search-engines/">Optimize Wordpress for Search Engines</a>

转自：<a href="http://www.williamlong.info/archives/1050.html">月光博客</a>

因为<a href="http://www.themysql.com">我自己现在的博客</a>就是按照这个来进行优化，所以就贴在了这里]]></content:encoded>
		<excerpt:encoded><![CDATA[WordPress系统本身，默认安装的情况下使用默认模板，实际上对搜索引擎并不友好，并没有针对搜索引擎进行很好的设计，下面我介绍一些技巧和方法可以使得WordPress能否对搜索引擎更为友好。]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2010-09-27 02:07:08</wp:post_date>
		<wp:post_date_gmt>2010-09-27 10:07:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8d%81%e5%a4%a7wordpress%e7%9a%84seo%e4%bc%98%e5%8c%96%e6%8a%80%e5%b7%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="post_tag" nicename="wordpress-2"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[WordPress系统本身，默认安装的情况下使用默认模板，实际上对搜索引擎并不友好，并没有针对搜索引擎进行很好的设计，下面我介绍一些技巧和方法可以使得WordPress能否对搜索引擎更为友好。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[wordpressSEO优化,wordpress SEO插件,wordpress固定链接]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[969]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL Replication过滤选项replicate*过滤规则</title>
		<link>http://www.themysql.com/mysql/mysql-replication%e8%bf%87%e6%bb%a4%e8%a7%84%e5%88%99xian.html</link>
		<pubDate>Tue, 28 Sep 2010 03:04:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[本文为官方文档<a href="http://dev.mysql.com/doc/refman/5.1/en/replication-rules.html">How Servers Evaluate Replication Filtering Rules</a>的精简意译版，有什么疑问欢迎讨论。

mysql从库的过滤选项replicate*分为两类，Database-Level和Table-Level。其中Database-Level受到<code>binlog_format的影响；Table-Level指不受到binlog_format的影响，关于这个下文会详细介绍。</code>

If any --replicate-rewrite-db options were specified, they are applied before the --replicate-* filtering rules are tested.

replicate-rewrite-db选项会在其他选项生效之前执行。

官方文档中Database-Level筛选流程如下：

<img src="http://dev.mysql.com/doc/refman/5.1/en/images/replication-filtering-db-rules.png" alt="Evaluation of Database-Level Filtering Rules           in Replication" width="550" height="625" />

假如过滤选项中包含Database-Level选项，则首先按照Database-Level过滤，过滤完毕之后再按照Table-Level选项进行过滤。

官方文档中Table-Level选项过滤流程如下：

<img src="http://dev.mysql.com/doc/refman/5.1/en/images/replication-filtering-tbl-rules.png" alt="Evaluation of Table-Level Filtering Rules in           Replication" width="585" height="1245" />

其中do-db和do-table的优先级高于ignore-db和ignore-table

本着尽信书不如无书以及文档中的“破绽”，我做了下面的测试：
<div id="_mcePaste">测试一：</div>
<div id="_mcePaste">①</div>
<div id="_mcePaste">增加下面选项时</div>
<div id="_mcePaste">Replicate_Do_DB: test1</div>
<div id="_mcePaste">Replicate_Ignore_Table: test1.test1_1</div>
<div id="_mcePaste">master</div>
<div id="_mcePaste">test1.test1_1 test1.test1_2</div>
<div id="_mcePaste">slave</div>
<div id="_mcePaste">no tables</div>
<div id="_mcePaste">在master上执行use test1;drop table test1_1;</div>
<div id="_mcePaste">在slave上执行show slave status\G未报错</div>
<div id="_mcePaste">在master上执行use test1;drop table test1_2;</div>
<div id="_mcePaste">在slave上执行show slave status\G报错</div>
<div id="_mcePaste">结论：说明Replicate_Ignore_Table起作用（文档中的流程图不一致）</div>
<div id="_mcePaste">②</div>
<div id="_mcePaste">选项同上，并且表结构都有</div>
<div id="_mcePaste">在master上执行use test1;insert into test1_1 values()，查看从库未同步（文档中的流程图不一致）</div>
<div id="_mcePaste">在master上执行use test1;insert into test1_2 values()，查看从库同步</div>
<div id="_mcePaste">测试二：</div>
<div id="_mcePaste">Replicate_Do_DB: test1</div>
<div id="_mcePaste">Replicate_Do_Table: test2.test2_1</div>
<div id="_mcePaste">Replicate_Ignore_Table: test1.test1_1</div>
<div id="_mcePaste">主从表结构都相同，都是</div>
<div id="_mcePaste">test1.test1_1</div>
<div id="_mcePaste">test1.test1_2</div>
<div id="_mcePaste">test2.test2_1</div>
<div id="_mcePaste">test2.test2_2</div>
<div id="_mcePaste">在主库上执行use test2;insert into test2_1 values()，查看从库未同步</div>
<div id="_mcePaste">也就是说Replicate_Do_DB未匹配并且不包含replicate-ignore-db时丢弃（文档中的流程图不一致）</div>
<div id="_mcePaste">测试三：</div>
<div id="_mcePaste">Replicate_Do_DB: test1</div>
<div id="_mcePaste">Replicate_Ignore_DB: test2</div>
<div id="_mcePaste">主从表结果都相同，都是</div>
<div id="_mcePaste">test1.test1_1</div>
<div id="_mcePaste">test1.test1_2</div>
<div id="_mcePaste">test2.test2_1</div>
<div id="_mcePaste">test2.test2_2</div>
<div id="_mcePaste">test3.test3_1</div>
<div id="_mcePaste">在主库上执行use test3;insert into test3_1 values()，查看从库未同步（文档中的流程图不一致）</div>
<div id="_mcePaste">通过上面的测试得出结论：</div>
<div id="_mcePaste">①当选项中包含Replicate_Do_DB时，没有match到的语句全部丢弃了，也就是说包含Replicate_Do_DB，Replicate_Ignore_DB没有起作用</div>
<div id="_mcePaste">②mysql官方文档中的流程图不准确</div>
<div>③当Replicate_Do_DB选项匹配时，会进一步的通过Replicate_Do_Table和Replicate_Ignore_Table进行筛选。</div>
<div>文档中提到的一些注意事项：</div>
<div>①In general, to make it easier to determine what effect an option set will have, it is recommended that you avoid mixing “do” and “ignore” options, or wildcard and nonwildcard options.</div>
<div>避免混合使用do和ignore以及通配符和非通配符</div>
<div>②First, as a preliminary condition, the slave checks whether statement-based replication is enabled. If so, and the statement occurs within a stored function, the slave executes the statement and exits. If row-based replication is enabled, the slave does not know whether a statement occurred within a stored function on the master, so this condition does not apply.</div>
<div>Note</div>
<div>For statement-based replication, replication events represent statements (all changes making up a given event are associated with a single SQL statement); for row-based replication, each event represents a change in a single table row (thus a single statement such as UPDATE mytable SET mycol = 1 may yield many row-based events). When viewed in terms of events, the process of checking table options is the same for both row-based and statement-based replication.</div>
<div>当binlog-format为row-level的时候，执行行所引起的触发器、存储过程、UDF等是不会执行，因为此时mysql不能确定引发的sql语句是否已经写入到binlog中。当binlog-format为row-level时，一条语句会产生很多binlog event。</div>
<div>最后mysql文档中举了一个例子：</div>
<div>
<div>Suppose that we have two tables mytbl1 in database db1 and mytbl2 in database db2 on the master, and the slave is running with the following options (and no other replication filtering options):</div>
<div>replicate-ignore-db = db1</div>
<div>replicate-do-table  = db2.tbl2</div>
<div>Now we execute the following statements on the master:</div>
<div>USE db1;</div>
<div>INSERT INTO db2.tbl2 VALUES (1);</div>
<div>The results on the slave vary considerably depending on the binary log format, and may not match initial expectations in either case.</div>
<div>Statement-based replication.  The USE statement causes db1 to be the default database. Thus the --replicate-ignore-db option matches, and the INSERT statement is ignored. The table options are not checked.</div>
<div>Row-based replication.  The default database has no effect on how the slave reads database options when using row-based replication. Thus, the USE statement makes no difference in how the --replicate-ignore-db option is handled: the database specified by this option does not match the database where the INSERT statement changes data, so the slave proceeds to check the table options. The table specified by --replicate-do-table matches the table to be updated, and the row is inserted.</div>
<div>当binlog-format为statement 时，replicate-do-db等会按照use语句进行过滤，这个时候假如使用类似着这样的操作，user test1;update test2.test2_1等会出现过滤结果跟猜测的不一致的情况发生。</div>
</div>
<a href="http://www.themysql.com">阿飞</a>原创文章，欢迎转载，转载请保留此句话。]]></content:encoded>
		<excerpt:encoded><![CDATA[本文详细了描述了MySQL Replication过滤选项replicate*过滤规则，包括了replicate-do-db、replicate-ignore-db、replicate-do-table、replicate-ignore-table、replicate-rewrite-db、replicate-wild-do-table等选项的详细描述。]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2010-09-28 11:04:56</wp:post_date>
		<wp:post_date_gmt>2010-09-28 03:04:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-replication%e8%bf%87%e6%bb%a4%e8%a7%84%e5%88%99xian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="replication"><![CDATA[replication]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[本文详细了描述了MySQL Replication过滤选项replicate*过滤规则，包括了replicate-do-db、replicate-ignore-db、replicate-do-table、replicate-ignore-table、replicate-rewrite-db、replicate-wild-do-table等选项的详细描述]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[MySQL,MySQL Replication,replicate-do-db,replicate-ignore-db,replicate-do-table,replicate-ignore-table,replicate-rewrite-db,replicate-wild-do-table]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>featured_image</wp:meta_key>
			<wp:meta_value><![CDATA[http://dev.mysql.com/doc/refman/5.1/en/images/replication-filtering-db-rules.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>121</wp:comment_id>
			<wp:comment_author><![CDATA[mysql跨库复制出现的问题 | Java &amp;&amp; Linux]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.javalinux.me/?p=198</wp:comment_author_url>
			<wp:comment_author_IP>182.50.155.21</wp:comment_author_IP>
			<wp:comment_date>2011-11-21 17:17:22</wp:comment_date>
			<wp:comment_date_gmt>2011-11-21 09:17:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://hi.baidu.com/hackers365/blog/item/396fee4bb4fc14e583025c55.html” http://www.themysql.com/mysql/mysql-replication%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99xian.html http://dev.mysql.com/doc/refman/5.0/en/replication-options.html    此条目是由 yhjhoo 发表在 [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>MySQL 5.5GA版本年底前会发布</title>
		<link>http://www.themysql.com/mysql/mysql-5-5ga%e7%89%88%e6%9c%ac%e5%b9%b4%e5%ba%95%e5%89%8d%e4%bc%9a%e5%8f%91%e5%b8%83.html</link>
		<pubDate>Tue, 28 Sep 2010 17:04:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[从下面的订阅中得到消息，MySQL5.5年底之前会发行GA版本

<a href="http://palominodb.com/blog/2010/09/19/mysql-55-now-rc-and-will-be-ga-soon">http://palominodb.com/blog/2010/09/19/mysql-55-now-rc-and-will-be-ga-soon</a>

<a href="http://palominodb.com/blog/2010/09/19/mysql-55-now-rc-and-will-be-ga-soon"></a>Earlier this year, the beta of <a href="http://dev.mysql.com/tech-resources/articles/introduction-to-mysql-55.html" target="_blank">MySQL 5.5</a> was announced.  We all felt excited about the changes in 5.5, especially the <a href="http://blog.zawodny.com/2010/04/14/mysql-5-5-4-is-very-exicting/" target="_blank">large performance improvements</a>.  However, many of us proceeded with caution; version 5.4 was previously announced with similar fanfare and we had yet to see a GA version.

我们才刚刚开始用5.1版本，看来还有很长的路要走]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2010-09-29 01:04:44</wp:post_date>
		<wp:post_date_gmt>2010-09-28 17:04:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-5-5ga%e7%89%88%e6%9c%ac%e5%b9%b4%e5%ba%95%e5%89%8d%e4%bc%9a%e5%8f%91%e5%b8%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[MySQL5.5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[847]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>redis和mongodb比较</title>
		<link>http://www.themysql.com/?p=232</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[原文：<a href="http://antirez.com/post/MongoDB-and-Redis.html">MongoDB and Redis: a different interpretation of what's wrong with Relational DBs</a>
作者：antirez（redis作者）
Working to Redis is a good feeling for me: it's not something about money, or deadlines, or customers not agreeing with me, but about trying to do my 2 cents in order to help the field to go forward. It's a joy to work to things you love, especially if you have the feeling that you don't want to win: even if a few ideas of your work will be useful for another experiment or implementation it is already worth it. It's like science, what matters is to know more, to find better solutions to problems, and so on.

So I check other work on other key value databases, and suggest this databases to people interested in something different than Redis. For instance this MongoDB slides are good and worth a look. MongoDB seems an interesting project to me, and the interesting thing is how Redis and MongoDB try to solve the same problem in theory but with a very different analysis of it.

Both the projects are about there is something wrong if we use an RDBMS for all the kind of works. Not all the problems look like a nail but too much databases look like an hammer, the slide says, and indeed it's a colorful imagine to communicate. But it is remarkable how, in response to the same non-nail problems, this two tools taken different paths.
MongoDB

Before to continue I want to spend some word about how MongoDB works. The idea is to have objects, that are actually a sum of named fields with values. A Mongo DB object looks like this:
Name: Salvatore
Surname: Sanfilippo
Foo: yes
Bar: no
age: 32
That is, actually, very similar to an RDBMS table. Then you can run interesting queries against your object collections:
db.collection.find.({'Name':'John'}) # Finds all Johns
db.collection.find.({$where:'this.age &gt;= 6 &amp;&amp; this.age &lt;= 20'})
You can have indexes in given fields, like in RDBMS, and can sort your queries against some field, order it, get a range using LIMIT, and so on. Basically the data model is the same as an RDBMS, so the MongoDB developers main idea is the following, in my opinion:
What's wrong with RDBMS when used for (many) tasks that don't need all this complexity? They are bloated, thus slow and a pain to replicate, shard, ... But the data model is right, to have tables and index and run complex queries against data.
The Redis path

Redis tries to solve non nail problems too indeed. But in a different way: what Redis provides are data structures much more similar to the data structures you find in a computer science book, liked lists, Sets, and server side operations against this kind of values. Programming with Redis is just like doing everything with Lists and Hashes inside memory with your favorite dynamic programming language, but the dataset is persistent and of course not as fast as accessing directly to your PC's memory (there is a networking layer in the middle).

So what's the Redis point of view?
What's wrong with RDBMS when used for (many) tasks that don't need all this complexity? The data model: non scalable, time complexity hard to predict, and can't model many common problems well enough.
I expect that in a few years what was the real problem with RDBMS is going to be very clear, even if now it can look confusing enough and there are different alternatives and it is very hard to meter the relative value of the different solutions proposed. This kind of changes appear to be very fast, with all the key-value hype growing every week, but actually it's going to take much more time before to start considering RDBMS alternatives as conceptually mature as we look at RDBMS today.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2011-03-17 14:42:14</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
		<category domain="category" nicename="nosql"><![CDATA[NoSQL]]></category>
		<category domain="post_tag" nicename="nosql"><![CDATA[NoSQL]]></category>
		<category domain="post_tag" nicename="redis"><![CDATA[redis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hbase0.94新特性</title>
		<link>http://www.themysql.com/?p=300</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=300</guid>
		<description></description>
		<content:encoded><![CDATA[HBase 0.94 版本最近发布了，距上次的0.92 版本发布又四个月了，下面我们就来看一下这个版本中丰富的功能增强。
英文：

中文：<a href="http://blog.nosqlfan.com/html/3991.html">http://blog.nosqlfan.com/html/3991.html</a>
<h3>性能相关</h3>
<ul>
	<li title="HBASE-5074"><strong>读缓存改进:</strong> HDFS 将图片和checksum存储在不同的block中的，所以每次我们进行读操作，都需要进行两次磁盘操作（一次读数据文件，一次读checksum所在的文件）。在 <a title="HBASE-5074" href="https://issues.apache.org/jira/browse/HBASE-5074">HBASE-5074</a> 这个提案中，提出了将checksum存到block 缓存中的想法。在0.94 版本中，这一特性已经是默认开启的了。这个功能和hfile的新版本有密切的关系。</li>
	<li><strong>读文件优化:
</strong>在<a title="HBase-4465" href="https://issues.apache.org/jira/browse/HBASE-4465" target="_blank">HBASE-4465</a> 这个提案中提出了一个叫Lazy Seek的优化，通过先在最近的StoreFile中先读取数据，再看其它StoreFile是否在这个数据操作时间后有操作，如果没有，就不对这个StoreFile进行读取了。这大大减少了对StoreFile的读操作，这一特性也已经是默认开启了。
<strong>Seek optimizations:</strong> Till now, if there were several StoreFiles for a column family in a region, HBase would seek in each such files and merge the results, even if the row/column we are looking for is in the most recent file. 在0.94 版本之前，如果一个column family对应了多个StoreFile，那么HBase 会从各个StoreFile中读取数据进行合并，即使我们需要的数据在最近的StoreFile中。 <a title="HBase-4465" href="https://issues.apache.org/jira/browse/HBASE-4465" target="_blank">HBASE-4465</a>: “Lazy Seek optimization of StoreFile Scanners” optimizes scanner reads to read the<em> most recent</em> StoreFile first by <em>lazily seeking</em> the StoreFiles. 在<a title="HBase-4465" href="https://issues.apache.org/jira/browse/HBASE-4465" target="_blank">HBASE-4465</a> 这个提案中提出了一个叫Lazy Seek的优化，通过先在最近的StoreFile中先读取数据。This is achieved by introducing a fake keyvalue with its timestamp equal to the maximum timestamp present in the particular StoreFile. 引入一个虚假的keyvalue，该key包含了当前storefile中的最大的时间戳。Thus, a disk seek is avoided until the KeyValueScanner for a StoreFile is bubbled up the heap, implying a need to do a real read operation.  This should provide a significant read performance boost, especially for IncrementColumnValue operations where we care only for latest value. This feature is <em>enabled</em> by default.</li>
</ul>
<ul>
	<li><strong>WAL文件优化: </strong>The current bottleneck to HBase write speed is replicating the WAL appends across different datanodes. We can speed up this process by compressing the HLog. Current plan involves using a dictionary to compress table name, region id, cf name, and possibly other bits of repeated data. Also, HLog format may be changed in other ways to produce a smaller HLog.详细见<a title="HBase-4608" href="https://issues.apache.org/jira/browse/HBASE-4608" target="_blank">HBASE-4608</a>。Adds a custom dictionary-based compression on WAL. <strong>Off by default.</strong> To enable, set hbase.regionserver.wal.enablecompression to true in hbase-site.xml.Note that replication is currently broken when WAL compression is enabled.</li>
</ul>
<h3>新特性</h3>
<ul>
	<li><strong>急求箱工具增强:</strong> 对原来的HBck工具进行了增强，提供了对孤儿region、region空洞、重叠region的修复（两个region的row key之间存在重复的key，通过合并成一个新的region）。新的hbck相比以前的改进主要是以hdfs region目录下的.regioninfo为准，而不是.META.。见提案 <a href="https://issues.apache.org/jira/browse/HBASE-5128" target="_blank">HBASE-5128: “Uber hbck”</a>。
Online automated repair of table integrity and region consistency problemsHBaseFsck (hbck) has been updated with new repair capabilities. hbck is a tool for checking the region consistency and the table integrity invariants of a running HBase cluster. Checking region consistency verifies that .META., region deployment on region servers and the state of data in HDFS (.regioninfo files) all are in accordance. Table integrity checks verify that all possible row keys resolve to exactly one region of a table -- e.g. there are no individual degenerate or backwards regions; no holes between regions; and no overlapping regions. Previously hbck had the ability to diagnose inconsistencies but only had the ability to repair deployment region consistency problems. The updated version now has been augmented with the ability repair region consistency problems in .META. (by patching holes), repair overlapping regions (via merging), patch region holes (by fabricating new regions), and detecting and adopting orphaned regions (by fabricating new .regioninfo file if it is missing in a region's dir).
Caveats:
* The new hbck selects repairs assuming that HDFS as ground truth, the previous version treated .META. as ground truth.
* The hbck '-fix' option is present but deprecated and replaced with '-fixAssignments' option.
* This tool adds APIs in 0.90.7, 0.92.2 and 0.94.0 for clean repairs. The 0.90 version of the tool is compatible with HBase 0.90+, but may require restarting the master or individual individual regionserver for table enable/disable/delete commands to work properly.</li>
	<li><strong>简化Region Size设置:</strong> 通常我们要设置一个region size是很难的，需要考虑很多其它因素。在0.94版本中，按提案 <a title="HBase-4365" href="https://issues.apache.org/jira/browse/HBASE-4365" target="_blank">HBASE-4365</a> 的方法，通过动态算法对region size进行制定。</li>
	<li><strong>更完整的事务支持: </strong>之前Hbase提供行级的事务，不过每次事务只能执行一个写操作，比如连续地执行一系列Put，Delete操作，那么这些操作是单独一个个的事务，其整体并不是原子性执行的。而在0.94版本中，可以实现Put、Delete在同一个事务中一起原子性执行。见提案<a title="HBase-3584" href="https://issues.apache.org/jira/browse/HBASE-3584" target="_blank"> HBASE-3584</a>。</li>
</ul>
实际上上面不过是一些比较大的改进，这一版本共做了140个功能增强，修复了180个bug。<a href="https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+HBASE+AND+fixVersion+%3D+%220.94.0%22+AND+resolution+%3D+Fixed+ORDER+BY+priority+DESC&amp;mode=hide" target="_blank">这里</a>可以看到更详细的更新。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date>2012-05-30 22:13:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>燕羽山美景，品延庆牛肚宴豆腐宴两日腐败活动</title>
		<link>http://www.themysql.com/yanqing</link>
		<pubDate>Wed, 27 Jun 2012 04:57:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?page_id=318</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>[</strong><strong>飞猫队</strong><strong>]6</strong><strong>月</strong><strong>29</strong><strong>日</strong><strong>-7</strong><strong>月</strong><strong>1</strong><strong>日周末</strong><strong>赏燕羽山美景，品延庆牛肚宴豆腐宴</strong><strong>两日腐败活动！</strong><strong> </strong>

领队名称：午后的猫  曾经的阿飞

领队级别：无

联系方式：XXXXXX

起始地点：北京-延庆

活动地点：燕羽山，农家院

集合时间：6月29日 晚 19.20

集合地点：西直门火车站

活动等级：休闲

包车公示：火车出行，到延庆包小面

报名情况：需要人数14人  已报人数7人 已确认7人 剩余名额7人

活动经费：150

活动期限：6月29日-7月1日

活动保险：无，人身安全自负

<strong>活动安排：</strong>

D1：6月29日晚19：:20过时不候），北京北站进站口（西直门火车站），19:40火车出发21:23到达延庆。包小面20分钟到达农家院，安排住宿洗漱休息，住宿建议睡大炕，热闹，去农家院就是为了这些啊，土炕，野菜，新鲜的空气，安静的环境，是吧，不愿意睡通炕的可以要包间。愿意杀人的可以杀一会儿，累了就睡觉。

D2：想爬山的早起爬燕羽山，想睡懒觉的继续睡懒觉，伴随着鸟鸣睡到自然醒。中午吃牛肚宴，下午在农家院的老树下或者山根的大绿草坪上杀人，中间穿插雕西瓜比赛如图，大家在农家院抱着一个西瓜围坐一圈，开始动手随心所欲雕刻，图案刀具自备，胜利者有奖赏呦，奖励品保密！！总看别人发图炫耀，这次可以自己动手啦！！！比赛结束后西瓜大餐，想象一下在农家院西瓜大餐是怎么一个欢乐的场景！！！不用担心吃不完，杀人游戏惩罚措施也有着落了有木有啊！！！晚上吃什么再议，跟着大家当时的心情随时调整，想吃什么吃什么，哈哈。

<a href="http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361754_m.jpg"><img class="alignnone size-medium wp-image-334" title="meishimeike_2002139_361754_m" src="http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361754_m-300x226.jpg" alt="" width="300" height="226" /></a><a href="http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361753_m.jpg"><img class="alignleft size-medium wp-image-333" title="meishimeike_2002139_361753_m" src="http://www.themysql.com/wp-content/uploads/2012/06/meishimeike_2002139_361753_m-300x228.jpg" alt="" width="300" height="228" /></a>

D3：睡到自然醒，杀人，在村里晃悠。中午豆腐宴，吃饱喝足午休回京。

费用：火车10元 小面10元  住宿：20-30元 /人/晚  牛肚宴30元/人  豆腐宴26元/人

活动预算：150元

本次活动为好友集体腐败，自愿参加，大家要为自己负责，哈哈哈。

<strong>项目简介：</strong>

<a name="OLE_LINK7"></a><a name="OLE_LINK6">燕羽山因为艳遇之多，被驴友们成为艳遇山。位于延庆县东南部，西距延庆镇约15公里。为军都山主要山峰之一，海拔1278米。山体呈北东向延伸，东北与十八盘岭、风驼梁一脉相连，西南与八达岭隔川相对，并与三山共同突起于延庆盆地东南侧。阴坡有小片灌木林，东麓山间产杏。附近有中型钼矿。</a>

柳沟“牛肚宴”很好吃，上次吃过一次，感觉很棒。 “牛肚宴”中间一锅牛肚，和想象中的一样大，凸显出其主菜的地位。而配菜、点心之丰富多样，则大大超乎了我的预期。牛肚的味道还真不错，洗的很干净，不牙碜。其他配菜和主食也很农家、很地道。强烈推荐蒸南瓜、凉拌西红柿、凉拌萝卜丝。南瓜又面又甜，萝卜脆甜脆甜，西红柿沙中带甜，非常好吃，和在城里吃到的味道就是不一样。

&nbsp;

<a href="http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69a199cf85.jpg"><img class="alignnone size-full wp-image-320" title="688153_49e69a199cf85" src="http://www.themysql.com/wp-content/uploads/2012/06/688153_49e69a199cf85.jpg" alt="" width="1267" height="950" /></a>

<a href="http://www.themysql.com/wp-content/uploads/2012/06/12578362676778961.jpg"><img class="alignnone size-full wp-image-325" title="12578362676778961" src="http://www.themysql.com/wp-content/uploads/2012/06/12578362676778961.jpg" alt="" width="500" height="703" /></a>

<a href="http://www.themysql.com/wp-content/uploads/2012/06/688153_49e6969c5e436.jpg"><img class="alignnone size-full wp-image-323" title="688153_49e6969c5e436" src="http://www.themysql.com/wp-content/uploads/2012/06/688153_49e6969c5e436.jpg" alt="" width="1126" height="845" /></a>[gallery]

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2012-06-27 12:57:16</wp:post_date>
		<wp:post_date_gmt>2012-06-27 04:57:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yanqing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[311]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Percona 5.1.50安装</title>
		<link>http://www.themysql.com/percona/percona-5-1-50%e5%ae%89%e8%a3%85.html</link>
		<pubDate>Wed, 29 Sep 2010 03:06:14 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[Percona是MySQL Performance Blog的几位作者联手在MySQL基础上打造的一个MySQL版本，其中xtradb是基于innodb plugin，其中主要的更新就是对于SSD方面进行了一些优化，使得在SSD上比MySQL效率会更高一些。

因为Percona从代码底层进行了改动，所以整体而言不同于MySQL5.1.50+Innodb plugin，本来以为都是基于这两个做的，结果就按照MySQL5.1.50+Innodb plugin的配置文件来配置Percona，结果遇到了很多“乱七八糟”的问题。最终的结论就是去掉MySQL5.1.50+Innodb plugin专门添加的选项就ok了。

遇到的问题以及解决方法公布出来（Percona选项的差异性在做进一步调查）：
<div id="_mcePaste">Percona 5.1.50安装方法</div>
<div id="_mcePaste">warning: Percona-Server-client-51-5.1.50-rel11.4.111.rhel5.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID cd2efd2a</div>
<div id="_mcePaste">error: Failed dependencies:</div>
<div id="_mcePaste">libmysqlclient.so.16()(64bit) is needed by Percona-Server-client-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">libmysqlclient.so.16(libmysqlclient_16)(64bit) is needed by Percona-Server-client-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">libmysqlclient_r.so.16()(64bit) is needed by Percona-Server-client-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">libmysqlclient_r.so.16(libmysqlclient_16)(64bit) is needed by Percona-Server-client-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">warning: Percona-Server-server-51-5.1.50-rel11.4.111.rhel5.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID cd2efd2a</div>
<div id="_mcePaste">error: Failed dependencies:</div>
<div id="_mcePaste">libmysqlclient.so.16()(64bit) is needed by Percona-Server-server-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">libmysqlclient.so.16(libmysqlclient_16)(64bit) is needed by Percona-Server-server-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">libmysqlclient_r.so.16()(64bit) is needed by Percona-Server-server-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">libmysqlclient_r.so.16(libmysqlclient_16)(64bit) is needed by Percona-Server-server-51-5.1.50-rel11.4.111.rhel5.x86_64</div>
<div id="_mcePaste">上面这个通过安装Percona-Server-shared-51-5.1.50-rel11.4.111.rhel5.x86_64.rpm得到解决</div>
<div>但是依旧没有启动，查看error</div>
<div id="_mcePaste">100928 11:50:16 [ERROR] Can't open shared library '/usr/lib64/mysql/plugin/ha_innodb_plugin.so' (errno: 0 cannot open shared object file: No such file or directory)</div>
<div id="_mcePaste">100928 11:50:16 [ERROR] Couldn't load plugin named 'innodb' with soname 'ha_innodb_plugin.so'.</div>
<div id="_mcePaste">删除选项：</div>
<div id="_mcePaste">plugin-load=innodb=ha_innodb_plugin.so;innodb_trx=ha_innodb_plugin.so;innodb_locks=ha_innodb_plugin.so;innodb_lock_waits=ha_innodb_plugin.so;innodb_cmp=ha_innodb_plugin.so;inno</div>
<div id="_mcePaste">db_cmp_reset=ha_innodb_plugin.so;innodb_cmpmem=ha_innodb_plugin.so;innodb_cmpmem_reset=ha_innodb_plugin.so</div>
<div id="_mcePaste">100928 11:50:16 [ERROR] /usr/sbin/mysqld: unknown variable 'innodb_file_format=Barracuda'</div>
<div id="_mcePaste">删除选项innodb_file_format=Barracuda</div>
<div id="_mcePaste">100928 11:55:36 [ERROR] /usr/sbin/mysqld: unknown variable 'innodb_strict_mode=1'</div>
<div id="_mcePaste">删除选项innodb_strict_mode=1</div>
<div id="_mcePaste">100929 10:45:52 [ERROR] /usr/sbin/mysqld: unknown variable 'innodb_data_home_dir=/data/ibdata'</div>
<div id="_mcePaste">删除选项ignore_builtin_innodb</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[Percona是MySQL Performance Blog的几位作者联手在MySQL基础上打造的一个MySQL版本，其中xtradb是基于innodb plugin，其中主要的更新就是对于SSD方面进行了一些优化，使得在SSD上比MySQL效率会更高一些。

因为Percona从代码底层进行了改动，所以整体而言不同于MySQL5.1.50+Innodb plugin，本来以为都是基于这两个做的，结果就按照MySQL5.1.50+Innodb plugin的配置文件来配置Percona，结果遇到了很多“乱七八糟”的问题。最终的结论就是去掉MySQL5.1.50+Innodb plugin专门添加的选项就ok了。]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2010-09-29 11:06:14</wp:post_date>
		<wp:post_date_gmt>2010-09-29 03:06:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>percona-5-1-50%e5%ae%89%e8%a3%85</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="percona"><![CDATA[Percona]]></category>
		<category domain="post_tag" nicename="percona-2"><![CDATA[percona]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[percona,percona安装]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2191]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql版本详解</title>
		<link>http://www.themysql.com/mysql/mysql%e7%89%88%e6%9c%ac%e8%af%a6%e8%a7%a3.html</link>
		<pubDate>Wed, 29 Sep 2010 04:01:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[下面这个链接是mysql官方对于mysql开发周期的解释，第一遍没有看懂，第二遍阅读

<a href="http://forge.mysql.com/wiki/Development_Cycle">http://forge.mysql.com/wiki/Development_Cycle</a>

下面是其他人写的一篇关于mysql版本解释的文章，写的还可以，贴在了后面。

<strong>出处：</strong>linuxdiyf<strong>作者：</strong>beasept

首先要作出决策，你是否想要使用最新的开发版本或最终的稳定版本。在MySQL开发过程中，同时存在多个发布系列，每个发布处在成熟度的不同阶段：

MySQL 5.2是最新开发的发布系列，是将执行新功能的系列。不久的将来可以使用Alpha发行，以便感兴趣的用户进行广泛的测试。

MySQL 5.1是当前稳定(产品质量)发布系列。只针对漏洞修复重新发布;没有增加会影响稳定性的新功能。

MySQL 5.0是前一稳定(产品质量)发布系列。只针对严重漏洞修复和安全修复重新发布;没有增加会影响该系列的重要功能。

MySQL 4.0和3.23是旧的稳定(产品质量)发布系列。该版本不再使用，新的发布只用来修复特别严重的漏洞(以前的安全问题)。

我们不认为有完全的冻结版，因为任何版本均需要对漏洞进行修复和其它修复。对于“某种程度的冻结”，我们是指我们可以在产品发布中增加一些不会影响当前工作的小东西。自然，前一系列的相关漏洞修复会移植到后面的系列。

通常, 如果你是第一次开始使用MySQL或想要将它移植到一些还没有二进制分发版的系统上，我们推荐使用最终的稳定版本。目前是MySQL 5.1。我们已经使用MySQL基准对所有MySQL发布进行了检查，包括来自开发系列的发布，在发布前还使用基准套件来测试它。

如果你正在运行一个老的系统并且想要升级，但是又不想冒险进行非无缝升级，应该升级到最新版本中你正使用的相同的发布系列(只有版本号的最后部分比你使用的新)。我们已经试着仅修复致命缺陷，对那个版本进行了很小的相对安全的改动。

如果你想要使用产品发布系列中所没有的新功能，你可以使用开发系列的版本。请注意开发发布不如产品发布稳定。

如果你想要使用包含所有最新补丁和漏洞修复的最新源码，可以使用我们的BitKeeper库。这些库还没有发布，但可以预览代码，将来的发布基于这些代码。

MySQL的命名机制使用由3个数字和一个后缀组成的版本号。例如，像mysql-5.0.9-beta的版本号这样解释：

第1个数字(5)是主版本号，描述了文件格式。所有版本5的发行都有相同的文件格式。

第2个数字(0)是发行级别。主版本号和发行级别组合到一起便构成了发行序列号。

第3个数字(9)是在此发行系列的版本号，随每个新分发版递增。通常你需要已经选择的发行(release)的最新版本(版本)。

每次更新后，版本字符串的最后一个数字递增。如果相对于前一个版本增加了新功能或有微小的不兼容性，字符串的第二个数字递增。如果文件格式改变，第一个数字递增。

后缀显示发行的稳定性级别。通过一系列后缀显示如何改进稳定性。可能的后缀有：

alpha表明发行包含大量未被彻底测试的新代码。已知的缺陷应该在新闻小节被记录。请参见附录D：MySQL变更史。在大多数alpha版本中也有新的命令和扩展。alpha版本也可能有主要代码更改等开发。但我们在发布前一定对其进行测试。

beta意味着该版本功能是完整的，并且所有的新代码被测试了，没有增加重要的新特征，应该没有已知的缺陷。当alpha版本至少一个月没有出现报导的致命漏洞，并且没有计划增加导致已经实施的功能不稳定的新功能时，版本则从alpha版变为beta版。

在以后的beta版、发布版或产品发布中，所有API、外部可视结构和<a href="http://www.chinabyte.com/keyword/SQL%E5%91%BD%E4%BB%A4/" target="_blank">SQL命令</a>列均不再更改。

rc是发布代表;是一个发行了一段时间的beta版本，看起来应该运行正常。只增加了很小的修复。(发布代表即以前所称的gamma 版)

如果没有后缀，这意味着该版本已经在很多地方运行一段时间了，而且没有非平台特定的缺陷报告。只增加了关键漏洞修复修复。这就是我们称为一个产品(稳定)或“通用”版本的东西。

MySQL的命名机制于其它产品稍有不同。一般情况，我们可以很放心地使用已经投放市场两周而没有被相同发布系列的新版本所代替的版本。

MySQL所有版本都经过我们的标准测试和基准测试运行，以保证它们可相当安全地使用。因为标准测试不断扩充以检测以前发现的缺陷，测试套件一直在改进之中。

所有版本都至少已经用下列套件进行了测试：

一个内部测试套件

mysql-test目录包含一整套测试案例。我们针对每个二进制<a href="http://server.chinabyte.com/" target="_blank">服务器</a>进行这些测试。

MySQL基准套件

它运行一定范围的普通查询。它也是一个测试，检测最新的优化处理是否真的使代码更快。

crash-me测试

这尝试决定<a href="http://com.chinabyte.com/%E6%95%B0%E6%8D%AE%E5%BA%93/" target="_blank">数据库</a>支持什么功能和它的能力与限制是什么。

另一个测试是在内部生产环境中使用最新MySQL版本，至少在一台机器上。我们有超过100GB的数据可供使用。]]></content:encoded>
		<excerpt:encoded><![CDATA[alpha表明发行包含大量未被彻底测试的新代码。已知的缺陷应该在新闻小节被记录。请参见附录D：MySQL变更史。在大多数alpha版本中也有新的命令和扩展。alpha版本也可能有主要代码更改等开发。但我们在发布前一定对其进行测试。

beta意味着该版本功能是完整的，并且所有的新代码被测试了，没有增加重要的新特征，应该没有已知的缺陷。当alpha版本至少一个月没有出现报导的致命漏洞，并且没有计划增加导致已经实施的功能不稳定的新功能时，版本则从alpha版变为beta版。

在以后的beta版、发布版或产品发布中，所有API、外部可视结构和SQL命令列均不再更改。

rc是发布代表;是一个发行了一段时间的beta版本，看起来应该运行正常。只增加了很小的修复。(发布代表即以前所称的gamma 版)]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2010-09-29 12:01:08</wp:post_date>
		<wp:post_date_gmt>2010-09-29 04:01:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e7%89%88%e6%9c%ac%e8%af%a6%e8%a7%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%ae%8c%e5%be%85%e7%bb%ad"><![CDATA[未完待续]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[861]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql版本,mysql]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebook的Online Schema Change</title>
		<link>http://www.themysql.com/mysql/facebook%e7%9a%84online-schema-change.html</link>
		<pubDate>Wed, 29 Sep 2010 06:39:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[在下面这个文章中对Facebook的Online schema change做了概要性的描述：

作者: <strong><a href="http://www.dbanotes.net/">Fenng</a></strong> | 可以转载, 但必须以超链接形式标明文章原始出处和作者信息及<a href="http://creativecommons.org/licenses/by/2.5/cn/">版权声明</a>
网址: <a href="http://www.dbanotes.net/opensource/facebook_mysql_online_schema_change.html">http://www.dbanotes.net/opensource/facebook_mysql_online_schema_change.html</a>

Facebook针对Online schema change在下面网址做出了详细的描述：
<a href="http://www.facebook.com/notes/mysql-at-facebook/online-schema-change-for-mysql/430801045932">http://www.facebook.com/notes/mysql-at-facebook/online-schema-change-for-mysql/430801045932</a>

代码可以在下面这个地方下载：
<a href="http://bazaar.launchpad.net/~mysqlatfacebook/mysqlatfacebook/tools/annotate/head:/osc/OnlineSchemaChange.php">http://bazaar.launchpad.net/~mysqlatfacebook/mysqlatfacebook/tools/annotate/head:/osc/OnlineSchemaChange.php</a>

Some ALTER TABLE statements take too long form the perspective of some MySQL users. The <a title="http://dev.mysql.com/doc/innodb-plugin/1.0/en/innodb-create-index.html" rel="nofollow" href="http://dev.mysql.com/doc/innodb-plugin/1.0/en/innodb-create-index.html" target="_blank">fast index create</a> feature for the InnoDB plugin in MySQL 5.1 makes this less of an issue but this can still take minutes to hours for a large table and for some MySQL deployments that is too long.

A workaround is to perform the change on a slave first and then promote the slave to be the new master. But this requires a slave located near the master. MySQL 5.0 added support for triggers and some replication systems have been built using triggers to capture row changes. Why not use triggers for this? The <a title="http://code.google.com/p/openarkkit/" rel="nofollow" href="http://code.google.com/p/openarkkit/" target="_blank">openarkkit</a> toolkit did just that with oak-online-alter-table. We have published our version of an online schema change utility (OnlineSchemaChange.php aka OSC).

当对线上的大表的schema进行的操作，比如说增删数据列时，会对整个表加上排他锁，而阻塞其他的操作，针对这种情况，目前更多的做法是先在slave上对schema进行更改，然后将slave切换成master，这种做法相对比较麻烦，而且需要slave的延时很少。

Facebook针对这种情况推出了Online Schema Change，先将表copy出来，然后进行更改。

看了一半，后面的看的不太懂，打算对这个再深入看下，先保留着。]]></content:encoded>
		<excerpt:encoded><![CDATA[当对线上的大表的schema进行的操作，比如说增删数据列时，会对整个表加上排他锁，而阻塞其他的操作，针对这种情况，目前更多的做法是先在slave上对schema进行更改，然后将slave切换成master，这种做法相对比较麻烦，而且需要slave的延时很少。

Facebook针对这种情况推出了Online Schema Change，先将表copy出来，然后进行更改。]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2010-09-29 14:39:35</wp:post_date>
		<wp:post_date_gmt>2010-09-29 06:39:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>facebook%e7%9a%84online-schema-change</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="online-chema-change"><![CDATA[online chema change]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%ae%8c%e5%be%85%e7%bb%ad"><![CDATA[未完待续]]></category>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1222]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql,online chema change]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL Falcon存储引擎</title>
		<link>http://www.themysql.com/mysql/mysql-falcon%e5%ad%98%e5%82%a8%e5%bc%95%e6%93%8e.html</link>
		<pubDate>Mon, 04 Oct 2010 03:10:46 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[自从InnoBase被Oracle收购之后，MySQL就开始积极的寻求InnoDB存储引擎的替换品。MySQL采取双管齐下的方针，一方面MySQL积极改善其可热插拔的存储引擎体系结构，并大力协助其它产商将其存储产品移植到MySQL，这方面的例子有<a href="http://dev.soliddb.com/en/index.php" target="_blank">SolidDB</a>，<a href="http://www.mysql.com/news-and-events/news/article_1180.html" target="_blank">BrightHouse</a>，<a href="http://www.mysql.com/news-and-events/news/article_1181.html" target="_blank">NitroEDB</a>等；另一方面，MySQL AB公司也在开发一个新的事务型存储引擎，这就是由Jim Starkey主持的Falcon项目。JimStarkey是InterBase项目的发起人，在数据库实现领域也有些名气，是将多版本并发控制技术应用于数据库产品的第一人，也是BLOB数据类型的创始人。

Falcon存储引擎的开发工作已经开展了约一年时间（单指MySQL AB公司收购<a href="http://en.wikipedia.org/wiki/Netfrastructure" target="_blank">Netfrastructure</a>后的开发时间，实际上Falcon是基于Netfrastrucure公司的产品开发的，而该产品在市场上已经应用好几年了），目前已经到达了Alpha阶段。Falcon目前还只在一个MySQL5.1的分支版本上开发，因此从官方网站上下载的5.1版本（目前为5.1.14）中尚不包含Falcon，但近日在MySQL5.1的手册中已经悄悄加入了Falcon存储引擎相关内容，相信在不远的将来Falcon将会与广大用户见面。

Falcon是面向多CPU、拥有大量内存的当代硬件环境和典型Web应用的数据库操作特点而开发的，主要功能包括多版本并发控制、完善的ACID支持、支持前缀压缩的B+树索引、数据页压缩（在磁盘上以压缩形式存储，在内存中以非压缩形式存储）、成组提交等。从功能方面来说没有什么新鲜事，大体也就实现了一个事务型存储引擎必须要有的功能（很多高级的功能如多表空间、分区等都还没有），但其架构上却有很多独特之处。据我所知，Falcon的基本架构与所有知名数据库产品（至少包括SQLServer、DB2、Oracle、InnoDB、PostgreSQL）都大不相同，而且这一架构的特点可能非常适用于很多Web应用尤其中Web2.0应用。

首先，Falcon与其它数据库的存储系统有着完全不同的数据缓存机制。一般的数据库采用的都是页面缓存，但在Falcon中，页面缓存被降到相对次要的位置，更多的数据被缓存在记录缓存中，即缓存的粒度是一个记录而不是记录所在的数据页。同时，记录缓存的替换策略也改用更先进的多代回收机制（估计类似于Java中的多代垃圾回收）而非传统的LRU算法。对于数据访问缺乏集中性（即一个表中所有记录被访问的概率都相同）的应用，这一策略并不会有很好的效果。但对于很多Web应用，数据访问的扭曲性非常明显，如Blog应用中一般只有少量热门Blogger的文章被频繁访问，其它用户的访问则很少会被访问不，同时对所有用户来说，一般新文章和少量热门访问被访问的概率都远大于其余文章。在这一情况下，Falcon中的记录缓存策略就可以保证内存只用来缓存真正需要的记录，而不会像页面缓存那样由于缓存了属于同一页但从来不会被访问的记录而浪费了大量的内在，从而提高内存的利用率。通过记录缓存和页面缓存，Falcon实际上成为了基于磁盘存储的数据库和内存数据库和结合体。

其次，Falcon的多版本实现也很有特点。Falcon的原则是内存中的多版本、外存中的单一版本。即未提交版本只保存在内存中（这不是绝对的，当超大更新事务出现时未提交版本也会被暂时写出到一个特殊的文件中，类似于操作系统中的swap），而在事务提交后才通过一个特殊的线程（称为gopher线程）将新数据更新到外存的数据页中。对索引更新的处理方式也很独特，每个事务对某个索引的所有更新在事务提交之间都会被缓存在一个内存的小索引中，只有在事务提交之后才会被合并到索引的主体中。对于小型事务（一般Web应用产生的事务都很小），这一策略有望大大减少多版本带来的时间和空间开销。

附注:
Falcon目前还存在很多限制（有些可能是永久的），主要是不支持可串行化隔离级别和不支持分布式事务。

在Falcon努力要成为MySQL存储引擎明日之星之际，它的创造者Jim Starkey（真正的创始者，因为Falcon的大部分代码都是Jim写的）却<a href="http://www.theopenforce.com/2008/06/falcon-and-jim.html" target="_blank">决定要离开MySQL公司</a>，自己去干点更有意思的活了。他的继任者Ann Harrison是个女强人（Ann是Jim的老婆，Jim是的白胡子老头）。没有了精神领袖，不知道Falcon的路会不会难走一些，不过Jim很有信心说Falcon一定会大成功的。

一直期待吧，可能Ann更适合领导团队，Jim更适合自己埋头干活呢。

MySQL数据库目前主要的数据库引擎是innodb，但是由于开发innodb的公司innobase Inc已经被Oracle公司收购，因此MySQL公司在三年前启动了新的数据库引擎开发计划，而这个MySQL寄予厚望的数据库引擎就是Falcon。

经过两年半的开发，Falcon数据库引擎现在已经是beta版本了，但是目前的falcon还不是很稳定，在性能测试过程当中经常会出现crash的现象。然而falcon遭受的最大打击还是项目领导人的离去。

Falcon的项目领导人和主架构师Jim Starkey最近宣布从MySQL公司辞职，他将去一家创业公司NimbusDB担任CEO职位。Nimbus公司将设计和开发运行在云计算上面的关系/语义数据库，打破目前已经应用了30 多年的基于磁盘的数据库技术。Nimbus的云计算数据库NimbusDB将被设计为能够通过简单的增加更多的服务器来无限扩展数据库的运算能力，并且支持软件的在线升级，软件和硬件的容错性。

由于Falcon数据库引擎一直进展缓慢，现在又失去了项目领导人，因此Falcon的前景非常看淡。当然也许由于Falcon的失败说不定会催生具有革命意义的NimbusDB，也不失为一件好事。]]></content:encoded>
		<excerpt:encoded><![CDATA[自从InnoBase被Oracle收购之后，MySQL就开始积极的寻求InnoDB存储引擎的替换品。MySQL采取双管齐下的方针，一方面MySQL积极改善其可热插拔的存储引擎体系结构，并大力协助其它产商将其存储产品移植到MySQL，这方面的例子有SolidDB，BrightHouse，NitroEDB等；另一方面，MySQL AB公司也在开发一个新的事务型存储引擎，这就是由Jim Starkey主持的Falcon项目。JimStarkey是InterBase项目的发起人，在数据库实现领域也有些名气，是将多版本并发控制技术应用于数据库产品的第一人，也是BLOB数据类型的创始人。]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date>2010-10-04 11:10:46</wp:post_date>
		<wp:post_date_gmt>2010-10-04 03:10:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-falcon%e5%ad%98%e5%82%a8%e5%bc%95%e6%93%8e</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="falcon"><![CDATA[falcon]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[855]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>测试快速关闭innodb的方法</title>
		<link>http://www.themysql.com/mysql/%e6%b5%8b%e8%af%95%e5%bf%ab%e9%80%9f%e5%85%b3%e9%97%adinnodb%e7%9a%84%e6%96%b9%e6%b3%95.html</link>
		<pubDate>Wed, 06 Oct 2010 03:32:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>
<div>文章转自：http://dbahacker.com/</div>
<div>作者：杨德华</div>
<div><strong>Google docs 查看地址</strong> <a href="http://docs.google.com/Doc?docid=0AR0iV03BDag2ZGRyMjI5cjdfODAxZnd6ejZ2Z3c&amp;hl=en" target="_blank">http://docs.google.com/Doc?docid=0AR0iV03BDag2ZGRyMjI5cjdfODAxZnd6ejZ2Z3c&amp;hl=en</a></div>
<div><strong>pdf下载地址</strong> <a href="http://dbahacker.com/wp-content/uploads/2010/06/mysqlporformanceblog_innodb_-1.pdf">_mysqlporformanceblog_innodb_ (1)</a></div>
<div>测试mysqlporformanceblog提供的减少关闭innodb时间的方法</div>
<div>经常发现一些MySQL镜像库的InnoDB的关闭时间会特别久，mysqlperformanceblog给出了一个不错的解决方案</div>
<div><strong>How to decrease InnoDB shutdown times </strong><a id="ggx8" title="http://www.mysqlperformanceblog.com/2009/04/15/how-to-decrease-innodb-shutdown-times/" href="http://www.mysqlperformanceblog.com/2009/04/15/how-to-decrease-innodb-shutdown-times/">http://www.mysqlperformanceblog.com/2009/04/15/how-to-decrease-innodb-shutdown-times/</a></div>
<div>

<strong>InnoDB关闭的过程解释</strong>MySQL官方手册介绍 影响到InnoDB关闭的参数有

innodb_fast_shutdown

如果你把这个参数设置为0，InnoDB在关闭之前做一个完全净化和一个插入缓冲合并。这些操作要花几分钟时间，在极端情况下要几个小时。

如果你设置这个参数为1，InnoDB在关闭之时跳过这些操作。 默认值为1。

如果你设置这个值为2 (在Netware无此值)， InnoDB将刷新它的日志然后冷关机，仿佛MySQL崩溃一样。已提交的事务不会被丢失，但在下一次启动之时会做一个崩溃恢复。

innodb_max_dirty_pages_pct

这是一个范围从0到100的整数。默认是90。InnoDB中的主线程试着从缓冲池写页面，使得脏页（没有被写的页面）的百分比不超过这个值。如果你有SUPER权限，这个百分比可以在服务器运行时按下面来改变：

SET GLOBAL innodb_max_dirty_pages_pct = <em>value</em>;
<div>100423  0:10:18  InnoDB: Starting shutdown…</div>
<div>100423  0:10:20  InnoDB: Shutdown completed; log sequence number 0 4000976145</div>
<div>100423  0:10:20 [Note] /usr/sbin/mysqld: Shutdown complete</div>
<h3>测试环境</h3>
<div>1.在一个镜像库节点进行测试,innodb_buffer_pool_size=1G</div>
<div>2.在一个线上节点进行测试,碰巧这个节点要进行机架更换,所以可以趁机测试一把</div>
innodb_buffer_pool_size=12G,线上环境和镜像环境还是有点不一样,没法让Innodb_buffer_pool_pages_dirty的值少于1000，虽然是大于1000，但关闭起来还是比较快速的
<div><strong>测试过程</strong>
<strong>正常关闭的normal-shutdown.sh</strong>
<div>
<div>#!/bin/bash</div>
<div>#正常关闭innodb</div>
<div>log=”normal-shutdown.log”</div>
<div>start_time=`date`</div>
<div>echo “start time:”$start_time &gt; $log</div>
<div>mysqladmin –defaults-file=db-32-1.cnf -uxxx -pxxx  ext  | grep dirty &gt;&gt; $log</div>
<div>mysqladmin –defaults-file=db-32-1.cnf -uxxx -pxxx shutdown</div>
<div>end_time=`date`</div>
<div>echo “end time:” $end_time &gt;&gt; $log</div>
normal-shutdown.log 输出的日志如下

</div>
<div>start time:2010年 06月 18日 星期五 17:21:00 CST</div>
<div>| Innodb_buffer_pool_pages_dirty    | 43492        |</div>
<div>end time: 2010年 06月 18日 星期五 17:23:10 CST</div>
<strong>设置</strong><strong>set global innodb_max_dirty_pages_pct =0的关闭方式</strong>
<div>首先执行 mysql –defaults-file=db-31-2.cnf -uxxx -pxxx -e” set global innodb_max_dirty_pages_pct =0“
经过了大概3分钟后 Innodb_buffer_pool_pages_dirty的值少于1000</div>
<div>然后执行faster-shutdown.sh，生成faster-shutdown.log</div>
<div>#!/bin/bash</div>
<div>log=”faster-shutdown.log”</div>
<div>start_time=`date`</div>
<div>echo “faster shutdown start time:”$start_time &gt;$log</div>
<div>mysqladmin –defaults-file=db-32-1.cnf -uxxx -pxxx  ext  | grep dirty &gt;&gt; $log</div>
<div>mysqladmin –defaults-file=db-32-1.cnf -uxxx -pxxx shutdown</div>
<div>end_time=`date`</div>
<div>echo “faster shutdown end time:” $end_time &gt;&gt;$log</div>
<div>faster-shutdown.log的内容</div>
<div>faster shutdown start time:2010年 06月 18日 星期五 17:47:08 CST</div>
<div>| Innodb_buffer_pool_pages_dirty    | 569        |</div>
<div>faster shutdown end time: 2010年 06月 18日 星期五 17:47:12 CST</div>
<div></div>
<div>Innodb_buffer_pool_pages_dirty</div>
<div>The number of pages currently dirty. Added in MySQL 5.0.2.These are pages that have been modified in memory, but not on disk.</div>
<strong>关闭时间比较</strong>
<table id="e605" border="1" cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="33.333333333333336%"></td>
<td width="33.333333333333336%">正常关闭</td>
<td width="33.333333333333336%">快速关闭</td>
</tr>
<tr>
<td width="33.333333333333336%">Innodb_buffer_pool_pages_dirty</td>
<td width="33.333333333333336%">43492</td>
<td width="33.333333333333336%">569</td>
</tr>
<tr>
<td width="33.333333333333336%">关闭时间</td>
<td width="33.333333333333336%">2分10秒</td>
<td width="33.333333333333336%">4秒</td>
</tr>
</tbody>
</table>
<h3>结论</h3>
<div>日常维护中,可以使用set global innodb_max_dirty_pages_pct =0,让Innodb_buffer_pool_pages_dirty 的数值为一个较小的值,这样就可以减少在关闭mysql服务器中耗费在innodb的时间</div>
<div>最终达到减少影响用户的时间</div>
<div>参考资料</div>
<strong>InnoDB启动 </strong><a href="http://dev.mysql.com/doc/refman/5.1/zh/storage-engines.html#innodb-start"><strong>http://dev.mysql.com/doc/refman/5.1/zh/storage-engines.html#innodb-start</strong></a>
<strong>
</strong>
<div><strong>How to decrease InnoDB shutdown times </strong><a id="kp-." title="http://www.mysqlperformanceblog.com/2009/04/15/how-to-decrease-innodb-shutdown-times/" href="http://www.mysqlperformanceblog.com/2009/04/15/how-to-decrease-innodb-shutdown-times/">http://www.mysqlperformanceblog.com/2009/04/15/how-to-decrease-innodb-shutdown-times/</a></div>
<strong>Dirty pages, fast shutdown, and write combining </strong><a href="http://www.xaprb.com/blog/2010/05/25/dirty-pages-fast-shutdown-and-write-combining/">http://www.xaprb.com/blog/2010/05/25/dirty-pages-fast-shutdown-and-write-combining/</a>

附上mysqladmin的几个选项已经命令

<code>password             <em><code>"new-password"</code></em></code>

<em>将当前用户的密码改为new-password，建议new-password使用""引起来。</em>

<code>extended-status</code>

Display the server status variables and their values.显示global status的信息，mysqladmin可以使用缩写，因此可以看到作者使用了缩写ext

<a href="http://dev.mysql.com/doc/refman/5.1/en/mysqladmin.html#option_mysqladmin_sleep"><code>--sleep=<em><code>delay</code></em></code></a>,             <code>-i <em><code>delay</code></em></code>

Execute commands repeatedly, sleeping for             <em><code>delay</code></em> seconds in between. The             <a href="http://dev.mysql.com/doc/refman/5.1/en/mysqladmin.html#option_mysqladmin_count"><code>--count</code></a> option determines             the number of iterations. If             <a href="http://dev.mysql.com/doc/refman/5.1/en/mysqladmin.html#option_mysqladmin_count"><code>--count</code></a> is not given,             <a title="4.5.2. mysqladmin — Client for Administering a MySQL Server" href="http://dev.mysql.com/doc/refman/5.1/en/mysqladmin.html"><strong>mysqladmin</strong></a> executes commands indefinitely             until interrupted.

<a href="http://dev.mysql.com/doc/refman/5.1/en/mysqladmin.html#option_mysqladmin_compress"></a><a href="http://dev.mysql.com/doc/refman/5.1/en/mysqladmin.html#option_mysqladmin_count"><code>--count=<em><code>N</code></em></code></a>,             <code>-c <em><code>N</code></em></code>

The number of iterations to make for repeated command             execution if the <a href="http://dev.mysql.com/doc/refman/5.1/en/mysqladmin.html#option_mysqladmin_sleep"><code>--sleep</code></a> option is given.

疑问：通过SET GLOBAL innodb_max_dirty_pages_pct = <em>0对于性能有什么影响，是否有实际价值
</em>

</div>
</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[通过SET GLOBAL innodb_max_dirty_pages_pct = 0，可以显著的减少MySQL关闭的时间。]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2010-10-06 11:32:57</wp:post_date>
		<wp:post_date_gmt>2010-10-06 03:32:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b5%8b%e8%af%95%e5%bf%ab%e9%80%9f%e5%85%b3%e9%97%adinnodb%e7%9a%84%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysql%e9%80%89%e9%a1%b9"><![CDATA[MySQL选项]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%ae%8c%e5%be%85%e7%bb%ad"><![CDATA[未完待续]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[MySQL选项,MySQL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1043]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[转]windows下查看80端口占用情况，适用于查看任何端口</title>
		<link>http://www.themysql.com/%e6%9c%aa%e5%88%86%e7%b1%bb/%e8%bd%acwindows%e4%b8%8b%e6%9f%a5%e7%9c%8b80%e7%ab%af%e5%8f%a3%e5%8d%a0%e7%94%a8%e6%83%85%e5%86%b5%ef%bc%8c%e9%80%82%e7%94%a8%e4%ba%8e%e6%9f%a5%e7%9c%8b%e4%bb%bb%e4%bd%95%e7%ab%af%e5%8f%a3.html</link>
		<pubDate>Mon, 11 Oct 2010 13:34:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[重做系统后，配置AMP环境。启动apache提示80端口busy被占用。于是查看一看80端口占用情况。

开始–运行–cmd 进入命令提示符 输入netstat -ano 即可看到所有连接的PID 之后在任务管理器中找到这个PID所对应的程序如果任务管理器中没有PID这一项,可以在任务管理器中选”查看”-”选择列”

经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，很多人都比较头疼，下面就介绍一种非常简单的方法，希望对大家有用。

我们需要确定谁占用了我们的80端口

在windows命令行窗口下执行：
C:\&gt;netstat -aon|findstr “80″
TCP    0.0.0.0:19780             0.0.0.0:0                    LISTENING         2044
TCP    10.72.224.5:2558       96.17.109.8:80          ESTABLISHED     2044
TCP    10.72.224.5:2757       60.210.176.209:80    TIME_WAIT         0
TCP    10.72.224.5:3956       125.46.1.234:80        ESTABLISHED     2044
TCP    10.72.224.5:3959       125.46.1.234:80        ESTABLISHED     2044
UDP    0.0.0.0:2280               *:*                                                       3700

看到了吗，端口被进程号为2044的进程占用，继续执行下面命令：
C:\&gt;tasklist|findstr “2044″
avp.exe                     2044 Console                 0     37,680 K
很清楚吧，avp 卡巴监听80端口，调整卡巴网络监听设置。
当然，如果你的80端口被其他程序占用，kill掉或者调整端口。]]></content:encoded>
		<excerpt:encoded><![CDATA[C:\>netstat -aon|findstr “80″
C:\>tasklist|findstr “2044″]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2010-10-11 21:34:34</wp:post_date>
		<wp:post_date_gmt>2010-10-11 13:34:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bd%acwindows%e4%b8%8b%e6%9f%a5%e7%9c%8b80%e7%ab%af%e5%8f%a3%e5%8d%a0%e7%94%a8%e6%83%85%e5%86%b5%ef%bc%8c%e9%80%82%e7%94%a8%e4%ba%8e%e6%9f%a5%e7%9c%8b%e4%bb%bb%e4%bd%95%e7%ab%af%e5%8f%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[656]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql小技巧</title>
		<link>http://www.themysql.com/%e6%9c%aa%e5%88%86%e7%b1%bb/mysql%e5%b0%8f%e6%8a%80%e5%b7%a7.html</link>
		<pubDate>Mon, 11 Oct 2010 17:37:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[假设我们有关系marks(student_id,score),我们希望基于如下标准为学生评定分数等级：score&lt;40 得F；40&lt;=score&lt;60 得C；
60&lt;=score&lt;80 得B;80&lt;=score 得A 。写出下列查询操作：
a.基于marks关系显示每个学生的分数等级
b.找出各分数等级的学生数

select *,elt(Interval(score,0,40,60,80),'F','C','B','A')  From marks

select elt(Interval(score,0,40,60,80),'F','C','B','A') ,count(*) from marks group by  Elt(interval(score,0,40,60,80),'F','C','B','A')

<a href="http://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_interval"><code>INTERVAL(<em><code>N</code></em>,<em><code>N1</code></em>,<em><code>N2</code></em>,<em><code>N3</code></em>,...)</code></a>

Returns <code>0</code> if <em><code>N</code></em> &lt; <em><code>N1</code></em>, <code>1</code> if <em><code>N</code></em> &lt; <em><code>N2</code></em> and so on or <code>-1</code> if <em><code>N</code></em> is <code>NULL</code>. All arguments are treated as integers. It is required that <em><code>N1</code></em> &lt; <em><code>N2</code></em> &lt; <em><code>N3</code></em> &lt; <code>...</code> &lt; <em><code>Nn</code></em> for this function to work correctly. This is because a binary search is used (very fast).
<pre>mysql&gt; <strong><code>SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);</code></strong>
        -&gt; 3
mysql&gt; <strong><code>SELECT INTERVAL(10, 1, 10, 100, 1000);</code></strong>
        -&gt; 2
mysql&gt; <strong><code>SELECT INTERVAL(22, 23, 30, 44, 200);</code></strong>
        -&gt; 0</pre>
<pre><a name="id3203707"></a><a href="http://dev.mysql.com/doc/refman/5.5/en/string-functions.html#function_elt"><code>ELT(<em><code>N</code></em>,<em><code>str1</code></em>,<em><code>str2</code></em>,<em><code>str3</code></em>,...)</code></a>

Returns <em><code>str1</code></em> if <em><code>N</code></em> = <code>1</code>, <em><code>str2</code></em> if <em><code>N</code></em> = <code>2</code>, and so on. Returns <code>NULL</code> if <em><code>N</code></em> is less than <code>1</code> or greater than the number of arguments. <a href="http://dev.mysql.com/doc/refman/5.5/en/string-functions.html#function_elt"><code>ELT()</code></a> is the complement of <a href="http://dev.mysql.com/doc/refman/5.5/en/string-functions.html#function_field"><code>FIELD()</code></a>.
<pre>mysql&gt; <strong><code>SELECT ELT(1, 'ej', 'Heja', 'hej', 'foo');</code></strong>
        -&gt; 'ej'
mysql&gt; <strong><code>SELECT ELT(4, 'ej', 'Heja', 'hej', 'foo');</code></strong>
        -&gt; 'foo'</pre>
</pre>
<pre>例如 set t="11,4,19,32" 如何能得到t=4的结果啊，或者得到","这个字符在t里出现的次数也行。</pre>
<pre>SELECT LENGTH(T)-LENGTH(REPLACE(T,',',''))+1</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2010-10-12 01:37:07</wp:post_date>
		<wp:post_date_gmt>2010-10-11 17:37:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e5%b0%8f%e6%8a%80%e5%b7%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mysql调优中两个重要参数table_cache和key_buffer_size</title>
		<link>http://www.themysql.com/mysql/mysql%e8%b0%83%e4%bc%98%e4%b8%ad%e4%b8%a4%e4%b8%aa%e9%87%8d%e8%a6%81%e5%8f%82%e6%95%b0table_cache%e5%92%8ckey_buffer_size.html</link>
		<pubDate>Tue, 12 Oct 2010 14:46:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div id="_mcePaste">题记：</div>
<div id="_mcePaste">本文根据我自己的一点经验，讨论了Mysql服务器优化中两个非常重要的参数，分别是table_cache，key_buffer_size。</div>
<div id="_mcePaste">table_cache指示表高速缓存的大小。当Mysql访问一个表时，如果在Mysql表缓冲区中还有空间，那么这个表就被打开并放入表缓冲区，这样做的好处是可以更快速地访问表中的内容。一般来说，可以通过查看数据库运行峰值时间的状态值Open_tables和Opened_tables，用以判断是否需要增加table_cache的值，即如果open_tables接近table_cache的时候，并且Opened_tables这个值在逐步增加，那就要考虑增加这个值的大小了。</div>
<div id="_mcePaste">在mysql默认安装情况下，table_cache的值在2G内存以下的机器中的值默认时256到512，如果机器有4G内存,则默认这个值是2048，但这决意味着机器内存越大，这个值应该越大，因为table_cache加大后，使得mysql对SQL响应的速度更快了，不可避免的会产生更多的死锁（dead lock），这样反而使得数据库整个一套操作慢了下来，严重影响性能。所以平时维护中还是要根据库的实际情况去作出判断，找到最适合你维护的库的table_cache值，有人说：“性能优化是一门艺术”，这话一点没错。大凡艺术品，大都是经过千锤百炼，精雕细琢而成。</div>
<div id="_mcePaste">这里还要说明一个问题，就是table_cache加大后碰到文件描述符不够用的问题，在mysql的配置文件中有这么一段提示</div>
<div id="_mcePaste">Quotation</div>
<div id="_mcePaste">“The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.</div>
<div id="_mcePaste">Therefore you have to make sure to set the amount of open files allowed to at least 4096 in the variable "open-files-limit" in” section [mysqld_safe]”</div>
<div id="_mcePaste">说的就是要注意这个问题，一想到这里，部分兄弟可能会用ulimit -n 作出调整，但是这个调整实际是不对的，换个终端后，这个值又会回到原始值，所以最好用sysctl或者修改/etc/sysctl.conf文件，同时还要在配置文件中把open_files_limit这个参数增大，对于4G内存服务器，相信现在购买的服务器都差不多用4G的了，那这个这个open_files_limit至少要增大到4096，如果没有什么特殊情况，设置成8192就可以了。</div>
<div id="_mcePaste">下面说说key_buffer_size这个参数，key_buffer_sizeO表示索引缓冲区的大小，严格说是它决定了数据库索引处理的速度，尤其是索引读的速度。根据网络一些高手写的文章表示可以检查状态值Key_read_requests和Key_reads，即可知道key_buffer_size设置是否合理。比例key_reads / key_read_requests应该尽可能的低，至少是1:100，1:1000更好，虽然我还没有找到理论的依据，但是，我在自己维护的几台实际运行良好的库做过的测试后表明，这个比值接近1：20000，这从结果证明了他们说这话的正确性，我们不妨用之。</div>
<div id="_mcePaste">后记：</div>
<div id="_mcePaste">我前面说过，性能优化是一件细活，影响mysql性能的因素很多，本文中只是选取了其中我认为比较重要的两个参数，期待和网友一起探讨更多mysql性能优化的技术。</div>
</div>
<div>题记：     本文根据我自己的一点经验，讨论了Mysql服务器优化中两个非常重要的参数，分别是table_cache，key_buffer_size。
table_cache指示表高速缓存的大小。当Mysql访问一个表时，如果在Mysql表缓冲区中还有空间，那么这个表就被打开并放入表缓冲区，这样做的好处是可以更快速地访问表中的内容。一般来说，可以通过查看数据库运行峰值时间的状态值Open_tables和Opened_tables，用以判断是否需要增加table_cache的值，即如果open_tables接近table_cache的时候，并且Opened_tables这个值在逐步增加，那就要考虑增加这个值的大小了。
在mysql默认安装情况下，table_cache的值在2G内存以下的机器中的值默认时256到512，如果机器有4G内存,则默认这个值是2048，但这决意味着机器内存越大，这个值应该越大，因为table_cache加大后，使得mysql对SQL响应的速度更快了，不可避免的会产生更多的死锁（dead lock），这样反而使得数据库整个一套操作慢了下来，严重影响性能。所以平时维护中还是要根据库的实际情况去作出判断，找到最适合你维护的库的table_cache值，有人说：“性能优化是一门艺术”，这话一点没错。大凡艺术品，大都是经过千锤百炼，精雕细琢而成。
这里还要说明一个问题，就是table_cache加大后碰到文件描述符不够用的问题，在mysql的配置文件中有这么一段提示Quotation“The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.Therefore you have to make sure to set the amount of open files allowed to at least 4096 in the variable "open-files-limit" in” section [mysqld_safe]”说的就是要注意这个问题，一想到这里，部分兄弟可能会用ulimit -n 作出调整，但是这个调整实际是不对的，换个终端后，这个值又会回到原始值，所以最好用sysctl或者修改/etc/sysctl.conf文件，同时还要在配置文件中把open_files_limit这个参数增大，对于4G内存服务器，相信现在购买的服务器都差不多用4G的了，那这个这个open_files_limit至少要增大到4096，如果没有什么特殊情况，设置成8192就可以了。

下面说说key_buffer_size这个参数，key_buffer_sizeO表示索引缓冲区的大小，严格说是它决定了数据库索引处理的速度，尤其是索引读的速度。根据网络一些高手写的文章表示可以检查状态值Key_read_requests和Key_reads，即可知道key_buffer_size设置是否合理。比例key_reads / key_read_requests应该尽可能的低，至少是1:100，1:1000更好，虽然我还没有找到理论的依据，但是，我在自己维护的几台实际运行良好的库做过的测试后表明，这个比值接近1：20000，这从结果证明了他们说这话的正确性，我们不妨用之。
后记：   我前面说过，性能优化是一件细活，影响mysql性能的因素很多，本文中只是选取了其中我认为比较重要的两个参数，期待和网友一起探讨更多mysql性能优化的技术。

<span style="font-family: Arial, 'Liberation Sans', 'DejaVu Sans', sans-serif; line-height: 18px; border-collapse: collapse; font-size: 14px;">
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; font-size: 14px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; clear: both; word-wrap: break-word; background-position: initial initial; background-repeat: initial initial; padding: 0px; border: 0px initial initial;"><code style="padding-top: 1px; padding-right: 5px; padding-bottom: 1px; padding-left: 5px; font-size: 14px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #eeeeee; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; background-position: initial initial; background-repeat: initial initial; margin: 0px; border: 0px initial initial;">innodb_buffer_pool_size</code> is the setting that controls the size of the memory buffer that InnoDB uses to cache indexes <em style="font-size: 14px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; font-style: italic; background-position: initial initial; background-repeat: initial initial; padding: 0px; margin: 0px; border: 0px initial initial;">and</em> data. It's an important performance option.</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; font-size: 14px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; clear: both; word-wrap: break-word; background-position: initial initial; background-repeat: initial initial; padding: 0px; border: 0px initial initial;">See the <a style="font-size: 14px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; color: #0077cc; text-decoration: none; cursor: pointer; background-position: initial initial; background-repeat: initial initial; padding: 0px; margin: 0px; border: 0px initial initial;" rel="nofollow" href="http://dev.mysql.com/doc/refman/5.0/en/innodb-parameters.html#sysvar%5Finnodb%5Fbuffer%5Fpool%5Fsize">manual page</a> for the full explanation. The <a style="font-size: 14px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; color: #0077cc; text-decoration: none; cursor: pointer; background-position: initial initial; background-repeat: initial initial; padding: 0px; margin: 0px; border: 0px initial initial;" rel="nofollow" href="http://www.mysqlperformanceblog.com/2007/11/03/choosing-innodb_buffer_pool_size/">MySQL Performance Blog</a> also has an article about how to choose a proper size for it.</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; font-size: 14px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; clear: both; word-wrap: break-word; background-position: initial initial; background-repeat: initial initial; padding: 0px; border: 0px initial initial;">key_buffer_size主要用于myisam引擎，innodb引擎不用设置该选项。</p>

</span>

</div>
<div>转自：<a href="http://www.askwan.com/post/4/">http://www.askwan.com/post/4/</a></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[本文根据我自己的一点经验，讨论了Mysql服务器优化中两个非常重要的参数，分别是table_cache，key_buffer_size。
table_cache指示表高速缓存的大小。当Mysql访问一个表时，如果在Mysql表缓冲区中还有空间，那么这个表就被打开并放入表缓冲区，这样做的好处是可以更快速地访问表中的内容。一般来说，可以通过查看数据库运行峰值时间的状态值Open_tables和Opened_tables，用以判断是否需要增加table_cache的值，即如果open_tables接近table_cache的时候，并且Opened_tables这个值在逐步增加，那就要考虑增加这个值的大小了。]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2010-10-12 22:46:53</wp:post_date>
		<wp:post_date_gmt>2010-10-12 14:46:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e8%b0%83%e4%bc%98%e4%b8%ad%e4%b8%a4%e4%b8%aa%e9%87%8d%e8%a6%81%e5%8f%82%e6%95%b0table_cache%e5%92%8ckey_buffer_size</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[877]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python中的函数重载（by qshpeng)</title>
		<link>http://www.themysql.com/python/python%e4%b8%ad%e7%9a%84%e5%87%bd%e6%95%b0%e9%87%8d%e8%bd%bd%ef%bc%88by-qshpeng.html</link>
		<pubDate>Fri, 15 Oct 2010 03:48:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[如果你习惯用C＋＋，JAVA或者其它的面向对象语言，你会经常用到函数重载。

所谓函数的重载是指多个函数的名称以及返回值类型均相同，仅参数类型或参数个数不同。函数重载大大提高了代码重用率和程序员开发效率。
但如果你现在转向使用python，你就有可能不习惯它的形式上不支持函数重载。但python作为面向对象语言，自然不会丢掉函数重载这个面向对象语言所共有的重要特性。

python中实现函数重载的方法非常特别而有趣。先看下面的一个函数定义：
def f(str,times):
print str*times
上面函数是指对字符串str打印times次，可能你很多情况只需对str打印，此时每次都对times赋值1就显得很繁琐，我们希望没有指定times的值就只打印一次。在C＋＋中你可以用函数重载这样实现：
void f(string str){<code><span style="color: maroon;">cout</span> &lt;&lt; str &lt;&lt; endl</code>;}
void f(string str,int times)
{int i=0;
for (i =0;i&lt;times;i++)
<code><span style="color: maroon;">cout</span> &lt;&lt; str&lt;&lt; endl;</code>
}
打印一次就调用f(str),打印多次就调用f(str,times),现在用python实现：
f(str,times=1)
print str*times
打印一次就调用f(str),打印多次就调用f(str,times)，调用方法一样。
从形式上先，与C＋＋相比，代码省了很多，但功能是一样的。times=1表示参数没有指定时，默认情况下的值为1

默认值就是python用来实现函数重载的重要方法。
当一个函数既有默认值参数，又有其它参数时，定义时必须把有默认值的参数放在参数列表的后面部分。
如果一个函数具有多个参数，调用时想指定其中的几个。这你就需要按形参顺序对其赋值，在想指定值的那些参数中的其它参数如果具有默认值，此时也必须把默认值填上。如：
f(str1,str2,times1=1,times2=1)
print str1*times1
print str2*times2
只想指定str2的打印次数，你必须如此调用:f("3221","54646",1,5)   下面的调用方法不对
f("3221","54646", ,5)
除了上面的方法的方法之外，还有一个方法可对指定参数赋值：利用参数关键字：
上面的调用方法用参数关键字实现：
f("3221","54646",times2=5)此时就可以不用写times1的默认值了，但这时你必须记得你的形参的名字，否则无法实现。
python中函数的参数个数可以是不定的。如
f(str,*arg)
函数体
这个函数的第二个参数表示它后可以有多个参数，调用时，f("3221",4),f("3221",4,9,634,"13241"),f("3221","54646",1,4)等调用方法均是正确的。

面向对象语言中函数的重载也可是参数个数相同，而类型不同，而只要你用python，你就用知道python中的所有变量均是object类型，只有在你赋值后才确定它的类型。如：
str="35416546"此语句既是变量定义语句同时也是赋值语句，表明str是字符串型。一定明确了类型，就不能随便赋其它类型的值。
由此可知，python中函数参数变量是没有类型的，当你调用传值的时候才知道它到底是什么类型的变量。故对参数类型不同的函数根本无需考虑重载。]]></content:encoded>
		<excerpt:encoded><![CDATA[如果你习惯用C＋＋，JAVA或者其它的面向对象语言，你会经常用到函数重载。

所谓函数的重载是指多个函数的名称以及返回值类型均相同，仅参数类型或参数个数不同。函数重载大大提高了代码重用率和程序员开发效率。
但如果你现在转向使用python，你就有可能不习惯它的形式上不支持函数重载。但python作为面向对象语言，自然不会丢掉函数重载这个面向对象语言所共有的重要特性。]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date>2010-10-15 11:48:10</wp:post_date>
		<wp:post_date_gmt>2010-10-15 03:48:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python%e4%b8%ad%e7%9a%84%e5%87%bd%e6%95%b0%e9%87%8d%e8%bd%bd%ef%bc%88by-qshpeng</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vmstat命令详细解释</title>
		<link>http://www.themysql.com/linux/vmstat%e5%91%bd%e4%bb%a4%e8%af%a6%e7%bb%86%e8%a7%a3%e9%87%8a.html</link>
		<pubDate>Fri, 15 Oct 2010 10:57:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[vmstat命令也是显示Linux性能指标的方法，它报告了许多信息，理解这些信息有一定难度。

vmstat:报告关于内核进程,虚拟内存,磁盘,cpu的的活动状态的工具
用法：vmstat 间隔 测试数量

输出分为6个类别：进程、内存、交换区、I/O、系统和CPU。与iostat类似，第一个样本是从最近重新启动以来的平均值。以下是一个典型的vmstat输出：

procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
<div id="_mcePaste">r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div>
<div id="_mcePaste">1  0   9652 7269324   9316 11509824    0    0   248    11 1328  591  0  0 100  0  0</div>
<div id="_mcePaste">0  0   9652 7268952   9316 11509824    0    0   552     4 1640 1056  0  0 99  0  0</div>
<div id="_mcePaste">0  0   9652 7268620   9316 11509824    0    0   768     3 1880 1377  0  0 99  0  0</div>
<div id="_mcePaste">1  0   9652 7268244   9320 11509820    0    0   496    13 1628  995  0  0 99  0  0</div>
<div id="_mcePaste">0  0   9652 7268156   9320 11509824    0    0   576     3 3242 5675  0  1 99  0  0</div>
结果列表示的意义

<strong>--r 运行队列中的进程数,在一个稳定的工作量下,应该少于5 （r &lt;5）</strong>
<strong>--b 等待队列中的进程数(等待I/O),通常情况下是接近0的. （b=0）</strong>
<strong><span style="font-weight: normal;">
</span></strong><strong>--sy 系统调用中断
--cs 内核进程前后交换中断
cpu--cpu的使用率
--us 用户进程的时间
--sy 系统进程的时间
--id cpu空闲的时间
--wa 等待i/o的时间
一般us+sy 在单用户系统中不大于90,在多用户系统中不大于80.
wa时间一般不大于40.</strong>

表3-7                                                  vmstat内存字段
<table border="1" cellspacing="0" cellpadding="0" width="561">
<tbody>
<tr>
<td width="238" valign="top">字    段</td>
<td width="323" valign="top">说    明</td>
</tr>
<tr>
<td width="238" valign="top">Swpd</td>
<td width="323" valign="top">已用的交换空间数量</td>
</tr>
<tr>
<td width="238" valign="top">free</td>
<td width="323" valign="top">自由RAM数量</td>
</tr>
<tr>
<td width="238" valign="top">buff</td>
<td width="323" valign="top">缓冲使用的RAM数量</td>
</tr>
<tr>
<td width="238" valign="top">cache</td>
<td width="323" valign="top">文件系统缓存使用的RAM数量</td>
</tr>
</tbody>
</table>
接下来是交换（swap）指标。交换只是一个古老术 语，但是显然不会消失。交换涉及分页读取或写入磁盘的进程所消耗的所有内存。它将显示系统达到的性能指标水平。而Linux所做的是，以小块方式按照需要 对磁盘空间进行分页操作。因此，我们可能应该停止说交换到磁盘的内存，并开始说分页到磁盘的内存。对于任何一种方法，表3-8解释了相关字段。

表3-8                                                   vmstat交换字段
<table border="1" cellspacing="0" cellpadding="0" width="562">
<tbody>
<tr>
<td width="238" valign="top">字    段</td>
<td width="324" valign="top">说   明</td>
</tr>
<tr>
<td width="238" valign="top">si</td>
<td width="324" valign="top">从磁盘分页到内存的数量</td>
</tr>
<tr>
<td width="238" valign="top">so</td>
<td width="324" valign="top">从内存分页到磁盘的数量</td>
</tr>
</tbody>
</table>
在交换之后是两个I/O字段。这部分提供了一个简略介绍以帮助确定Linux是否正忙于完成许多磁盘I/O。vmstat只提供两个字段，显示出入磁盘的数据量（参见表3-9）。

表3-9                                                   vmstat io字段
<table border="1" cellspacing="0" cellpadding="0" width="562">
<tbody>
<tr>
<td width="238" valign="top">字    段</td>
<td width="324" valign="top">说   明</td>
</tr>
<tr>
<td width="238" valign="top">bi</td>
<td width="324" valign="top">从磁盘读入的块</td>
</tr>
<tr>
<td width="238" valign="top">bo</td>
<td width="324" valign="top">写入磁盘的块</td>
</tr>
</tbody>
</table>
系统字段提供Linux内核进行进程管理的繁忙程度的摘要。中断和上下文开关参见表3-10。上下文开关指进程移出CPU或者移入CPU。

表3-10                                               vmstat系统字段
<table border="1" cellspacing="0" cellpadding="0" width="562">
<tbody>
<tr>
<td width="240" valign="top">字   段</td>
<td width="322" valign="top">说     明</td>
</tr>
<tr>
<td width="240" valign="top">in</td>
<td width="322" valign="top">系统中断</td>
</tr>
<tr>
<td width="240" valign="top">cs</td>
<td width="322" valign="top">进程上下文开关</td>
</tr>
</tbody>
</table>
最后，CPU状态信息用总CPU时间的百分比来表示，如表3-11所示。

表3-11                                               vmstat cpu字段
<table border="1" cellspacing="0" cellpadding="0" width="562">
<tbody>
<tr>
<td width="240" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">字    段</span></span></td>
<td width="322" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">说     明</span></span></td>
</tr>
<tr>
<td width="240" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">us</span></span></td>
<td width="322" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">用户模式</span></span></td>
</tr>
<tr>
<td width="240" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">sy</span></span></td>
<td width="322" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">内核模式</span></span></td>
</tr>
<tr>
<td width="240" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">wa</span></span></td>
<td width="322" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">等待I/O</span></span></td>
</tr>
<tr>
<td width="240" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">id</span></span></td>
<td width="322" valign="top"><span style="font-size: small;"><span style="line-height: 19px;">空闲</span></span></td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[vmstat命令也是显示Linux性能指标的方法，它报告了许多信息，理解这些信息有一定难度。

vmstat:报告关于内核进程,虚拟内存,磁盘,cpu的的活动状态的工具 
用法：vmstat 间隔 测试数量 

输出分为6个类别：进程、内存、交换区、I/O、系统和CPU。与iostat类似，第一个样本是从最近重新启动以来的平均值。]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2010-10-15 18:57:18</wp:post_date>
		<wp:post_date_gmt>2010-10-15 10:57:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vmstat%e5%91%bd%e4%bb%a4%e8%af%a6%e7%bb%86%e8%a7%a3%e9%87%8a</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux-2"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="vmstat"><![CDATA[vmstat]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[979]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于InnoDB事务的一个“诡异”现象</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8einnodb%e4%ba%8b%e5%8a%a1%e7%9a%84%e4%b8%80%e4%b8%aa%e2%80%9c%e8%af%a1%e5%bc%82%e2%80%9d%e7%8e%b0%e8%b1%a1.html</link>
		<pubDate>Tue, 19 Oct 2010 03:15:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=92</guid>
		<description></description>
		<content:encoded><![CDATA[在学习High Performance MySQL时候，看到关于MVCC在隔离级别为repeateable read的时候，测试发现update可以update到其他事务提交的数据，下次在相同事务下select的时候可以select到。

High Performance MySQL是按照下面的文字对UPDATE操作进行解释的，当时是按照下面的字面意思解释了上面的现象。
<div id="_mcePaste">UPDATE</div>
<div id="_mcePaste">InnoDB writes a new copy of the row, using the system version number for the</div>
<div id="_mcePaste">new row’s version. It also writes the system version number as the old row’s</div>
<div id="_mcePaste">deletion version.</div>
UPDATEInnoDB writes a new copy of the row, using the system version number for thenew row’s version. It also writes the system version number as the old row’sdeletion version.

最后无意间在google上搜到了淘宝dba对这个从源码层面的解释，遂copy于此，原帖地址：<a href="http://rdc.taobao.com/blog/cs/?p=392&amp;cpage=1#comment-298">http://rdc.taobao.com/blog/cs/?p=392&amp;cpage=1#comment-298</a>

在隔离机制中，InnoDB默认采用的Repeatable Read 和MVCC机制保证在事务内部尽量保证逻辑一致性。但如下的现象依然让人觉得不太合理。

<strong>1</strong><strong>、复现</strong>

a)      表结构

CREATE TABLE `t` (

`a` int(11) NOT NULL DEFAULT ‘0′,

`b` int(11) DEFAULT NULL,

PRIMARY KEY (`a`)

) ENGINE=InnoDB DEFAULT CHARSET=gbk

表中2条记录

| 1 |  100 |

| 4 |  400 |

+—+——+

b)      操作过程：开两个session，操作序列如下
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="338" valign="top">Session 1</td>
<td width="230" valign="top">Session 2</td>
</tr>
<tr>
<td width="338" valign="top"><strong>1)Begin</strong></td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong>2)Select * from t;</strong>

| 1 |  100 |

| 4 |  400 |

2 rows in set (0.01 sec)</td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong> </strong></td>
<td width="230" valign="top"><strong>3)Insert into t vlaues(2, 200);</strong></td>
</tr>
<tr>
<td width="338" valign="top"><strong>4)Select * from t;</strong>

| 1 |  100 |

| 4 |  400 |

2 rows in set (0.01 sec)</td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong>5)Update t set b = 200 where a = 2;</strong>

Query OK, 0 rows affected (0.01 sec)

Rows matched: 1  Changed: 0  Warnings: 0</td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong>6)Select * from t;</strong>

| 1 |  100 |

| 2 |  200 |

| 4 |  400 |

3 rows in set (0.01 sec)</td>
<td width="230" valign="top"></td>
</tr>
</tbody>
</table>
从session 1整个过程看来，它试图更新一个<strong>不存在</strong>的记录(a=2)，结果<strong>更新成功</strong>，并且之后这个记录<strong>可以访问</strong>。

<strong>2</strong><strong>、分析</strong>

从其他正常的表象看来，在事务内，只要不涉及更新，事务外的任何更新都是不可见的。上面试验中session 1内update之前执行的select *得到的结果仍是2条记录。

虽然更新冲突时的策略见仁见智，但例子中的这个现象应该提供一种可以选择的方式（至少应该允许配置）。

接下来的篇幅主要分析出现这种现象的原因，以及通过简单修改实现如下的方式：对于查询不可见的记录，update操作不应该成功。

由于更新冲突策略的复杂性，本文不解决更多的问题，简单比如：insert操作由于主键冲突的原因，插入依旧不允许。

<strong>3</strong><strong>、源码相关</strong>

先来说明一下为什么步骤4)中的查询结果仍为2条记录。

Innodb内部每个事务开始时，都会有一个事务id， 同时事务对象中还有一个read_view变量，用于控制该事务可见的记录范围(MVCC)。对于每个访问到的记录行，会根据read_view的trx_id（事务id）与行记录的trx_id比较，判断记录是否逻辑上可见。

Session 2中插入的记录不可见，原因即为session 1先于session 2，因此新插入的数据经过判断，不在可见范围内。对应的源码在row/row0sel.c [4040-4055].

{说明: 源码版本5.1.45， 下同}

发生的逻辑为
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="568" valign="top">If(!lock_clust_rec_cons_read_sees(..)){

//检查该记录是否本事务可见

row_sel_build_prev_vers_for_mysql(….); //不可见则找上一个版本

if (old_vers == NULL) {goto next_rec;} //上一个版本没有这个记录，放弃

}</td>
</tr>
</tbody>
</table>
注意到表格中出现的Rows matched: 1。 这里是例子出现诡异的开始，也是根源。我们知道innoDB内部更新数据实际上是“先查后改”，跟这个Rows matched: 1结合起来，不难联想到，在执行update操作是，在“查”的阶段，事务能够访问到新插入的行。

猜测：问题出在，执行更新的时候，是否没有判断事务可见范围？

事实上确实如此，源代码上翻几行可以看到，在行数[3897-4017-4071]这个if-else逻辑。
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="568" valign="top">if (prebuilt-&gt;select_lock_type != LOCK_NONE) {

//该操作需要加锁

}

else{

//{CODES A}

}</td>
</tr>
</tbody>
</table>
执行查询语句走的是else的逻辑，而控制版本可见范围的代码就在{CODES A}的位置中。

而当我们在session 1中执行update操作时，走的是if()的逻辑，这里，没有判断版本可见范围。

<strong> 4</strong><strong>、简单修改</strong><strong> </strong>

既然是因为update的“查”过程没有检查版本可见范围造成，我们试着加上。

在row/row0sel.c[3907]行插入如下：
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="568" valign="top">if(trx-&gt;read_view){

if (UNIV_LIKELY(srv_force_recovery &lt; 5)

&amp;&amp; !lock_clust_rec_cons_read_sees(rec, clust_index, offsets, trx-&gt;read_view)) {

rec_t*  old_vers;

err = row_sel_build_prev_vers_for_mysql(

trx-&gt;read_view, clust_index,

prebuilt, rec, &amp;offsets, &amp;heap,

&amp;old_vers, &amp;mtr);

if (err != DB_SUCCESS) {

goto lock_wait_or_error;

}

if (old_vers == NULL) {

goto next_rec;

}

}

}</td>
</tr>
</tbody>
</table>
新的执行结果为
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="338" valign="top">Session 1</td>
<td width="230" valign="top">Session 2</td>
</tr>
<tr>
<td width="338" valign="top"><strong>1)Begin</strong></td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong>2)Select * from t;</strong>

| 1 |  100 |

| 4 |  400 |

2 rows in set (0.01 sec)</td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong> </strong></td>
<td width="230" valign="top"><strong>3)Insert into t vlaues(2, 200);</strong></td>
</tr>
<tr>
<td width="338" valign="top"><strong>4)Select * from t;</strong>

| 1 |  100 |

| 4 |  400 |

2 rows in set (0.01 sec)</td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong>5)Update t set b = 200 where a = 2;</strong>

Query OK, 0 rows affected (0.01 sec)

<strong>Rows matched: 0</strong> Changed: 0  Warnings: 0</td>
<td width="230" valign="top"></td>
</tr>
<tr>
<td width="338" valign="top"><strong>6)Select * from t;</strong>

| 1 |  100 |

| 4 |  400 |

<strong>2 rows in set</strong> (0.01 sec)</td>
<td width="230" valign="top"></td>
</tr>
</tbody>
</table>
重申：这个修改仅仅从本文的例子出发，达到“事务内查询无法访问的记录，不能更新”这个目的， 其他更新冲突策略不在此范围内。 仅作交流使用 -_-]]></content:encoded>
		<excerpt:encoded><![CDATA[在学习High Performance MySQL时候，看到关于MVCC在隔离级别为repeateable read的时候，测试发现update可以update到其他事务提交的数据，下次在相同事务下select的时候可以select到。

High Performance MySQL是按照下面的文字对UPDATE操作进行解释的，当时是按照下面的字面意思解释了上面的现象。

UPDATE
InnoDB writes a new copy of the row, using the system version number for the
new row’s version. It also writes the system version number as the old row’s
deletion version.
UPDATEInnoDB writes a new copy of the row, using the system version number for thenew row’s version. It also writes the system version number as the old row’sdeletion version.]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date>2010-10-19 11:15:25</wp:post_date>
		<wp:post_date_gmt>2010-10-19 03:15:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8einnodb%e4%ba%8b%e5%8a%a1%e7%9a%84%e4%b8%80%e4%b8%aa%e2%80%9c%e8%af%a1%e5%bc%82%e2%80%9d%e7%8e%b0%e8%b1%a1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[MySQL,MVCC,repeateable read]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[747]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linux下文件的切分及结合</title>
		<link>http://www.themysql.com/linux/linux%e4%b8%8b%e6%96%87%e4%bb%b6%e7%9a%84%e5%88%87%e5%88%86%e5%8f%8a%e7%bb%93%e5%90%88.html</link>
		<pubDate>Thu, 21 Oct 2010 02:34:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">1、文件的切分及结合工具；</div>
<div id="_mcePaste">可能我们遇到这种情况，有时文件比较大，想上传到服务器上，但由于服务器管理员为了安全考虑，把上传空间作了限制，比如只能上传20M的文件，如果我们文件的体积在100M的，有时就是压缩也不能满足服务器上传的限制。这时我们就要考虑切分文件了，把100M的文件，切分成若干份，然后传到服务器上。切分后的每个文件都是原文件的组成部份。如果要获得整个完整的文件，我们就需要文件的结合工具。</div>
<div id="_mcePaste">所以我们引入了文件切分工具split和csplit，文件的结合工具cat；</div>
<div id="_mcePaste">2、文件的切分工具 split 和csplit；</div>
<div id="_mcePaste">split 是把一个文件拆分为长度或体积相等的若干文件的工具；</div>
<div id="_mcePaste">2.1 split 工具；</div>
<div id="_mcePaste">split 是把一个文件拆分为长度或体积相等的若干文件的工具；</div>
<div id="_mcePaste">2.11 语法格式；</div>
<div id="_mcePaste">split [参数选项］ infile [outfile］</div>
<div id="_mcePaste">split 把输入的文件拆分为若干体积或长度相等的文件，输入文件保持不变，只是把结果拆分结果写到outfileaa、outfileab ... ... 等文件中。如果我们不指定outfile，被拆分后的文件会写到 xaa、xab ... ...。</div>
<div id="_mcePaste">参数</div>
<div id="_mcePaste">-l n 把infile拆分为具有n行的段，默认值为1000</div>
<div id="_mcePaste">-b n[bkm] 以体积为单位的拆分，约定每拆分后每个文件的大小 ，b代表512B，k代表1KB，m代表1MB。</div>
<div id="_mcePaste">-C bytes[bkm] 把bytes的最大值放入文件，坚持增加完整的行；</div>
<div id="_mcePaste">- 从标准输入读取；</div>
<div id="_mcePaste">--help 帮助；</div>
<div id="_mcePaste">2.12 split实例应用；</div>
<div id="_mcePaste">实例一：比如我们想切分一个文件linuxdoc.txt，切分后，每两行存为一个新文件。</div>
<div id="_mcePaste">[root@localhost ~]# more linuxdoc.txt 注：linuxdoc.txt 文件内容查看；</div>
<div id="_mcePaste">111111111</div>
<div id="_mcePaste">222222222</div>
<div id="_mcePaste">333333333</div>
<div id="_mcePaste">444444444</div>
<div id="_mcePaste">555555555</div>
<div id="_mcePaste">666666666</div>
<div id="_mcePaste">777777777</div>
<div id="_mcePaste">888888888</div>
<div id="_mcePaste">999999999</div>
<div id="_mcePaste">000000000</div>
<div id="_mcePaste">[root@localhost ~]# split -l 2 linuxdoc.txt linuxdocsp 注：切分linuxdoc.txt文件，被切分后的文件名linuxdocsp开头</div>
<div id="_mcePaste">[root@localhost ~]# ls linuxdocspa* 注：查看切分后的所有文件；</div>
<div id="_mcePaste">linuxdocspaa linuxdocspab linuxdocspac linuxdocspad linuxdocspae</div>
<div id="_mcePaste">[root@localhost ~]# more linuxdocspa* 注：查看这些文件的内容；是不是每个文件都是两行呢？</div>
<div id="_mcePaste">linuxdocspaa</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">111111111</div>
<div id="_mcePaste">222222222</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocspab</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">333333333</div>
<div id="_mcePaste">444444444</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocspac</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">555555555</div>
<div id="_mcePaste">666666666</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocspad</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">777777777</div>
<div id="_mcePaste">888888888</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocspae</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">999999999</div>
<div id="_mcePaste">000000000</div>
<div id="_mcePaste">实例二：以文件体积为单位的切分；</div>
<div id="_mcePaste">[root@localhost ~]# ls -lh linuxdoc.txt</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 100 04-27 15:56 linuxdoc.txt</div>
<div id="_mcePaste">[root@localhost ~]# more linuxdoc.txt</div>
<div id="_mcePaste">111111111</div>
<div id="_mcePaste">222222222</div>
<div id="_mcePaste">333333333</div>
<div id="_mcePaste">444444444</div>
<div id="_mcePaste">555555555</div>
<div id="_mcePaste">666666666</div>
<div id="_mcePaste">777777777</div>
<div id="_mcePaste">888888888</div>
<div id="_mcePaste">999999999</div>
<div id="_mcePaste">000000000</div>
<div id="_mcePaste">[root@localhost ~]# split -b 30 linuxdoc.txt linuxdocwsp 如果指定切分体积大小后面没有接单位，默认是B；</div>
<div id="_mcePaste">[root@localhost ~]# ls -lh linuxdocwspa*</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 30 04-27 16:10 linuxdocwspaa</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 30 04-27 16:10 linuxdocwspab</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 30 04-27 16:10 linuxdocwspac</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 10 04-27 16:10 linuxdocwspad</div>
<div id="_mcePaste">[root@localhost ~]# more linuxdocwspa*</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocwspaa</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">111111111</div>
<div id="_mcePaste">222222222</div>
<div id="_mcePaste">333333333</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocwspab</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">444444444</div>
<div id="_mcePaste">555555555</div>
<div id="_mcePaste">666666666</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocwspac</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">777777777</div>
<div id="_mcePaste">888888888</div>
<div id="_mcePaste">999999999</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">linuxdocwspad</div>
<div id="_mcePaste">::::::::::::::</div>
<div id="_mcePaste">000000000</div>
<div id="_mcePaste">对于切分体积的说明：如果没有指定单位，默认单位是B。还有其它的单位，比如b、k、m。看下面的例子；</div>
<div id="_mcePaste">[root@localhost ~]# ls -lh moretool.txt</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 13K 04-27 16:17 moretool.txt 注：文件大小为13K；</div>
<div id="_mcePaste">[root@localhost ~]#split -b 3k moretool.txt moretoolwsp 注： 切分后每个文件大小为3K；</div>
<div id="_mcePaste">实例三：从标准输入读取的实例；</div>
<div id="_mcePaste">[root@localhost ~]# ls -lh /etc | split -l 40 - etcfilelist</div>
<div id="_mcePaste">[root@localhost ~]# ls etcfilelista*</div>
<div id="_mcePaste">etcfilelistaa etcfilelistab etcfilelistac etcfilelistad etcfilelistae etcfilelistaf etcfilelistag</div>
<div id="_mcePaste">注：本指令的意思是用ls以长格式列出/etc目录的文件（不包括.file格式的文件，也就是隐藏文件），把输入的内容传递给split，让split来切分每40行为存为一个文件，文件名的开头以etcfilelist开始。注意40后面的- ，表示从标准输入读取，在这里就表示键盘输入了，也就是读取ls -lh /etc 指令的内容。然后split切分。</div>
<div id="_mcePaste">2.2 csplit 工具；</div>
<div id="_mcePaste">2.21语法</div>
<div id="_mcePaste">csplit [  -f Prefix ] [  -k ] [  -n Number ] [  -s ] File Argument ...</div>
<div id="_mcePaste">2.22描述</div>
<div id="_mcePaste">csplit 命令拷贝指定的文件并将拷贝分成段。 原始的还未改变的输入文件，必须是一个文本文件。</div>
<div id="_mcePaste">这个 csplit 命令将这些段写到文件 xx00 . . . xx99 中，这依赖于 Argument 参数 被指定（99 是最大值）多少次。缺省情况下，Argument 参数期望一个行号。当指定多行号时应用以下规则：</div>
<div id="_mcePaste">文件 xx00 包含原始文件的行开始，到（但不包括）第一个 Argument 参数指定的行。</div>
<div id="_mcePaste">文件 xx01 包含 第一个 Argument参数指定的编号的行开始，直到（但不包括）第二个 Argument参数引用的行。每个指定行号作为自变量，标记新行的开始。</div>
<div id="_mcePaste">文件 xxnn（最后创建的文件）包含最后一个 Argument 参数指定的编号的行开始，直到文件结束。</div>
<div id="_mcePaste">示例，如果原始的文件有 108 行，输入：</div>
<div id="_mcePaste">csplit orginal.txt 11 72 98</div>
<div id="_mcePaste">这个 csplit 命令创建 4 个文件： xx00 文件包含行 1-10，xx01 文件包含行 11-71，xx02 文件包含行 72-97，xx03 文件 包含行 98-108。</div>
<div id="_mcePaste">Argument 参数还可以包含以下符号和模式字符串：</div>
<div id="_mcePaste">/Pattern/	 创建一个文件包含从当前行开始直到（但不包含）包含指定模式的那一行的段的文件。包含模式的行成为当前行。</div>
<div id="_mcePaste">% Pattern %	 使包含指定模式的行成为当前行，但不为段创建一个文件。</div>
<div id="_mcePaste">+ Number	 将指定编号的行从以前的匹配模式前移。示例，/页 /+5 搜索页，那就提前 5 行。</div>
<div id="_mcePaste">-Number	 将指定的行号从以前的匹配模式行后移。示例，/页 /-5 搜索页那就后退 5 行。</div>
<div id="_mcePaste">{Number}	 重复指定次数的以前选项。这个号码可以紧跟任何模式或行号。如果紧跟一个模式，csplit 命令就会重新使用指定次数的模式。如果紧跟一个行号，csplit 命令 将文件从由行号指定行的点处分割开。</div>
<div id="_mcePaste">将引用标记放在所有模式周围，这些模式包含空格或其它专用于 shell 的字符。模式不要包含 embedded 新行字符。在表达中，例如 [a-z]，- （减号）意思是通过，这是根据当前的整理顺序。一个整理顺序可以定义同等的类以便在字符范围以内使用。</div>
<div id="_mcePaste">2.23选项</div>
<div id="_mcePaste">-fPrefix	 指定前缀由已经创建的文件段使用。此变量的缺省值是 xx。</div>
<div id="_mcePaste">-k	 使创建的文件段完整的位于出错事件中。</div>
<div id="_mcePaste">-nNumber	 改变十进制号码位，用于创建文件名。 缺省的是两个十进制位或 xx00 . . . xx99。 如果指定 -n 4 标志，例如，新的文件被命名为 xx0000 . . . xx0099。</div>
<div id="_mcePaste">-s	 消除字符计数的显示。</div>
<div id="_mcePaste">退出状态</div>
<div id="_mcePaste">此命令返回以下退出值：</div>
<div id="_mcePaste">0	 成功完成。</div>
<div id="_mcePaste">&gt;0	 发生错误。</div>
<div id="_mcePaste">2.24示例</div>
<div id="_mcePaste">将 book 的文本以每章一个单独文件来分割，输入：</div>
<div id="_mcePaste">csplit book "/^ Chapter *[k.0-9]k./" {9}</div>
<div id="_mcePaste">这创建了 10 个文件，从 xx00 到 xx09。xx00 文件包含了第一章前面的出版前页。文件从 xx01 到 xx09 包含各个单独的章节。每一章起始的一行只包含单词章和章节号。</div>
<div id="_mcePaste">为这些创建自 book 的文件指定前缀 chap，输入：</div>
<div id="_mcePaste">csplit  -f chap book "/^ Chapter *[k.0-9]k./" {9}</div>
<div id="_mcePaste">这样把 book 分割成文件，命名从 chap00 到 chap09。</div>
<div id="_mcePaste">3、文件的连接工具 cat；</div>
<div id="_mcePaste">cat 工具如果后面直接文件文件名，就可以查看文件的内容。我们在《文件内容查看工具》中有说过。在《文件内容查看工具》一文中，我们也谈过cat 连接文件的功能；现在我们仍得把cat工具连接文件的功能单列出来说一说。</div>
<div id="_mcePaste">3.1 把多个文件合并到一个新的文件中；</div>
<div id="_mcePaste">命令格式如下：</div>
<div id="_mcePaste">cat file1 file2 file3 ... ... &gt; filen</div>
<div id="_mcePaste">我们可以把file1、file2、file3 等多个文件合并到一个文件中，其中filen是在合并这些文件的同时新建的文件，而不是已存在的文件；</div>
<div id="_mcePaste">[root@localhost ~]# cat sir01.txt</div>
<div id="_mcePaste">123456</div>
<div id="_mcePaste">[root@localhost ~]# cat sir02.txt</div>
<div id="_mcePaste">56789</div>
<div id="_mcePaste">[root@localhost ~]# cat sir03.txt</div>
<div id="_mcePaste">09876</div>
<div id="_mcePaste">[root@localhost ~]# cat sir01.txt sir02.txt sir03.txt &gt; sir04.txt</div>
<div id="_mcePaste">[root@localhost ~]# more sir04.txt</div>
<div id="_mcePaste">123456</div>
<div id="_mcePaste">56789</div>
<div id="_mcePaste">09876</div>
<div id="_mcePaste">3.2 把多个文件合并追加到一个已存在的文件中；</div>
<div id="_mcePaste">命令格式如下：</div>
<div id="_mcePaste">cat file1 file2 file3 ... ... &gt;&gt; filen</div>
<div id="_mcePaste">如果我们想把file1、file2、file3等多个文件内容连接起来，并追加到一个已存在的文件filen中，应该用追加的方法；</div>
<div id="_mcePaste">[root@localhost ~]# more sir01.txt</div>
<div id="_mcePaste">123456</div>
<div id="_mcePaste">[root@localhost ~]# cat sir01.txt</div>
<div id="_mcePaste">123456</div>
<div id="_mcePaste">[root@localhost ~]# cat sir02.txt</div>
<div id="_mcePaste">56789</div>
<div id="_mcePaste">[root@localhost ~]# cat sir03.txt</div>
<div id="_mcePaste">09876</div>
<div id="_mcePaste">[root@localhost ~]# cat sir05.txt</div>
<div id="_mcePaste">aaaaa</div>
<div id="_mcePaste">bbbbb</div>
<div id="_mcePaste">[root@localhost ~]# cat sir01.txt sir02.txt sir03.txt &gt;&gt; sir05.txt</div>
<div id="_mcePaste">[root@localhost ~]# cat sir05.txt</div>
<div id="_mcePaste">aaaaa</div>
<div id="_mcePaste">bbbbb</div>
<div id="_mcePaste">123456</div>
<div id="_mcePaste">56789</div>
<div id="_mcePaste">09876</div>
<div id="_mcePaste">4、关于分拆文件和连接文件的安全性；</div>
<div id="_mcePaste">比如我们把一个大的文件分拆为多个小文件时，肯定会考虑到，我们重新把一个一个小的分拆文件连接起来，会不会能和原文件保持一致 。这样的疑问其实也是有道理的，因为这关系到一个文件的完整性，如果真的合并不到一起，关系到文件的完整性和安全性。这时就涉及到文件的校验工具。一般我们是通过MD5工具来校验对比。在Linux也有这样的工具md5sum。</div>
<div id="_mcePaste">[root@localhost ~]# ls -lh myfile.img 注：查看myfile.img文件属性；</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 7.9M 04-27 20:35 myfile.img</div>
<div id="_mcePaste">[root@localhost ~]# split -b 4m myfile.img myfileSp 注：分拆为大小为4M的文件；</div>
<div id="_mcePaste">[root@localhost ~]# ls -lh myfileSp* 注：列出分拆文件，我们看到有两个文件；</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 4.0M 04-27 20:37 myfileSpaa</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 3.9M 04-27 20:37 myfileSpab</div>
<div id="_mcePaste">[root@localhost ~]# cat myfileSp* &gt; newmyfile.img 注：我们尝试合并文件到一个新文件中；</div>
<div id="_mcePaste">[root@localhost ~]# ls -lh newmyfile.img</div>
<div id="_mcePaste">-rw-r--r-- 1 root root 7.9M 04-27 20:38 newmyfile.img</div>
<div id="_mcePaste">[root@localhost ~]# md5sum newmyfile.img myfile.img 注：我们对比合并后文件和原文件的MD5值，如果M55值相同，就是完整的；</div>
<div id="_mcePaste">[root@localhost ~]# md5sum newmyfile.img myfile.img</div>
<div id="_mcePaste">7eb24d865a14fa3227633816800522c1 myfile.img</div>
<div id="_mcePaste">7eb24d865a14fa3227633816800522c1 newmyfile.img</div>
<div id="_mcePaste">上面是一个实例，把myfile.img文件分拆为4M大小的文件，然后再把两个文件连接起来，然后校验是不是合并后的文件和原文件的MD5值是相同的，如果相同，证明分拆过程是安全的。</div>
1、文件的切分及结合工具；可能我们遇到这种情况，有时文件比较大，想上传到服务器上，但由于服务器管理员为了安全考虑，把上传空间作了限制，比如只能上传20M的文件，如果我们文件的体积在100M的，有时就是压缩也不能满足服务器上传的限制。这时我们就要考虑切分文件了，把100M的文件，切分成若干份，然后传到服务器上。切分后的每个文件都是原文件的组成部份。如果要获得整个完整的文件，我们就需要文件的结合工具。
所以我们引入了文件切分工具split和csplit，文件的结合工具cat；

2、文件的切分工具 split 和csplit；
split 是把一个文件拆分为长度或体积相等的若干文件的工具；

2.1 split 工具；
split 是把一个文件拆分为长度或体积相等的若干文件的工具；

2.11 语法格式；
split [参数选项］ infile [outfile］
split 把输入的文件拆分为若干体积或长度相等的文件，输入文件保持不变，只是把结果拆分结果写到outfileaa、outfileab ... ... 等文件中。如果我们不指定outfile，被拆分后的文件会写到 xaa、xab ... ...。参数
-l n 把infile拆分为具有n行的段，默认值为1000-b n[bkm] 以体积为单位的拆分，约定每拆分后每个文件的大小 ，b代表512B，k代表1KB，m代表1MB。-C bytes[bkm] 把bytes的最大值放入文件，坚持增加完整的行；- 从标准输入读取；--help 帮助；

2.12 split实例应用；
实例一：比如我们想切分一个文件linuxdoc.txt，切分后，每两行存为一个新文件。
[root@localhost ~]# more linuxdoc.txt 注：linuxdoc.txt 文件内容查看；111111111222222222333333333444444444555555555666666666777777777888888888999999999000000000[root@localhost ~]# split -l 2 linuxdoc.txt linuxdocsp 注：切分linuxdoc.txt文件，被切分后的文件名linuxdocsp开头[root@localhost ~]# ls linuxdocspa* 注：查看切分后的所有文件；linuxdocspaa linuxdocspab linuxdocspac linuxdocspad linuxdocspae[root@localhost ~]# more linuxdocspa* 注：查看这些文件的内容；是不是每个文件都是两行呢？linuxdocspaa::::::::::::::111111111222222222::::::::::::::linuxdocspab::::::::::::::333333333444444444::::::::::::::linuxdocspac::::::::::::::555555555666666666::::::::::::::linuxdocspad::::::::::::::777777777888888888::::::::::::::linuxdocspae::::::::::::::999999999000000000
实例二：以文件体积为单位的切分；
[root@localhost ~]# ls -lh linuxdoc.txt-rw-r--r-- 1 root root 100 04-27 15:56 linuxdoc.txt[root@localhost ~]# more linuxdoc.txt111111111222222222333333333444444444555555555666666666777777777888888888999999999000000000[root@localhost ~]# split -b 30 linuxdoc.txt linuxdocwsp 如果指定切分体积大小后面没有接单位，默认是B；[root@localhost ~]# ls -lh linuxdocwspa*-rw-r--r-- 1 root root 30 04-27 16:10 linuxdocwspaa-rw-r--r-- 1 root root 30 04-27 16:10 linuxdocwspab-rw-r--r-- 1 root root 30 04-27 16:10 linuxdocwspac-rw-r--r-- 1 root root 10 04-27 16:10 linuxdocwspad[root@localhost ~]# more linuxdocwspa*::::::::::::::linuxdocwspaa::::::::::::::111111111222222222333333333::::::::::::::linuxdocwspab::::::::::::::444444444555555555666666666::::::::::::::linuxdocwspac::::::::::::::777777777888888888999999999::::::::::::::linuxdocwspad::::::::::::::000000000
对于切分体积的说明：如果没有指定单位，默认单位是B。还有其它的单位，比如b、k、m。看下面的例子；
[root@localhost ~]# ls -lh moretool.txt-rw-r--r-- 1 root root 13K 04-27 16:17 moretool.txt 注：文件大小为13K；[root@localhost ~]#split -b 3k moretool.txt moretoolwsp 注： 切分后每个文件大小为3K；
实例三：从标准输入读取的实例；
[root@localhost ~]# ls -lh /etc | split -l 40 - etcfilelist[root@localhost ~]# ls etcfilelista*etcfilelistaa etcfilelistab etcfilelistac etcfilelistad etcfilelistae etcfilelistaf etcfilelistag
注：本指令的意思是用ls以长格式列出/etc目录的文件（不包括.file格式的文件，也就是隐藏文件），把输入的内容传递给split，让split来切分每40行为存为一个文件，文件名的开头以etcfilelist开始。注意40后面的- ，表示从标准输入读取，在这里就表示键盘输入了，也就是读取ls -lh /etc 指令的内容。然后split切分。

2.2 csplit 工具；
2.21语法csplit [  -f Prefix ] [  -k ] [  -n Number ] [  -s ] File Argument ...
2.22描述csplit 命令拷贝指定的文件并将拷贝分成段。 原始的还未改变的输入文件，必须是一个文本文件。
这个 csplit 命令将这些段写到文件 xx00 . . . xx99 中，这依赖于 Argument 参数 被指定（99 是最大值）多少次。缺省情况下，Argument 参数期望一个行号。当指定多行号时应用以下规则：
文件 xx00 包含原始文件的行开始，到（但不包括）第一个 Argument 参数指定的行。文件 xx01 包含 第一个 Argument参数指定的编号的行开始，直到（但不包括）第二个 Argument参数引用的行。每个指定行号作为自变量，标记新行的开始。文件 xxnn（最后创建的文件）包含最后一个 Argument 参数指定的编号的行开始，直到文件结束。示例，如果原始的文件有 108 行，输入：
csplit orginal.txt 11 72 98这个 csplit 命令创建 4 个文件： xx00 文件包含行 1-10，xx01 文件包含行 11-71，xx02 文件包含行 72-97，xx03 文件 包含行 98-108。
Argument 参数还可以包含以下符号和模式字符串：/Pattern/	 创建一个文件包含从当前行开始直到（但不包含）包含指定模式的那一行的段的文件。包含模式的行成为当前行。% Pattern %	 使包含指定模式的行成为当前行，但不为段创建一个文件。+ Number	 将指定编号的行从以前的匹配模式前移。示例，/页 /+5 搜索页，那就提前 5 行。-Number	 将指定的行号从以前的匹配模式行后移。示例，/页 /-5 搜索页那就后退 5 行。{Number}	 重复指定次数的以前选项。这个号码可以紧跟任何模式或行号。如果紧跟一个模式，csplit 命令就会重新使用指定次数的模式。如果紧跟一个行号，csplit 命令 将文件从由行号指定行的点处分割开。将引用标记放在所有模式周围，这些模式包含空格或其它专用于 shell 的字符。模式不要包含 embedded 新行字符。在表达中，例如 [a-z]，- （减号）意思是通过，这是根据当前的整理顺序。一个整理顺序可以定义同等的类以便在字符范围以内使用。
2.23选项-fPrefix	 指定前缀由已经创建的文件段使用。此变量的缺省值是 xx。-k	 使创建的文件段完整的位于出错事件中。-nNumber	 改变十进制号码位，用于创建文件名。 缺省的是两个十进制位或 xx00 . . . xx99。 如果指定 -n 4 标志，例如，新的文件被命名为 xx0000 . . . xx0099。-s	 消除字符计数的显示。退出状态
此命令返回以下退出值：
0	 成功完成。&gt;0	 发生错误。
2.24示例将 book 的文本以每章一个单独文件来分割，输入： csplit book "/^ Chapter *[k.0-9]k./" {9}这创建了 10 个文件，从 xx00 到 xx09。xx00 文件包含了第一章前面的出版前页。文件从 xx01 到 xx09 包含各个单独的章节。每一章起始的一行只包含单词章和章节号。
为这些创建自 book 的文件指定前缀 chap，输入：csplit  -f chap book "/^ Chapter *[k.0-9]k./" {9}这样把 book 分割成文件，命名从 chap00 到 chap09。
3、文件的连接工具 cat；
cat 工具如果后面直接文件文件名，就可以查看文件的内容。我们在《文件内容查看工具》中有说过。在《文件内容查看工具》一文中，我们也谈过cat 连接文件的功能；现在我们仍得把cat工具连接文件的功能单列出来说一说。

3.1 把多个文件合并到一个新的文件中；
命令格式如下：
cat file1 file2 file3 ... ... &gt; filen
我们可以把file1、file2、file3 等多个文件合并到一个文件中，其中filen是在合并这些文件的同时新建的文件，而不是已存在的文件；
[root@localhost ~]# cat sir01.txt123456[root@localhost ~]# cat sir02.txt56789[root@localhost ~]# cat sir03.txt09876[root@localhost ~]# cat sir01.txt sir02.txt sir03.txt &gt; sir04.txt[root@localhost ~]# more sir04.txt1234565678909876

3.2 把多个文件合并追加到一个已存在的文件中；
命令格式如下：
cat file1 file2 file3 ... ... &gt;&gt; filen
如果我们想把file1、file2、file3等多个文件内容连接起来，并追加到一个已存在的文件filen中，应该用追加的方法；
[root@localhost ~]# more sir01.txt123456[root@localhost ~]# cat sir01.txt123456[root@localhost ~]# cat sir02.txt56789[root@localhost ~]# cat sir03.txt09876[root@localhost ~]# cat sir05.txtaaaaabbbbb[root@localhost ~]# cat sir01.txt sir02.txt sir03.txt &gt;&gt; sir05.txt[root@localhost ~]# cat sir05.txtaaaaabbbbb1234565678909876

4、关于分拆文件和连接文件的安全性；
比如我们把一个大的文件分拆为多个小文件时，肯定会考虑到，我们重新把一个一个小的分拆文件连接起来，会不会能和原文件保持一致 。这样的疑问其实也是有道理的，因为这关系到一个文件的完整性，如果真的合并不到一起，关系到文件的完整性和安全性。这时就涉及到文件的校验工具。一般我们是通过MD5工具来校验对比。在Linux也有这样的工具md5sum。
[root@localhost ~]# ls -lh myfile.img 注：查看myfile.img文件属性；-rw-r--r-- 1 root root 7.9M 04-27 20:35 myfile.img[root@localhost ~]# split -b 4m myfile.img myfileSp 注：分拆为大小为4M的文件；[root@localhost ~]# ls -lh myfileSp* 注：列出分拆文件，我们看到有两个文件；-rw-r--r-- 1 root root 4.0M 04-27 20:37 myfileSpaa-rw-r--r-- 1 root root 3.9M 04-27 20:37 myfileSpab[root@localhost ~]# cat myfileSp* &gt; newmyfile.img 注：我们尝试合并文件到一个新文件中；[root@localhost ~]# ls -lh newmyfile.img-rw-r--r-- 1 root root 7.9M 04-27 20:38 newmyfile.img[root@localhost ~]# md5sum newmyfile.img myfile.img 注：我们对比合并后文件和原文件的MD5值，如果M55值相同，就是完整的；[root@localhost ~]# md5sum newmyfile.img myfile.img7eb24d865a14fa3227633816800522c1 myfile.img7eb24d865a14fa3227633816800522c1 newmyfile.img
上面是一个实例，把myfile.img文件分拆为4M大小的文件，然后再把两个文件连接起来，然后校验是不是合并后的文件和原文件的MD5值是相同的，如果相同，证明分拆过程是安全的。]]></content:encoded>
		<excerpt:encoded><![CDATA[可能我们遇到这种情况，有时文件比较大，想上传到服务器上，但由于服务器管理员为了安全考虑，把上传空间作了限制，比如只能上传20M的文件，如果我们文件的体积在100M的，有时就是压缩也不能满足服务器上传的限制。这时我们就要考虑切分文件了，把100M的文件，切分成若干份，然后传到服务器上。切分后的每个文件都是原文件的组成部份。如果要获得整个完整的文件，我们就需要文件的结合工具。
所以我们引入了文件切分工具split和csplit，文件的结合工具cat；]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2010-10-21 10:34:25</wp:post_date>
		<wp:post_date_gmt>2010-10-21 02:34:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux%e4%b8%8b%e6%96%87%e4%bb%b6%e7%9a%84%e5%88%87%e5%88%86%e5%8f%8a%e7%bb%93%e5%90%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[split,csplit,cat,linux 文件切分,linux文件合并]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1167]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Echo与Printf回显命令差异分析与应用</title>
		<link>http://www.themysql.com/linux/echo%e4%b8%8eprintf%e5%9b%9e%e6%98%be%e5%91%bd%e4%bb%a4%e5%b7%ae%e5%bc%82%e5%88%86%e6%9e%90%e4%b8%8e%e5%ba%94%e7%94%a8.html</link>
		<pubDate>Mon, 25 Oct 2010 13:01:45 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[在Unix操作系统中可以利用echo与printf两个回显命令来实现。但是到底用哪个命令好呢?笔者先给出一个答案，然后再进行说明。通常情况下，笔者建议操作系统工程师最好使用printf命令，而不是采用echo命令。除非在你原来的程序中就带有很多的echo命令，为了统一性的考虑继续沿用echo命令。一般来说只要是新编写的脚本程序，最好都能够利用printf命令来替代echo命令。

<strong> 一、echo命令的缺陷分析。</strong>

Echo命令可以说是Unix操作系统命令中的老祖宗了。这个命令主要用来在终端显示相关的信息，如当前的环境变量、显示提示信息等等。在刚开始的时候，echo是一个外部命令，而现在基本上所有的外壳程序中都内置了这个echo命令。而根据内部命令优先的原则，那个外部命令文件就变成了摆设，基本没用。虽然说echo命令比较老，其出现在Unix系统统一规范之前，故其有比较大的缺陷。如果利用echo命令作为Unix操作系统中的回显命令，就觉得不怎么合适。

1、echo在不同的外壳程序中用法不统一，导致脚本程序兼容性差。如在实际脚本程序开发过程中，往往需要通过一些转义字符来控制提示信息的显示位置。如echo “\n Please input your Student Num:”表示换一行显示提示信息。但是这些转义字符可能在不同的外壳程序中代表不同的含义;又或者说有的外壳程序支持某个转义字符，而有的外壳程序不支持。所以说，如果在脚本程序中采用echo作为回显命令的话，则很可能在不同的外壳环境中，其最终显示的结果会有很大的差异，其兼容性不好。通常这种情况下，系统工程师需要预先利用IF语句来判断当前所采用的外壳程序，然后再根据外壳程序的种类选择执行合适的echo语句(各个echo语句根据外壳程序支持的转义字符不同而采用不同的转义字符或者相应的语法)。这么处理的话虽然可行，但是无疑增加了脚本的代码量。而且当脚本程序比较复杂时，也会影响其执行的性能。

2、其功能不够强大。虽然echo命令出现的比较早，但是这个命令的功能这么多年来没有多大的扩展。如上例所示，学生的编号可能为8个整数型的数字。而利用echo命令就无法控制内容输出的格式，而且也无法控制输出字符串的宽度等等。所以说echo命令的功能比较有限。如果要利用echo命令开显示一些复杂的信息时，往往还需要通过其他的一些语句来帮助。所以说，现在echo命令往往只是在shell中简单的回显一些信息，如当前的环境变量等等。而越来越少的系统工程师会在编写脚本程序的过程中用到这个命令。

综上所述，在编写脚本程序的过程中，echo命令正在逐渐退出舞台。虽然其具有比较久远的历史，但是由于其功能上、兼容性上的一些缺陷，系统工程师现在很少会采用echo命令来编写脚本程序。但是在脚本程序的运行中，终端中仍然需要输出一些有用的信息。既然系统工程师有这方面的需要，而echo命令又无法真正的满足这个需要。在市场有需求的情况下，就必定会出来一个合用的替代品。Printf命令就在这种背景下应用而生了。

<strong> 二、Printf命令优势分析。</strong>

printf命令也是一个回显命令，使Unix操作系统的外部命令。到目前为止，只有bash shell外壳程序中把这个命令当作内部命令。虽然这有点细小的差异，但是这并不会影响这个命令的兼容性问题。那么这个命令与echo命令相比，具有什么优势呢?为什么这个命令为成为echo命令的最合适的替代品呢?

1、这个命令的兼容性比较高。这个printf命令所采用的字符串格式与c语言程序中的一个同名函数使用的字符串格式一模一样。也就是说，在C语言中也有这么一个printf函数，其所采用的字符串格式是相同的。而众所周知，虽然现在Unix操作系统有不同的版本，其外壳程序也多达四种。但是他们都是通过C语言来开发完成的。所以说，这个Printf命令就可以在当前的Unix操作系统中使用，其可以兼容所有的外壳程序。这是echo命令所无法替代的。由于兼容性比较高，那么在编写脚本程序的时候就不用去判断当前使用的shell到底是哪一种了。这可以节省不少的代码编写，提高脚本程序的开发效率。同时，同一个脚本程序在不同的shell中运行，其最终显示的结果都是一样的。这种兼容性正式系统工程师在编写脚本程序时所追求的。

2、在printf命令中，还可以对输入字符串的内容进行格式化与显示宽度的控制。如%30s，就表示一个字符串格式，并且输出的宽度为30个字符。如果实际的字符超过这个最大宽度的话，超过部分的内容就不会被显示，或者进行分行等等。这个格式化与宽度的控制，在实际工作中非常有用。如可以通过这个功能，格式化显示结果。当显示的结果有多条记录时，还可以让其看起来列与列之间更加的整齐，从而提高显示结果的可读性。另外由于不同的数据类型其显示的格式是不同的。Printf命令还可以根据显示结果的内容不同而采用不同的输出格式。如%f表示输出的格式是浮点数格式，就会以预定义的浮点数格式来显示结果;如%d则表示十进制的整数，就会以十进制的整数来显示结果 。

3、一般来说，printf命令具有echo命令的全部功能。但是有些echo命令无法实现的功能则在echo命令中就有。如在开发一些网络管理工具的时候，需要把十进制的IP地址转换为二进制的数字，以方便进行子网的设计。也就是说，用户输入一个十进制的IP地址，然后再终端输出这个十进制的IP地址所对应的二进制数据。要实现这个功能的话，通过printf命令就可以轻松实现。但是如果采用echo命令的话，则还需要通过其他的命令来完成。这也是为什么许多系统工程师放弃echo命令而采用printf命令的一个重要原因。

另外在使用这个printf命令的时候，需要注意两个问题。

首先，printf命令虽然可是实现大部分的功能，其字符串格式跟C语言中的Printf函数相同。但是其毕竟是Unix操作系统中的一个外部命令，为此其与C语言中的函数使用方法还有很大的不同。笔者以前学过C语言，后来学Unix系统开发的时候，就不怎么适应，老是出错。所以系统工程师在这方面需要注意。根据笔者的了解，与C语言中的Printf函数主要有两个方面的不同。一是其功能没有C语言中的Printf函数那么强。有些在C语言中可以实现的功能，但是在Unix操作系统中的Printf命令却无法实现。故如果系统工程师比较熟悉C语言，而对于Unix操作系统中的Printf命令不怎么熟悉的话，则在使用的过程中需要确认一下这个功能是否在Unix操作系统中也支持。二是在用法上也会有细微的差异。在C语言中，Printf是一个函数。而在给函数传递传输的时候，必须要使用括号;另外各个参数以及各个格式之间必须要利用逗号分割。但是在Unix操作系统中，Printf只是一个命令，不需要使用括号。

其次在使用Printf命令的时候，双引号是可选的。也就是说，Printf “abcd” 与 Printf abcd 是等价的。但是笔者建议还是需要加上这个双引号，虽然输入的过程可能麻烦一点。如需要显示的内容是中文的，但是这个双引号则是英文状态下的双引号，需要进行切换。这主要是出于程序的可读性考虑。如果不加双引号的话，则很可能跟其他的参数混合。另外，也有利于系统命令解释器的处理。

具体用法如下：

echo是非常常用的shell命令。参数如下：
<ul>
	<li>-e：打开反斜杠字符backslash-escaped的解析，即对\n，\t等字符进行解析，而不视之为两个字符</li>
	<li>-E：关闭反斜杠字符的解析，\n作为两个字符，这是系统缺省模式</li>
	<li>-n：删除最后的换行</li>
</ul>
backslash-escaped有下面参数，注意需要加上选择-e方可生效。
<blockquote><strong>\a</strong> ： 发出警告铃音（ALERT or CTRL-G (bell)）
<strong>\b</strong> ： 退格（BACKSPACE or CTRL-H ）
<strong>\c</strong> ： 删除最后的字符及最后的换行（Omit final NEWLINE ）
<strong>\e</strong> ： 删除后面的一个字符（Escape character (same as \E) ）
<strong>\E</strong> ： 同上（Escape character）
<strong>\f</strong> ： 换页符，在某些现实中会清屏，有些会换行（FORMFEED or CTRL-L ）
<strong>\n</strong> ： 换行（NEWLINE (not at end of command) or CTRL-J ）
<strong>\r</strong> ： 从行头开始，和换行不一样，仍在本行（RETURN (ENTER) or CTRL-M ）
<strong>\t</strong> ： tab键（TAB or CTRL-I ）
<strong>\v</strong> ： 竖直tab，和\f一样，显示不同机器有所不一样，通常会引起换行VERTICAL TAB or CTRL-K
<strong>\<em>n</em> </strong>： 在cygwin中使用\65，无法正确显示'A’但是下面两种方法否可以显示。ASCII character with octal (base-8) value n, where n is 1 to 3 digits
<strong>\0<em>nnn</em> </strong>： 用8进制的值表示一个字符，例如\0101，即65，表示字符’A’(The eight-bit character whose value is the octal (base-8) value nnn where nnn is 1 to 3 digits )
<strong>\x<em>HH</em> </strong>： 用16进制的值表示一个字符，例如\x41，即65，表示字符’A’The eight-bit character whose value is the hexadecimal (base-16) value HH (one or two digits)
<strong>\\</strong> ： 表示‘\’Single backslash</blockquote>
倒数第2-4，用数值来表示字符和设备相关，通常用于复杂的IO操作，例如光标控制和特殊的图形符号。

<big><strong>printf</strong></big>

Linux提供一个功能更强大，更灵活的打印命令printf。printf和C语言的使用方式类似。和echo不一样，它不会在最后自动加上换行，需要写入命令中。例如printf "Hello, world\n"。printf的命令格式如下：
<blockquote>

printf format-string [arguments]</blockquote>
例子为：printf "%s, %s\n" hello world。如果格式需要的参数比后面给出的多，超出的部分为0或者null。格式如下。
<blockquote>%c：ASCII字符，如果参数给出字符串，则打印第一个字符
%d：10进制整数
%i：同%d
%e：浮点格式（[-]d.精度[+-]dd）
%E：浮点格式（[-]d.精度E[+-]dd）
%f：浮点格式（[-]ddd.precision）
%g：%e或者%f的转换，如果后尾为0，则删除它们
%G：%E或者%f的转换，如果后尾为0，则删除它们
%o：8进制
%s：字符串
%u：非零正整数
%x：十六进制
%X：非零正数，16进制，使用A-F表示10-15
%%：表示字符"%"</blockquote>
如果需要限定输出的宽度，格式为%flags width.precision format-specifier，width是整数，右边对齐，如果需要左边对齐，在前面加“-”，例如"%-20s"表示从左边开始对齐，宽度为20，如果字符串长度少于20，通过空格补齐。precision在浮点值中提供四舍五入。例如%5.6G，长度为5，精度为6。精度是可选的。长度和精度的值可以参数中指定，例如printf "%*.*G\n" 5 6 $myvalue。长度指显示中占的字符长度，与字符长度的同义。如果长度比实际的少，例如实际字符长度更大或者所要求的精度更大，则显示按实际长度。
<blockquote>%d, %I, %o, %u, %x, %X：在里面使用精度，表示最小显示的数字。如果显示的数字比需求少，则补充0。缺省值为1.
%e, %E：在里面使用精度，表示最小显示的数字。如果显示的数字比需求少，在小数点后面补充0。缺省值为10.精度度为0经隐藏小数点。
%f：在这里的精度，表示小数点后面的数字的数目。
%g, %G：这里的精度，表示最大的有效数字的数目。
%s：这里的精度，表示最大的字符数目。</blockquote>
在前面，介绍了”-“作为左对齐，下面介绍这些特殊符号
<blockquote>-：左对齐
space：正数前面加空格，负数前面加符号，例如12.12，|% f|，显示| 12.120000|，注意前面留了一个空格。例如-12.12，|% f|，显示|-12.120000|
+：对于数码给予正负号。
#：给出另一种格式：
<ul>
	<li>%o以8进制显示整数，而%#o则在前面加上零，表明是八进制，例如12，显示014</li>
	<li>%x或者%X以16进制的方式显示整数，而%#x或者%#X，在16进制的整数前面加上0x或者0X来表示，例如12，显示0XC</li>
	<li>%#e,%#E, %#f，将只以十进制显示</li>
	<li>%#g,%#G，将不删除最后无关的补齐0，例如12.1200，将全部显示，而不是12.12。</li>
</ul>
0：对于数目，不使用空格，而使用0来作为补齐。</blockquote>
介绍两个特别的字符显示格式%b和%q。
<blockquote>

%b：表示解析字符串的特殊的字符，包括\n等等。例如printf "%s\n" 'hello\nworld'，显示hello\nworld，要将\n作为换行符，则需要用<strong>printf "%b\n" 'hello\nworld'</strong> 。

%q：printf "%q\n" "greetings to the world"显示为greetings\ to\ the\ world，可以作为shell的输入。</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[在Unix操作系统中可以利用echo与printf两个回显命令来实现。但是到底用哪个命令好呢?笔者先给出一个答案，然后再进行说明。通常情况下，笔者建议操作系统工程师最好使用printf命令，而不是采用echo命令。除非在你原来的程序中就带有很多的echo命令，为了统一性的考虑继续沿用echo命令。一般来说只要是新编写的脚本程序，最好都能够利用printf命令来替代echo命令。]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2010-10-25 21:01:45</wp:post_date>
		<wp:post_date_gmt>2010-10-25 13:01:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>echo%e4%b8%8eprintf%e5%9b%9e%e6%98%be%e5%91%bd%e4%bb%a4%e5%b7%ae%e5%bc%82%e5%88%86%e6%9e%90%e4%b8%8e%e5%ba%94%e7%94%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux-2"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1200]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[hawk198]]></wp:comment_author>
			<wp:comment_author_email>huntof@21cn.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.88.174.202</wp:comment_author_IP>
			<wp:comment_date>2010-11-02 08:44:58</wp:comment_date>
			<wp:comment_date_gmt>2010-11-02 00:44:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[又学习了一招，不过使用printf的话，意味着必须有bash，而在很多情况下，是不允许在系统上安装新软件的，尤其是一些大型服务器，用来玩玩确实没问题，启动更多的bash支持]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.125.40.251</wp:comment_author_IP>
			<wp:comment_date>2010-11-02 14:43:39</wp:comment_date>
			<wp:comment_date_gmt>2010-11-02 06:43:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[貌似你是我的博客的一个回复的，谢谢；呵呵，我们的服务器就比较爽，一般的都装着。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>linux top命令</title>
		<link>http://www.themysql.com/linux/linux-top%e5%91%bd%e4%bb%a4.html</link>
		<pubDate>Tue, 26 Oct 2010 07:02:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=98</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">top命令选项</div>
<div id="_mcePaste">d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之</div>
<div id="_mcePaste">快捷键</div>
<div id="_mcePaste">M 根据驻留内存大小进行排序</div>
<div id="_mcePaste">P 根据CPU使用百分比大小进行</div>
<div id="_mcePaste">c 切换显示命令名称和完整命令行</div>
<div id="_mcePaste">t 切换显示进程和CPU状态信息</div>
<div></div>
<div>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; line-height: 16px; padding: 0px; border: 0px none initial;">top命令中load average显示的是最近1分钟、5分钟和15分钟的系统平均负载。系统平均负载表示</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; line-height: 16px; padding: 0px; border: 0px none initial;">系统平均负载被定义为在特定时间间隔内运行队列中(在CPU上运行或者等待运行多少进程)的平均进程树。如果一个进程满足以下条件则其就会位于运行队列中：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; line-height: 16px; padding: 0px; border: 0px none initial;">- 它没有在等待I/O操作的结果</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; line-height: 16px; padding: 0px; border: 0px none initial;">- 它没有主动进入等待状态(也就是没有调用’wait’)</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; line-height: 16px; padding: 0px; border: 0px none initial;">- 没有被停止(例如：等待终止)<span id="more-654" style="outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; padding: 0px; margin: 0px; border: 0px none initial;"> </span></p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; line-height: 16px; padding: 0px; border: 0px none initial;"><span style="outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #800000; text-decoration: none; vertical-align: baseline; padding: 0px; margin: 0px; border: 0px none initial;">Update：</span>在Linux中，进程分为三种状态，一种是阻塞的进程blocked process，一种是可运行的进程runnable process，另外就是正在运行的进程running process。当进程阻塞时，进程会等待I/O设备的数据或者系统调用。</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; list-style-type: none; list-style-position: initial; list-style-image: initial; font-style: inherit; font-size: 12px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-weight: normal; color: #515151; text-decoration: none; vertical-align: baseline; line-height: 16px; padding: 0px; border: 0px none initial;">进程可运行状态时，它处在一个运行队列run queue中，与其他可运行进程争夺CPU时间。 系统的load是指正在运行running one和准备好运行runnable one的进程的总数。比如现在系统有2个正在运行的进程，3个可运行进程，那么系统的load就是5。load average就是一定时间内的load数量。</p>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[top命令选项
d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之
快捷键
M 根据驻留内存大小进行排序
P 根据CPU使用百分比大小进行
c 切换显示命令名称和完整命令行
t 切换显示进程和CPU状态信息]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2010-10-26 15:02:38</wp:post_date>
		<wp:post_date_gmt>2010-10-26 07:02:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-top%e5%91%bd%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[743]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql5.1.6以上版本支持动态开启慢查询</title>
		<link>http://www.themysql.com/mysql/mysql5-1-6%e4%bb%a5%e4%b8%8a%e7%89%88%e6%9c%ac%e6%94%af%e6%8c%81%e5%8a%a8%e6%80%81%e5%bc%80%e5%90%af%e6%85%a2%e6%9f%a5%e8%af%a2.html</link>
		<pubDate>Fri, 29 Oct 2010 11:54:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">文章转自：<a href="http://hi.baidu.com/timework/blog/item/dafa3f4a4864b2fc83025c5a.html">http://hi.baidu.com/timework/blog/item/dafa3f4a4864b2fc83025c5a.html</a></div>
<div></div>
<div>MySQL在5.0，5.1和6.0版本中还是做出了很多改进，特别是原来一些动不动要重启的操作，慢慢的都可以在线做了，如果要做企业级数据库，在线操作的</div>
<div>支持是必不可少的。</div>
<div id="_mcePaste">MySQL有很多种日志，包括error log，general query log，binary log，slow query log等。在以前的版本，这些日志的开启或者关闭，都是需要重启服务器的，而且都是记录到日志文件。从MySQL5.1.6版开始，general query log和slow query log开始支持写到文件或者数据库表两种方式，并且日志的开启，输出方式的修改，都可以在Global级别动态修改。</div>
<div id="_mcePaste">如果说日志是写到文件还是表，对我们来说不是那么在乎的话，那么可以动态的开启关闭日志真的可以说是梦寐以求的。特别是slow log query，以前一直在头疼，开启吧，可能影响性能，不开吧，对于一些性能差的SQL又没有其他好用的捕获方式。因为开还是不开，涉及到重启服务的问题。</div>
<div id="_mcePaste">如果设置log_output=table的话，则日志结果会记录到名为gengera_log和slow_log的两张表中，这两张表的默认引擎都是CSV，其实就是将日志保存为CSV文件格式了。当然，也可以将这两张表改为MyISAM引擎</div>
<div id="_mcePaste">Control the slow query log as follows:</div>
<div id="_mcePaste">Before 5.1.6, the slow query log destination is always a file. To enable the log, start mysqld with the --log-slow-queries[=file_name] option.</div>
<div id="_mcePaste">As of MySQL 5.1.6, the destination can be a file or a table, or both. Start mysqld with the --log-slow-queries[=file_name] option to enable the slow query log, and optionally use --log-output to specify the log destination (as described in Section 5.2.1, “Selecting General Query and Slow Query Log Output Destinations”).</div>
<div id="_mcePaste">As of MySQL 5.1.12, as an alternative to --log-slow-queries, use --slow_query_log[={0|1}] to specify the initial slow query log state. In this case, the default slow query log file name is used. With no argument or an argument of 1, --slow_query_log enables the log. With an argument of 0, this option disables the log.</div>
<div id="_mcePaste">As of MySQL 5.1.29, use --slow_query_log[={0|1}] to enable or disable the slow query log, and optionally --slow_query_log_file=file_name to specify a log file name. The --log-slow-queries option is deprecated.</div>
<div id="_mcePaste">不解的slow log配置。。。。。</div>
<div id="_mcePaste">1：首先配置如下</div>
<div id="_mcePaste">log_slow_queries    = /var/log/mysql/mysql-slow.log</div>
<div id="_mcePaste">long_query_time = 2</div>
<div id="_mcePaste">log-queries-not-using-indexes</div>
<div id="_mcePaste">有如下警告</div>
<div id="_mcePaste">100510   2:42:59 [Warning] '--log_slow_queries' is deprecated and will be removed in a future release. Please use ''--slow_query_log'/'--slow_query_log_file'' instead.</div>
<div id="_mcePaste">2：这次把log_slow_queries 换成slow_query_log</div>
<div id="_mcePaste">slow_query_log       = /var/log/mysql/mysql-slow.log</div>
<div id="_mcePaste">long_query_time = 2</div>
<div id="_mcePaste">log-queries-not-using-indexes</div>
<div id="_mcePaste">换成slow_query_log，也有警告</div>
<div id="_mcePaste">100510   2:45:30 [Warning] options --log-slow-admin-statements, --log-queries-not-using-indexes and --log-slow-slave-statements have no effect if --log_slow_queries is not set</div>
<div id="_mcePaste">这样就让我疑惑，改了slow_query_log ，log-queries-not-using-indexes为什么会报错呢，难道是log-queries-not-using-indexes与log_slow_queries 绑定了？</div>
<div id="_mcePaste">其实不然，后仔细阅读手册</div>
<div id="_mcePaste">As of MySQL 5.1.29, use --slow_query_log[={0|1}] to enable or disable the slow query log, and optionally --slow_query_log_file=file_name to specify a log file name. The --log-slow-queries option is deprecated</div>
<div id="_mcePaste">后把配置改为如下：</div>
<div id="_mcePaste">slow_query_log=1</div>
<div id="_mcePaste">slow_query_log_file = /var/log/mysql/mysql-slow.log</div>
<div id="_mcePaste">long_query_time = 2</div>
<div id="_mcePaste">log-queries-not-using-indexes</div>
<div id="_mcePaste">警告消除</div>
MySQL在5.0，5.1和6.0版本中还是做出了很多改进，特别是原来一些动不动要重启的操作，慢慢的都可以在线做了，如果要做企业级数据库，在线操作的支持是必不可少的。MySQL有很多种日志，包括error log，general query log，binary log，slow query log等。在以前的版本，这些日志的开启或者关闭，都是需要重启服务器的，而且都是记录到日志文件。从MySQL5.1.6版开始，general query log和slow query log开始支持写到文件或者数据库表两种方式，并且日志的开启，输出方式的修改，都可以在Global级别动态修改。如果说日志是写到文件还是表，对我们来说不是那么在乎的话，那么可以动态的开启关闭日志真的可以说是梦寐以求的。特别是slow log query，以前一直在头疼，开启吧，可能影响性能，不开吧，对于一些性能差的SQL又没有其他好用的捕获方式。因为开还是不开，涉及到重启服务的问题。如果设置log_output=table的话，则日志结果会记录到名为gengera_log和slow_log的两张表中，这两张表的默认引擎都是CSV，其实就是将日志保存为CSV文件格式了。当然，也可以将这两张表改为MyISAM引擎
Control the slow query log as follows:
Before 5.1.6, the slow query log destination is always a file. To enable the log, start mysqld with the --log-slow-queries[=file_name] option.
As of MySQL 5.1.6, the destination can be a file or a table, or both. Start mysqld with the --log-slow-queries[=file_name] option to enable the slow query log, and optionally use --log-output to specify the log destination (as described in Section 5.2.1, “Selecting General Query and Slow Query Log Output Destinations”).
As of MySQL 5.1.12, as an alternative to --log-slow-queries, use --slow_query_log[={0|1}] to specify the initial slow query log state. In this case, the default slow query log file name is used. With no argument or an argument of 1, --slow_query_log enables the log. With an argument of 0, this option disables the log.
As of MySQL 5.1.29, use --slow_query_log[={0|1}] to enable or disable the slow query log, and optionally --slow_query_log_file=file_name to specify a log file name. The --log-slow-queries option is deprecated.
不解的slow log配置。。。。。
1：首先配置如下log_slow_queries    = /var/log/mysql/mysql-slow.loglong_query_time = 2log-queries-not-using-indexes
有如下警告
100510   2:42:59 [Warning] '--log_slow_queries' is deprecated and will be removed in a future release. Please use ''--slow_query_log'/'--slow_query_log_file'' instead.

2：这次把log_slow_queries 换成slow_query_logslow_query_log       = /var/log/mysql/mysql-slow.loglong_query_time = 2log-queries-not-using-indexes
换成slow_query_log，也有警告100510   2:45:30 [Warning] options --log-slow-admin-statements, --log-queries-not-using-indexes and --log-slow-slave-statements have no effect if --log_slow_queries is not set

这样就让我疑惑，改了slow_query_log ，log-queries-not-using-indexes为什么会报错呢，难道是log-queries-not-using-indexes与log_slow_queries 绑定了？其实不然，后仔细阅读手册
As of MySQL 5.1.29, use --slow_query_log[={0|1}] to enable or disable the slow query log, and optionally --slow_query_log_file=file_name to specify a log file name. The --log-slow-queries option is deprecated后把配置改为如下：slow_query_log=1slow_query_log_file = /var/log/mysql/mysql-slow.loglong_query_time = 2log-queries-not-using-indexes
警告消除]]></content:encoded>
		<excerpt:encoded><![CDATA[MySQL在5.0，5.1和6.0版本中还是做出了很多改进，特别是原来一些动不动要重启的操作，慢慢的都可以在线做了，如果要做企业级数据库，在线操作的支持是必不可少的。
MySQL有很多种日志，包括error log，general query log，binary log，slow query log等。在以前的版本，这些日志的开启或者关闭，都是需要重启服务器的，而且都是记录到日志文件。从MySQL5.1.6版开始，general query log和slow query log开始支持写到文件或者数据库表两种方式，并且日志的开启，输出方式的修改，都可以在Global级别动态修改。
如果说日志是写到文件还是表，对我们来说不是那么在乎的话，那么可以动态的开启关闭日志真的可以说是梦寐以求的。特别是slow log query，以前一直在头疼，开启吧，可能影响性能，不开吧，对于一些性能差的SQL又没有其他好用的捕获方式。因为开还是不开，涉及到重启服务的问题。]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2010-10-29 19:54:38</wp:post_date>
		<wp:post_date_gmt>2010-10-29 11:54:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql5-1-6%e4%bb%a5%e4%b8%8a%e7%89%88%e6%9c%ac%e6%94%af%e6%8c%81%e5%8a%a8%e6%80%81%e5%bc%80%e5%90%af%e6%85%a2%e6%9f%a5%e8%af%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1048]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何在多服务器之间共享auto_increment id</title>
		<link>http://www.themysql.com/mysql/%e5%a6%82%e4%bd%95%e5%9c%a8%e5%a4%9a%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b9%8b%e9%97%b4%e5%85%b1%e4%ba%abauto_increment-id.html</link>
		<pubDate>Mon, 01 Nov 2010 14:33:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[Morgan Tocker对多种做法进行了一个测试，<a href="http://www.mysqlperformanceblog.com/2010/10/26/sharing-an-auto_increment-value-across-multiple-mysql-tables-revisited/">详细的测试结论</a>，<a href="http://www.mysqlperformanceblog.com/wpcontent/uploads/2010/10/fulldisclosure.txt">详细的测试代码</a>，推荐使用下面两种方式之一：

第一种：
<pre>CREATE TABLE option1 (id int not null primary key auto_increment) engine=innodb;
# each insert does one operations to get the value:
INSERT INTO option1 VALUES (NULL);
# $connection-&gt;insert_id();</pre>
第二种：
<pre><code>CREATE TABLE `Tickets64` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `stub` char(1) NOT NULL default '',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `stub` (`stub`)
) ENGINE=MyISAM
REPLACE INTO Tickets64 (stub) VALUES ('a');
SELECT LAST_INSERT_ID();</code></pre>
flickr采用了第二种方式，并且也发表一篇<a href="http://code.flickr.com/blog/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/">日志</a>，详细论述了其他的方案的缺陷包括第一种。
<div>针对flickr的日志进行简要意译，因为数据量庞大，然后对大表进行了切分，但是切分之后又属于同一个逻辑表，因此需要在多个表或者库之间共享auto_increment id，保证id的全局唯一性。使用GUID虽然可以保证唯一性，但是因为GUID太大，索引的效率等等会受到影响，因此这种方法不可取；使用方法1，使用一个全局的表来保存auto_increment id，使用这种方法当插入频繁的时候改表会增长的非常迅速，因此需要对它进行维护；使用方法2则可以避免这种维护，而且可以使用master-master结构来保证唯一id的高可用性。当然也可以选择第三方数据库来实现，比如使用PostgreSQL的sequence，但是我个人觉得这个事情其实完全可以用c++写一个服务，前后lock一下，不过高可用性等不太方面，起多个，这个不行了就用另外一个。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[Morgan Tocker对多种做法进行了一个测试，测试的结论详见http://code.flickr.com/blog/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/，推荐使用下面两种方式之一：

第一种：

CREATE TABLE option1 (id int not null primary key auto_increment) engine=innodb;
# each insert does one operations to get the value:
INSERT INTO option1 VALUES (NULL);
# $connection->insert_id();
第二种：
CREATE TABLE `Tickets64` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `stub` char(1) NOT NULL default '',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `stub` (`stub`)
) ENGINE=MyISAM
REPLACE INTO Tickets64 (stub) VALUES ('a');
SELECT LAST_INSERT_ID();]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2010-11-01 22:33:06</wp:post_date>
		<wp:post_date_gmt>2010-11-01 14:33:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a6%82%e4%bd%95%e5%9c%a8%e5%a4%9a%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b9%8b%e9%97%b4%e5%85%b1%e4%ba%abauto_increment-id</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auto_increment"><![CDATA[auto_increment]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="category" nicename="%e5%8e%9f%e5%88%9b"><![CDATA[原创]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql,auto_increment,多个服务器共享auto_increment id]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2087]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.100.38.251</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 09:15:02</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 01:15:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[玄惭]]></wp:comment_author>
			<wp:comment_author_email>luolongjiu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.0.29.227</wp:comment_author_IP>
			<wp:comment_date>2011-04-21 08:34:19</wp:comment_date>
			<wp:comment_date_gmt>2011-04-21 00:34:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我们现在比较成熟的做法是仿照oracle中的sequence，创建一个sequence表[seqence(name,value,step,gmt_modifed)
name表示：序列名字；
value表示：序列当前的值，从1开始，程序取一次步长后增加step值；
step表示：步长值，如1000；
gmt_modified：表示记录更新时间；
程序取序列的逻辑：
得到sequence表中当前value的值start；
更新UPDATE SEQUENCE SET VALUE=VALUE+STEP, GMT_MODIFIED=NOW()
   WHERE NAME=#name# AND VALUE=#start#
更新成功则表示取值成功(1000个)，更新不成功则需要重新查询一次，在更新，直到成功；
这1000个序列值保存到程序内存中，供程序使用
] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.150.202.85</wp:comment_author_IP>
			<wp:comment_date>2011-05-31 00:25:05</wp:comment_date>
			<wp:comment_date_gmt>2011-05-30 16:25:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这种方法确实可以减小id服务器的压力]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>如何快速的成为一个合格的 DBA?</title>
		<link>http://www.themysql.com/mysql/%e5%a6%82%e4%bd%95%e5%bf%ab%e9%80%9f%e7%9a%84%e6%88%90%e4%b8%ba%e4%b8%80%e4%b8%aa%e5%90%88%e6%a0%bc%e7%9a%84-dba.html</link>
		<pubDate>Tue, 02 Nov 2010 13:43:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[转自：<a href="http://topic.csdn.net/u/20101031/21/A78B2EA1-6F2A-43A2-A27E-A4B1B8DC19E7.html">http://topic.csdn.net/u/20101031/21/A78B2EA1-6F2A-43A2-A27E-A4B1B8DC19E7.html</a>，写的非常好，因此copy至此，保留。

今天看到的一个文章 是写oracle的 不过很多对于sql server也是一样的 在此分享
<a href="http://www.eygle.com/archives/2008/11/become_dba_quickly.html" target="_blank">http://www.eygle.com/archives/2008/11/become_dba_quickly.html</a>

如何快速的成为一个合格的Oracle DBA?
作者：eygle |English Version 【转载时请以超链接形式标明文章出处和作者信息及本声明】
链接：http://www.eygle.com/archives/2008/11/become_dba_quickly.html

1.快速有多快？
很多人都喜欢寻找捷径，所以经常问起快速，但是我经常反复告诉大家的是，没有捷径，或者说没有轻而易举的捷径可循。
当然快速两个字也是有意义的，这是这个快速的社会对于年轻人的要求，在《深入解析Oracle》一书的序言中，我写过这样一段话：随着技术以及时代的不断进步，社会留给DBA的成长时间越来越短，一个DBA从入门到成长为资深的时间不会超过2年。。。。张爱玲说过，成名要趁早。做技术的也是如此，成长越早越好，越快越好。

理解快速两个字的涵义，推荐仔细阅读我的《深入解析Oracle》一书序言，这里总结了很多我的学习经验和学习历程：
http://www.eygle.com/archives/2008/11/oracle_internals_preface.html

2.该读什么书?
Oracle方面的书籍无疑已经是汗牛充栋了，那么在杂陈的书籍中，我们该读什么书来入门？该读什么书来深入进阶呢？
我曾经推荐了几本书，并且我的观点是：书不在多，精读则灵。所以，认真细致的阅读对于学习是必不可少的。
等你进入了Oracle的大门，然后怎么阅读，读什么，就完全可以自己把握了。

推荐阅读：书不在多,精读则灵 - Oracle入门书籍推荐
http://www.eygle.com/archives/2006/08/oracle_fundbook_recommand.html

3.如何获得成功?
无疑每个人都热切的期待成功，那么如何才能获得成功？
我曾经总结了一个简单的公式，罗列了我认为及其重要的成功因素：兴趣 + 勤奋 + 坚持 + 方法 ≈ 成功
如果你对数据库感兴趣，由兴趣推动学习，再加上勤奋的努力，坚持不懈的探索，找到合适的方法，那么这就是你的快速学习之路，快速成功之路。

推荐阅读:
http://www.eygle.com/archives/2005/12/what_kind_of_dba_we_need.html

4.三种境界
关于境界，我在多篇文章中都谈到过，最早在《Oracle数据库性能优化》一书的序言中我引用了王国维的三种境界：

古今之成大事业、大学问者，罔不经过三种之境界。
"昨夜西风凋碧树。独上高楼，望尽天涯路。"此第一境界也。
"衣带渐宽终不悔，为伊消得人憔悴。"此第二境界也。
"众里寻他千百度，蓦然回首，那人却在灯火阑珊处。"此第三境界也。

这三种境界分别代表了，打下坚实的基础，不懈的坚持，峰回路转的提升，你在学习过程中，一定会面对这样的阶段和情形，所以要有一定的思想准备，坚持不懈。
推荐阅读：
http://www.eygle.com/archives/2005/08/ecinieoracleouo.html

5.由点及面、深入浅出
在学习方法上，我主张由点及面、深入浅出，在《深入浅出Oracle》一书的序言中，我这样写道：

书中贯彻的也是我一直主张的"由点到线再及面"的学习方法。特别是对于初学者，如果没有经过专门的培训和系统学习，那么自己通过实践的学习和思考就应当深入，在知识上，从某个角度来说，是"不患寡，而患不精深"。在我们遇到问题时，就应该不断深入研究，直至问题的核心本质，这样通过一个案例或实际问题的诊断学习和研究，我们就可以带动很多连带知识的学习，这样从一个点深入下去就形成一条线，再横向扩展就可以形成一个知识网，解决和研究的问题多了，就可以逐渐覆盖一个面，形成一个知识体系，这样慢慢的你就会觉得学习不再困难，而是一件得心应手的事情。

推荐阅读：
http://www.eygle.com/archives/2008/10/sbsoracle_preface.html

6.工作机会
在工作选择上，如果能够快速进入Oracle的领域可能是幸运的，但是如果第一份工作没有找到理想的位置，那么接下来的职业道路可能就会稍微曲折一些。

很多朋友在进行了一段时间的学习之后，对转型迫不及待甚至焦虑不堪，这是不对的，在工作中应当切忌浮躁，我们每个人从毕业到工作、再到找到适合自己的位置，这通常都要经过一个较长的时期，学习、思考、进步、再次出发，所以要知道有时候等待是过程的必须。
如果你手上已经有了一份工作，那你需要做的是，做好它，哪怕那不是你喜欢的！
你必须证明给别人看你有做好一件事情的能力，别人才会给你下一个机会，如果你从来没能很好的完成一项任务，那你应该冷静的反省一下。

对于处在这样境地的朋友们，我有16个字可供借鉴：去除浮躁，认真学习，不断积累，寻找机遇

推荐阅读：
http://www.eygle.com/archives/2008/06/oracle_and_dba.html

7.如何在有限的环境中学习?
很多朋友的工作环境、条件有限，可能没有小型机、可能没有UNIX，那么如何学习和提高呢？
我想说的是不一定要在多大的生产环境里才能锻炼出高手。据我所知很多高手都是从个人的简单环境中学习成长起来的，最重要的是自己学习一定要深入，多思考，多试验。

有朋友说:小库一样练水平。这句话是很有道理的。也有朋友在ITPUB上不断试验和重复别人有价值的试验或测试，说:不是自己的，通过试验动手，变成自己的。也说得非常好。

推荐阅读：
http://www.eygle.com/archives/2006/07/question_answer_of_oracle_study.html

8.DBA日常工作职责 - 我对DBA的七点建议
DBA的工作职责是什么？每天DBA应该做哪些工作？稳定环境中的DBA该如何成长与工作？

这是很多人都曾经提出过的问题，我潦潦草草的、随心所欲的记录一下我的观点和建议，供参考
http://www.eygle.com/archives/2009/02/suggest_dba_job.html]]></content:encoded>
		<excerpt:encoded><![CDATA[古今之成大事业、大学问者，罔不经过三种之境界。
"昨夜西风凋碧树。独上高楼，望尽天涯路。"此第一境界也。
"衣带渐宽终不悔，为伊消得人憔悴。"此第二境界也。
"众里寻他千百度，蓦然回首，那人却在灯火阑珊处。"此第三境界也。]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2010-11-02 21:43:32</wp:post_date>
		<wp:post_date_gmt>2010-11-02 13:43:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a6%82%e4%bd%95%e5%bf%ab%e9%80%9f%e7%9a%84%e6%88%90%e4%b8%ba%e4%b8%80%e4%b8%aa%e5%90%88%e6%a0%bc%e7%9a%84-dba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[922]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3040ff5e8d488715dbb526e495f67483</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4db602539580cd51c5838b91838b5598</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1e5858c6e684fb9daec206def860069e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9f00a94be27421842e93347074207ac2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f2a0e732a2a3f91896798c7bc169c868</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e37fc34c741abaf811674b1edd3b5d4b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_45bf16d034628950444a11889cf595f9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_784a8cfc491dbfe4bb33775c8f7c5365</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f84514917a464cb7ca341d1cc9554725</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2f4fb87bd048bbb38173cd1f5d868f2b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b7f811fe2d549b906f453c0311ef6ed2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5802f48f7f1070b4149776421db5fb51</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b853e6869ca054c3dac9a60301a9797e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_35ede0d393ab4bfd1b36000fef25c52f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_dec53c75c89dfbef650a721b44f1c12d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_029d30aa2554303dfcab13481d4861b5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3aa4b1eb11fd108f887dc69a7b1deb39</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5e0b0438b8f66779180930fed7637ced</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_16e0b42e7c2b81ebde5eea29dbf72ee5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e6a11694e094d6bab34edc045956b580</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6e1fcd8810beee907b316b96126267c0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2f8e957192c5127cfcedc2ded77320e5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d322af3144b5bbaae7a23557fdc6fd9c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_07a617c488906f809495a10e95c214f1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2b5f8bda29a47626e3871c88602de5d7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_35c1ebee108d69116c8594209f77d881</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_538e1ca68f1af9f4d69277c69fae905f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_35bb48337f0344f0f0657ed4d969ea21</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5e397cd89a12e35e84f3598f2a920501</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a1818ebdd88390b1967f638a90b509bb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_44bf3cc4efed1a762bb023a8d8e43edb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_df1e114aa3d4bf546a29d048b4b6ec71</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>古今之成大事业、大学问者，罔不经过三种之境界</title>
		<link>http://www.themysql.com/%e6%9c%aa%e5%88%86%e7%b1%bb/%e5%8f%a4%e4%bb%8a%e4%b9%8b%e6%88%90%e5%a4%a7%e4%ba%8b%e4%b8%9a%e3%80%81%e5%a4%a7%e5%ad%a6%e9%97%ae%e8%80%85%ef%bc%8c%e7%bd%94%e4%b8%8d%e7%bb%8f%e8%bf%87%e4%b8%89%e7%a7%8d%e4%b9%8b%e5%a2%83%e7%95%8c.html</link>
		<pubDate>Tue, 02 Nov 2010 14:06:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[<table border="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td>古今之成大事业、大学问者，罔不经过三种之境界</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td id="msgcns!1pTE5W_J7pj1AzaWm085qO_g!105">
[原文]

《人间词话》之二

王国维

古今之成大事业、大学问者，罔①不经过三种之境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”②此第一境界也。“衣带渐宽终不悔，为伊消得人憔悴。”（欧阳永叔）③此第二境界也。“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”（辛幼安）④此第三境界也。此等语非大词人不能道⑤。然⑥遽⑦以此意解释诸词，恐为晏、欧诸公所不诈⑧也。

[<a name="5"></a>注释]

①罔：无，没有。

②诗出自宋代词人晏殊词《蝶恋花》。诗句的意思是：昨夜一夜西风，碧树尽凋，西风肃杀。独自登上高楼，凭栏远望，不见斯人，百感交集，无限惆怅。王国维引此三句诗来描述古今成大事业、大学问者的第一境界，与原意已不相关，只是借题发挥，但却别有新意。

③诗出自宋代词人柳永词《蝶恋花》。欧阳永叔，即欧阳修。其字永叔，号醉翁，晚号六一居士。这里，王国维将柳永误为欧阳修了。诗句的意思是：为了她，为了那份相思，我即使面容憔悴，瘦骨伶仃，也是值得的，也决不后悔。王国维借此二句诗来谈古今成大事业、大学问者的第二境界，显然已超乎原诗相思怀人的情绪了。

④诗出自宋代词人<a name="2"></a>辛弃疾词《<a name="0"></a>青玉案?元夕》。诗句的意思是：元灯节上，如云的美女都不是我所关注之人，我在千百人群中寻找她，却总是芳容难觅。突然，我眼前一亮，发现那一角残灯旁边，她终于出现了。原来，她在那冷清的地方还未归去，还似有所待啊！王国维借此三句诗来谈古今立业、治学的第三境界，已远非原诗的意境了。诗句中的他，即她。辛幼安，即辛弃疾，其字幼安，号稼轩。

⑤道：说。⑥然：但是。⑦遽：匆忙，急。这里作草率讲。

⑧不诈：诈，欺骗。不诈，这里是不赞同或不同意的意思。

[今译]

古今那些成就大事业、大学问的人，没有哪一个不是经历过三种境界的：“昨夜西风凋碧树。独上高楼，望尽天涯路。”这是第一种境界。“衣带渐宽终不悔，为伊消得人憔悴。”这是第二种境界。“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”这是第三种境界。这些话不是大词人是讲不出来的。但是就草率地凭这个意思去解释各种词，恐怕晏殊、欧阳修等人也不会同意吧。

[赏析]

这是著名国学大师王国维在其《人间词话》一书中关于古今成大事业、大学问者立业、治学三境界的论述，极富真知灼见。第一种境界讲的是成就大事业、大学问者入门前表现出来的茫无头绪，不知所措，求学无门的疑惑、彷徨和痛苦。第二种境界则讲的是他们孜孜不倦、坚持不懈，叩打学门时上下求索，攀登书山时以勤为径，泛舟学海时将苦作舟的勤奋、执著与坚韧。而第三种境界讲的则是这些人功夫到处，灵犀相通，炉火纯青，畅游学海胜似闲庭信步，漫步书山能悟其中真谛的怡然自乐和欣喜恬适。王国维谈成就事业，谈做学问真是高屋建瓴，鞭辟入里啊！其深刻幽邃岂非仅限于词话？！

这里，我们不能不佩服王国维先生的睿智和才思，不能不赞叹其国学之精深，见解之独特。世间做事业、做学问者如果都能深深了悟这立业为学的三境界，不要未上高楼就叹息止步，鸣金收兵，败下阵来。要坚韧不拔，敢于傲视苍穹，敢于“为伊消得人憔悴”，才能领略到“回头蓦见，那人正在灯火阑珊处”的奇瑰意境，才能感受到“无限风光在险峰”的高妙旨趣。

文章主要引名诗句以支撑自己的观点，言简意赅，言约意丰，意近旨远，宏论精深，很有力量。可谓诗论词话之精典。

转自：<a href="http://armiyi.bokee.com/3685847.html">http://armiyi.bokee.com/3685847.html</a>

“衣带渐宽终不悔，为伊消得人憔悴。”

这句话摘自我国近代一位国学大师“王国维”的《人间词话》——

古今之成大事业、大学问者，罔不经过三种之境界：

“昨夜西风凋碧树。独上高楼，望尽天涯路。”此第一境界也。

“衣带渐宽终不悔，为伊消得人憔悴。”此第二境界也。

“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”此第三境界也。

此等语皆非大词人不能道。然遽以此意解释诸词，恐为晏、欧诸公所不许也。

这段话的翻译成白话文就是——

古今那些成就大事业、大学问的人，没有哪一个不是经历过三种境界的：

“昨夜西风凋碧树。独上高楼，望尽天涯路。”这是第一种境界。

“衣带渐宽终不悔，为伊消得人憔悴。”这是第二种境界。

“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”这是第三种境界。

这些话不是大词人是讲不出来的，但是草率地就诗句的意思去解释各种词，恐怕晏殊、欧阳修等人也不会同意吧。

这是对古今成大事业、大学问者立业、治学过程中三种境界的论述，极富真知灼见。第一种境界讲的是成就大事业、大学问者入门前表现出来的茫无头绪，不知所措，求学无门的疑惑、彷徨和痛苦。第二种境界则讲的是他们孜孜不倦、坚持不懈，叩打学门时上下求索，攀登书山时以勤为径，泛舟学海时将苦作舟的勤奋、执著与坚韧。而第三种境界讲的则是这些人功夫到家，灵犀相通，炉火纯青，畅游学海胜似闲庭信步，漫步书山能悟其中真谛的怡然自乐和欣喜恬适。

这三种境界不只是针对学术研究或艺术创造的历程，实际上也是对人生奋斗过程的综述与总括，把本不相干的这三句名言连缀成“三重境界”之说，将历史上无数大事业家、大学问家成功的秘密结晶于文学意象之中。

第一境界“昨夜西风凋碧树。独上高楼，望尽天涯路。”原本出自晏殊的《蝶恋花》：

槛菊愁烟兰泣露，罗幕轻寒，燕子双飞去。

明月不谙离恨苦，斜光到晓穿朱户。

昨夜西凤凋碧树，独上高楼，望尽天涯路。

欲寄彩笼兼尺素，山长水阔知何处!

诗句的意思是：昨天晚上，猛烈的西风刮来，碧绿的树上，一片一片树叶凋落，有一点迷茫，有一点凄凉。独自登上高楼，凭栏远望，不见斯人，百感交集，而无限惆怅。

这一境界以西风刮得树叶凋谢，表示出当前形势的恶劣，而只有能爬上高楼，居高临下、高瞻远瞩，看到远方看到天尽头，看到别人看不到的地方，才能排除干扰，不为暂时的烟雾所迷惑，才能看到形势发展的主要方向，才能取得成功的基础。这一境界是对立志、下决心的真是写照，只有具备了这个条件才会有第二、第三境界。

第二种境界“衣带渐宽终不悔,为伊消得人憔悴”出自柳永的《蝶恋花》 ：

伫倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭栏意。

拟把疏狂图一醉，对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。

意思是：为了她，为了那份相思，我即使面容憔悴，瘦骨伶仃，也是值得的，也决不后悔。王国维借此诗句来谈古今成大事业、大学问者的第二境界，显然已超乎原诗相思怀人的情怀了。

这一境界描述了为人生理想而努力奋斗的过程，一种执着地在既定的道路上坚定不移地追求真理，而为之“不悔”，而为之“憔悴”的过程，不仅有躯体上的苦乏，更有心志上的锤炼。人瘦了、憔悴了，但仍“终不悔”。尽管遇到各式各样的困难，还要坚持奋斗，继续前进，为了追求，所有的一切都将在所不惜。这是一种执着追求，忘我奋斗的历程。

第三种境界“众里寻他千百度，蓦然回首，那人却在灯火阑珊处”出自辛弃疾的《青玉案》 ：

东风夜放花千树，更吹落、星如雨。

宝马雕车香满路。

凤萧声动，玉壶光转，一夜鱼龙舞。

峨儿雪柳黄金缕，笑语盈盈暗香去。

众里寻他千百度，蓦然回首，那人却在灯火阑珊处。

意思是：元灯节上，如云的美女都不是我所关注之人，我在千百人群中寻找她，却总是芳容难觅。突然，我眼前一亮，发现那一角残灯旁边，她终于出现了。原来，她在那冷清的地方还未归去，似有所待啊！王国维借此三句诗来谈古今立业、治学的第三境界，已远非原诗的意境了。

这一境界指在经过多次周折，经过多年的磨练之后，就会逐渐成熟起来，别人看不到东西能明察秋毫，别人不理解的事物能豁然的领悟惯通，就会功到事成。这是用血汗浇灌出来的鲜花，是用毕生精力铸造的大厦。换言之，寻找到真正自己要走的道路，加上执着地追求，历经千辛万苦，最终豁然开朗，求得“真”与“是”，从而将自己的发现汇入真理之长河中，这是何等的欣慰！

然而世间也有不经过自己努力就成功的，那是少有的，偶然的，不可靠的。机遇是存在的，但要能认识到它并且及时抓住它，既使这样，成功还得通过努力奋斗。路都是人走出来的，人生不会处处有绿灯。

人生路上，我们须深深领悟这三种境界，以免未上高楼就叹息止步。只有坚韧不拔，敢于傲视苍穹，敢于“为伊消得人憔悴”，才能领略到“回头蓦见，那人正在灯火阑珊处”的奇瑰意境，才能感受到“无限风光在险峰”的高妙旨趣。

转自：<a href="http://blog.163.com/xql333@126/blog/static/68615155200861191734813/">http://blog.163.com/xql333@126/blog/static/68615155200861191734813/</a></td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[古今那些成就大事业、大学问的人，没有哪一个不是经历过三种境界的：“昨夜西风凋碧树。独上高楼，望尽天涯路。”这是第一种境界。“衣带渐宽终不悔，为伊消得人憔悴。”这是第二种境界。“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”这是第三种境界。这些话不是大词人是讲不出来的。但是就草率地凭这个意思去解释各种词，恐怕晏殊、欧阳修等人也不会同意吧。]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2010-11-02 22:06:20</wp:post_date>
		<wp:post_date_gmt>2010-11-02 14:06:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%a4%e4%bb%8a%e4%b9%8b%e6%88%90%e5%a4%a7%e4%ba%8b%e4%b8%9a%e3%80%81%e5%a4%a7%e5%ad%a6%e9%97%ae%e8%80%85%ef%bc%8c%e7%bd%94%e4%b8%8d%e7%bb%8f%e8%bf%87%e4%b8%89%e7%a7%8d%e4%b9%8b%e5%a2%83%e7%95%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[752]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用innobackupex进行备份</title>
		<link>http://www.themysql.com/mysql/%e4%bd%bf%e7%94%a8innobackupex%e8%bf%9b%e8%a1%8c%e5%a4%87%e4%bb%bd.html</link>
		<pubDate>Fri, 05 Nov 2010 02:55:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">
<div id="_mcePaste">安装xtrabackup会自动安装innobackupex，innobackupex是使用perl包装的xtrabackup，下面是一些使用心得，仍然有几个问题没有解决：</div>
<div id="_mcePaste">①如何可以避免使用tar，因为如果需要备份的数据特别大的时候，使用tar解压需要很久</div>
<div id="_mcePaste">②nc的-d选项为什么会对nc的传输产生影响</div>
<div id="_mcePaste">nc需要加上-d选项，否则会出现截断现象，详细见(未解决)</div>
<div id="_mcePaste">http://topic.csdn.net/u/20101102/19/8e641dae-d4e1-45c6-8e6f-14b67b9500b0.html?56071</div>
<div id="_mcePaste">ssh root@host_name "( nc -d -l 80 &gt; /data/backup.tar 2&gt;/dev/null &amp;)" &amp;&amp; innobackupex-1.5.1 --throttle=500 --user=root --password=XXXXX --stream=tar --slave-info ./ |  nc host_name 80</div>
<div id="_mcePaste">出现下面的问题</div>
<div id="_mcePaste">innobackupex-1.5.1: Created backup directory /root</div>
<div id="_mcePaste">innobackupex-1.5.1: Error: Failed to stream 'backup-my.cnf': Inappropriate ioctl for device at /usr/bin/innobackupex-1.5.1 line 479.</div>
<div id="_mcePaste">当我把./改成/data时就ok了</div>
<div id="_mcePaste">ssh root@host_name "( nc -d -l 80 &gt; /data/backup.tar 2&gt;/dev/null &amp;)" &amp;&amp; innobackupex-1.5.1 --throttle=500 --user=root --password=XXXXX --stream=tar --slave-info /data |  nc host_name 80</div>
<div id="_mcePaste">innobackupex-1.5.1 –user=root –password=123 –stream=tar /u01/backup/2/ 2&gt;/u01/backup/2.log 1&gt;/u01/backup/2/2.tar</div>
<div id="_mcePaste">大约2分55秒。这里使用1&gt;做标准输出重定向。</div>
<div id="_mcePaste">innobackupex-1.5.1 –user=root –password=123 /u01/backup/1/innobackup/ 2&gt;/u01/backup/1/1.log</div>
<div id="_mcePaste">是将备份过程中的输出信息重定向到1.log</div>
<div id="_mcePaste">备份完成之后，需要执行两次prepare操作</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[安装xtrabackup会自动安装innobackupex，innobackupex是使用perl包装的xtrabackup，下面是一些使用心得，仍然有几个问题没有解决：
①如何可以避免使用tar，因为如果需要备份的数据特别大的时候，使用tar解压需要很久
②nc的-d选项为什么会对nc的传输产生影响
nc需要加上-d选项，否则会出现截断现象，详细见(未解决)]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2010-11-05 10:55:53</wp:post_date>
		<wp:post_date_gmt>2010-11-05 02:55:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8innobackupex%e8%bf%9b%e8%a1%8c%e5%a4%87%e4%bb%bd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="innobackupex"><![CDATA[innobackupex]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="percona"><![CDATA[Percona]]></category>
		<category domain="category" nicename="%e5%8e%9f%e5%88%9b"><![CDATA[原创]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%ae%8c%e5%be%85%e7%bb%ad"><![CDATA[未完待续]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql中如何删除重复数据实践版</title>
		<link>http://www.themysql.com/mysql/mysql%e4%b8%ad%e5%a6%82%e4%bd%95%e5%88%a0%e9%99%a4%e9%87%8d%e5%a4%8d%e6%95%b0%e6%8d%ae%e5%ae%9e%e8%b7%b5%e7%89%88.html</link>
		<pubDate>Thu, 11 Nov 2010 09:22:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[伟哥上次分享了一篇日志：<a href="http://share.renren.com/share/GetShare.do?id=3954401382&amp;owner=248128351&amp;ref=minifeed&amp;sfet=107&amp;fin=16&amp;ff_id=248128351">http://share.renren.com/share/GetShare.do?id=3954401382&amp;owner=248128351&amp;ref=minifeed&amp;sfet=107&amp;fin=16&amp;ff_id=248128351</a>

关于如何查找、删除mysql数据中的重复数据，我刚好有个机会实践了一下，按照那篇文章进行实践了一下，有问题，但是思路没有问题，下面是一个测试的过程，比较绕，凑合着看吧，我勒个去，我的日志排版太难搞了。

mysql@test.db.test&gt;create table a (id int auto_increment not null primary key,value int);

Query OK, 0 rows affected (0.01 sec)
mysql@test.db.test&gt;insert into a(value) values(1),(1),(2),(2),(3),(3),(4),(5);

Query OK, 8 rows affected (0.00 sec)Records: 8  Duplicates: 0  Warnings: 0
mysql@test.db.test&gt;select * from a;

+----+-------+| id | value |+----+-------+|  1 |     1 | |  2 |     1 | |  3 |     2 | |  4 |     2 | |  5 |     3 | |  6 |     3 | |  7 |     4 | |  8 |     5 | +----+-------+8 rows in set (0.00 sec)
mysql@test.db.test&gt;delete from a where value in (select value from a group by value having count(value)&gt;1) and id not in (select min(id) from a group by value having count(value)&gt;1);

ERROR 1093 (HY000): You can't specify target table 'a' for update in FROM clause

mysql@test.db.test&gt;delete from a where value in (select value from (select value from a group by value having count(value)&gt;1)) and id not in ( select min from (select min(id) as min from a group by value having count(value)&gt;1));

ERROR 1248 (42000): Every derived table must have its own alias
mysql@test.db.test&gt;delete from a where value in (select value from (select value from a group by value having count(value)&gt;1) as t1)  and id not in ( select min from (select min(id) as min from a group by value having count(value)&gt;1) as t2);

Query OK, 3 rows affected (0.00 sec)
mysql@test.db.test&gt;select * from a;+----+-------+| id | value |+----+-------+|  1 |     1 | |  3 |     2 | |  5 |     3 | |  7 |     4 | |  8 |     5 | +----+-------+5 rows in set (0.00 sec)]]></content:encoded>
		<excerpt:encoded><![CDATA[伟哥上次分享了一篇日志：http://share.renren.com/share/GetShare.do?id=3954401382&owner=248128351&ref=minifeed&sfet=107&fin=16&ff_id=248128351

关于如何查找、删除mysql数据中的重复数据，我刚好有个机会实践了一下，按照那篇文章进行实践了一下，有问题，但是思路没有问题，下面是一个测试的过程，比较绕，凑合着看吧，我勒个去，我的日志排版太难搞了。]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2010-11-11 17:22:07</wp:post_date>
		<wp:post_date_gmt>2010-11-11 09:22:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e4%b8%ad%e5%a6%82%e4%bd%95%e5%88%a0%e9%99%a4%e9%87%8d%e5%a4%8d%e6%95%b0%e6%8d%ae%e5%ae%9e%e8%b7%b5%e7%89%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1781]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql where子句中的默认类型转化</title>
		<link>http://www.themysql.com/mysql/mysql-where%e5%ad%90%e5%8f%a5%e4%b8%ad%e7%9a%84%e9%bb%98%e8%ae%a4%e7%b1%bb%e5%9e%8b%e8%bd%ac%e5%8c%96.html</link>
		<pubDate>Mon, 15 Nov 2010 13:59:11 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[别人碰到了一个问题，然后我闲来无事对这个问题了进行了刨根问底。
<code>
CREATE TABLE `table1` (
`id` varchar(20) collate utf8_bin NOT NULL default '',
`from` varchar(128) collate utf8_bin NOT NULL default '',
`time` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
PRIMARY KEY  (`id`),
KEY `id_source` (`id`,`from`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin
</code>
针对上面的表，有一个很简单的语句select id, from from table1 where id=325381768;执行居然花费了40多秒钟，有人会奇怪为什么id用varchar，这个是历史原因，这篇日志主要是为了从根本上说明这条sql为什么会慢。
<code>
xxx.host/fb&gt;explain select id, from from table1 where id=325381768;
+----+-------------+-----------------+-------+-------------------+-----------+---------+------+----------+--------------------------+
| id | select_type | table           | type  | possible_keys     | key       | key_len | ref  | rows     | Extra                    |
+----+-------------+-----------------+-------+-------------------+-----------+---------+------+----------+--------------------------+
|  1 | SIMPLE      | reg_from | index | PRIMARY,id_source | id_source | 448     | NULL | **** | Using where; Using index |
+----+-------------+-----------------+-------+-------------------+-----------+---------+------+----------+--------------------------+
1 row in set (0.00 sec)
</code>
虽然explain的结果是使用到了索引，但是结果执行结果确时间很长。
<code>
xxx.host/fb&gt;select id, from from table1  where cast(id as signed)=325381768;
+-----------+-------------+
| id        | from |
+-----------+-------------+
| 325381768 | S_SCREG;    |
+-----------+-------------+
1 row in set (51.81 sec)</code>

<code> </code>

<code>xxx.host/fb&gt;select id, from from table1  where id=cast(325381768 as char);
+-----------+-------------+
| id        | from |
+-----------+-------------+
| 325381768 | S_SCREG;    |
+-----------+-------------+
1 row in set (0.00 sec)
</code>
从上面这个对比试验中可以看出，mysql是将id默认转化成了int型，然后才进行的比较，问题的症结就在这里，因为进行了转化操作所以就不能再使用索引了，那为什么explain的结果仍然是使用了索引，因为索引中包含了需要select出来的两个字段，因此mysql query优化器就选择了使用id_source索引。

通过观察Handler_read_first的状态值就可以确认mysql对id_source索引进行了一个full scan。
<code>
xxx.host/fb&gt;show status like "Handler_read_first";
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| Handler_read_first | 2     |
+--------------------+-------+
1 row in set (0.02 sec)</code>

<code>xxx.host/fb&gt;select id, from from table1  where id=325381768;
+-----------+-------------+
| id        | from |
+-----------+-------------+
| 325381768 | S_SCREG;    |
+-----------+-------------+
1 row in set (43.02 sec)

</code>

<code>xxx.host/fb&gt;show status like "Handler_read_first";
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| Handler_read_first | 3     |
+--------------------+-------+
1 row in set (0.02 sec)
</code>
最后必须落脚于文档，在文档里面找到“Comparison operations result in a value of 1 (TRUE), 0 (FALSE), or NULL. These operations work for both numbers and strings. Strings are automatically converted to numbers and numbers to strings as necessary.”证实了上面的猜测。
文档地址：http://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#operator_equal]]></content:encoded>
		<excerpt:encoded><![CDATA[别人碰到了一个问题，然后我闲来无事对这个问题了进行了刨根问底。最后再文档里面找到了Comparison operations，Strings are automatically converted to numbers。]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2010-11-15 21:59:11</wp:post_date>
		<wp:post_date_gmt>2010-11-15 13:59:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-where%e5%ad%90%e5%8f%a5%e4%b8%ad%e7%9a%84%e9%bb%98%e8%ae%a4%e7%b1%bb%e5%9e%8b%e8%bd%ac%e5%8c%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="category" nicename="%e5%8e%9f%e5%88%9b"><![CDATA[原创]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql,Handler_read_first]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[942]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>InnoDB Tablespaces 表空间</title>
		<link>http://www.themysql.com/mysql/innodb-tablespaces-%e8%a1%a8%e7%a9%ba%e9%97%b4.html</link>
		<pubDate>Sun, 21 Nov 2010 12:08:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[文章转自：<a href="http://www.linbuluo.com/?p=91">http://www.linbuluo.com/?p=91</a>

<strong>A tablespace consists of multiple files and/or raw disk partitions.</strong>

(注：如果<strong>innodb</strong>设置成共享表空间，则所有的<strong>元数据</strong>，表数据，索引数据，及事务的undo数据都存放在同一个表空间(一个或多个数据文件)；

也可设置成独享表空间，每个表的数据和索引存放在一个单独的.ibd文件中，该文件包括每个表的表数据，索引数据和事务undo数据)
file_name:file_size[:autoextend[:max:max_file_size]]
• A file/partition is a collection of segments.
• A segment consists of fixed-length pages.
• The page size is always 16KB in uncompressed tablespaces, and 1KB-16KB in compressed tablespaces (for both data and index).

<a href="http://www.themysql.com/wp-content/uploads/2010/11/innodb_tablespace.jpg"><img class="alignnone size-medium wp-image-129" title="innodb_tablespace" src="http://www.themysql.com/wp-content/uploads/2010/11/innodb_tablespace-300x215.jpg" alt="" width="300" height="215" /></a>

from:《InnoDB Internals: InnoDB File Formats and Source Code Structure》

下面这段来自mysql fm。from:<a href="http://dev.mysql.com/doc/refman/5.0/en/innodb-file-space.html" target="_blank">http://dev.mysql.com/doc/refman/5.0/en/innodb-file-space.html</a>

<a name="innodb-file-space"></a>13.2.11.2. File Space Management

The data files that you define in the configuration file form the <code>InnoDB</code> tablespace. The files （innodb_data_file_path=ibdata1:1G;ibdata2:1G;ibdata3:1G;ibdata4:1G;ibdata5:1G ）are logically concatenated to form the tablespace. There is no striping in use. Currently, you cannot define where within the tablespace your tables are allocated. However, in a newly created tablespace, <code>InnoDB</code> allocates space starting from the first data file.

The tablespace consists of database pages with a default size of 16KB. The pages are grouped into extents of size 1MB (64 consecutive pages). The “files” inside a tablespace are called <em>segments</em> in <code>InnoDB</code>. The term “rollback segment” is somewhat confusing because it actually contains many tablespace segments.

When a segment grows inside the tablespace, <code>InnoDB</code> allocates the first 32 pages to it individually. After that,<code>InnoDB</code> starts to allocate whole extents to the segment. <code>InnoDB</code> can add up to 4 extents at a time to a large segment to ensure good sequentiality of data.

Two segments are allocated for each index in <code>InnoDB</code>. One is for nonleaf nodes of the B-tree, the other is for the leaf nodes. The idea here is to achieve better sequentiality for the leaf nodes, which contain the data.

Some pages in the tablespace contain bitmaps of other pages, and therefore <strong>a few extents in an <code>InnoDB</code>tablespace cannot be allocated to segments as a whole</strong>, but only as individual pages.

下面这段来自一个网友的总结：

<a href="http://www.themysql.com/wp-content/uploads/2010/11/tablespace2.jpg"><img class="alignnone size-medium wp-image-130" title="tablespace2" src="http://www.themysql.com/wp-content/uploads/2010/11/tablespace2-300x300.jpg" alt="" width="300" height="300" /></a>
<ol>
	<li>在配置文件中可以配置InnoDB的表空间<sup>[1]</sup>，一般格式如下(共享表空间)：
datadir = /opt/mysql/data
innodb_data_file_path=ibdata1:1G;ibdata2:1G;ibdata3:1G;ibdata4:1G;ibdata5:1G</li>
	<li>完整的表空间，会被分成如下结构供给InnoDB使用。最小单位是page，每个page为16K；64个连续的page组成一个extent；多个extent和page构成一个segment。Segment初始时InnoDB会为它分配32个pages，之后根据需要会将extent分配给segment，单次最多会分配4个extends给segment。<sup>[1]</sup></li>
	<li>具体的，InnoDB中一个索引（B-tree）由两个segment组成。其中，所有的叶子节点（leaf nodes）存放在一个segment中，所有的非叶子节点（nonleaf nodes）存放在一个segment中。<sup>[1]</sup></li>
	<li>一个存放记录(row)的page，由page header、page trailer、page body组成。如下图:<sup>[2]</sup></li>
</ol>
<a href="http://www.themysql.com/wp-content/uploads/2010/11/page_struct.png"><img class="alignnone size-full wp-image-131" title="page_struct" src="http://www.themysql.com/wp-content/uploads/2010/11/page_struct.png" alt="" width="407" height="277" /></a>

from:<a href="http://www.orczhou.com/index.php/2009/08/image-innodb-tablespace/" target="_blank">http://www.orczhou.com/index.php/2009/08/image-innodb-tablespace/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[The tablespace consists of database pages with a default size of 16KB. The pages are grouped into extents of size 1MB (64 consecutive pages). The “files” inside a tablespace are called segments in InnoDB. The term “rollback segment” is somewhat confusing because it actually contains many tablespace segments.

When a segment grows inside the tablespace, InnoDB allocates the first 32 pages to it individually. After that,InnoDB starts to allocate whole extents to the segment. InnoDB can add up to 4 extents at a time to a large segment to ensure good sequentiality of data.

Two segments are allocated for each index in InnoDB. One is for nonleaf nodes of the B-tree, the other is for the leaf nodes. The idea here is to achieve better sequentiality for the leaf nodes, which contain the data.]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2010-11-21 20:08:49</wp:post_date>
		<wp:post_date_gmt>2010-11-21 12:08:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>innodb-tablespaces-%e8%a1%a8%e7%a9%ba%e9%97%b4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="innodb"><![CDATA[innodb]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql,innodb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1000]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>InnoDB Plugin压缩特性</title>
		<link>http://www.themysql.com/mysql/innodb-plugin%e5%8e%8b%e7%bc%a9%e7%89%b9%e6%80%a7.html</link>
		<pubDate>Sun, 21 Nov 2010 12:33:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[innodb plugin的压缩特性是从5.1版本开始出现的一个特性，最初是由google开发出来，然后开源，mysql吸收的。

The usual (uncompressed) size of InnoDB data pages is 16KB. Beginning with the InnoDB Plugin, you can use the attributes <code>ROW_FORMAT=COMPRESSED</code>, <code>KEY_BLOCK_SIZE</code>, or both in the <code>CREATE TABLE</code> and <code>ALTER TABLE</code>statements to enable table compression. Depending on the combination of option values, InnoDB attempts to compress each page to 1KB, 2KB, 4KB, 8KB, or 16KB.

通过上面这段官方文档的理解就是page在解压之后16kb，这个不会发生变化，key_block_size可以解释为压缩的程度，mysql将page压缩到多大。

压缩会大幅度的节省磁盘空间，压缩之后空间为原来的1/4不等，具体于表结构有很大关系，varchar、char等压缩比会较高，压缩使用的是<a href="http://www.zlib.net/">zlib library</a>中的<a href="http://zh.wikipedia.org/wiki/LZ77%E4%B8%8ELZ78">LZ77</a>算法。

压缩适合于当数据的insert、update操作较少，select操作较多并且io为瓶颈的一种场景，也可以用来取代archive引擎和myisam的压缩。

使用起来相对很简单：

CREATE TABLE name (column1 INT PRIMARY KEY) ENGINE=InnoDB
ROW_FORMAT=COMPRESSED
KEY_BLOCK_SIZE=4;

下面这张表格主要说明了ROW_FORMAT和key_block_size的具体含义。其中其中innodb默认的innodb_file_format是antelope，innodb plugin中可以指定为Barracuda，其中Barracuda和antelope的主要区别是在ROW_FORMAT上的区别。

<strong>Meaning of <code>CREATE TABLE</code> and <code>ALTER TABLE</code> Options</strong>
<table border="1" summary="Meaning of CREATE TABLE and ALTER TABLE Options"><colgroup> <col></col> <col></col> <col></col> </colgroup>
<thead>
<tr>
<th>Option</th>
<th>Usage</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ROW_FORMAT=​REDUNDANT</code></td>
<td>Storage format used prior to MySQL 5.0.3</td>
<td>Less efficient than <code>ROW_FORMAT=COMPACT</code>; for backward compatibility</td>
</tr>
<tr>
<td><code>ROW_FORMAT=​COMPACT</code></td>
<td>Default storage format since MySQL 5.0.3</td>
<td>Stores a prefix of 768 bytes of long column values in the clustered index page, with the remaining bytes stored in an overflow page</td>
</tr>
<tr>
<td><code>ROW_FORMAT=​DYNAMIC</code></td>
<td>Available only with <code>innodb_file​_format=Barracuda</code></td>
<td>Store values within the clustered index page if they fit; if not, stores only a 20-byte pointer to an overflow page (no prefix)</td>
</tr>
<tr>
<td><code>ROW_FORMAT=​COMPRESSED</code></td>
<td>Available only with <code>innodb_file​_format=Barracuda</code></td>
<td>Compresses the table and indexes using zlib to default compressed page size of 8K bytes; implies<code>ROW_FORMAT=DYNAMIC</code></td>
</tr>
<tr>
<td><code>KEY_BLOCK_​SIZE=<em><code>n</code></em></code></td>
<td>Available only with <code>innodb_file​_format=Barracuda</code></td>
<td>Specifies compressed page size of 1, 2, 4, 8 or 16K bytes; implies <code>ROW_FORMAT=DYNAMIC</code> and<code>ROW_FORMAT=COMPRESSED</code></td>
</tr>
</tbody>
</table>
那天有同事担心压缩之后假如性能不能接受能否改回未压缩版本，可以使用alter table row_format=compact，前提是innodb_strict_mode为0，否则提示ERROR 1005 (HY000): Can't create table 'test.#sql-4d7e_1' (errno: 1478)类似的错误。改了之后在show create table的时候还会看到key_block_size，但是此时key_block_size已经被ignore了。推荐的方式重新建一张表，然后insert into select * from。
<a href="http://www.orczhou.com/index.php/2010/03/innodb-plugin-compression/">另外一篇orczhu写的关于innodb plugin压缩特性的文章</a>，写的非常不错]]></content:encoded>
		<excerpt:encoded><![CDATA[The usual (uncompressed) size of InnoDB data pages is 16KB. Beginning with the InnoDB Plugin, you can use the attributes ROW_FORMAT=COMPRESSED, KEY_BLOCK_SIZE, or both in the CREATE TABLE and ALTER TABLEstatements to enable table compression. Depending on the combination of option values, InnoDB attempts to compress each page to 1KB, 2KB, 4KB, 8KB, or 16KB.]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2010-11-21 20:33:02</wp:post_date>
		<wp:post_date_gmt>2010-11-21 12:33:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>innodb-plugin%e5%8e%8b%e7%bc%a9%e7%89%b9%e6%80%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="innodb-plugin"><![CDATA[innodb plugin]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="category" nicename="%e5%8e%9f%e5%88%9b"><![CDATA[原创]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql,innodb plugin]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1444]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>更改Innodb 数据页大小优化MySQL</title>
		<link>http://www.themysql.com/mysql/%e6%9b%b4%e6%94%b9innodb-%e6%95%b0%e6%8d%ae%e9%a1%b5%e5%a4%a7%e5%b0%8f%e4%bc%98%e5%8c%96mysql.html</link>
		<pubDate>Wed, 24 Nov 2010 07:55:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">
<div id="_mcePaste">作者：吴炳锡　来源：http://www.mysqlsupport.cn/ 联系方式： wubingxi#gmail.com</div>
<div></div>
<div>我们知道Innodb的数据页是16K,而且是一个硬性的规定，系统里没更改的办法，希望将来MySQL也能也Oracle一样支持多种数据页的大小。</div>
<div id="_mcePaste">但实际应用中有时16K显的有点大了，特别是很多业务在Oracle或是SQL SERVER运行的挺好的情况下迁到了MySQL上发现IO增长太明显的情况下，就会想到更改数据页大小了。</div>
<div id="_mcePaste">实际上innodb的数据页大小也是可以更改的，只是需要在源码层去更改，然后重新rebuild一下MySQL.</div>
<div id="_mcePaste">更改办法：</div>
<div id="_mcePaste">(以MySQL-5.1.38源码为例）</div>
<div id="_mcePaste">位置在storage/innobase/include/univ.i ，在univ.i中查找：UNIV_PAGE_SIZE</div>
<div id="_mcePaste">/*</div>
<div id="_mcePaste">DATABASE VERSION CONTROL</div>
<div id="_mcePaste">========================</div>
<div id="_mcePaste">*/</div>
<div id="_mcePaste">/* The universal page size of the database */</div>
<div id="_mcePaste">#define UNIV_PAGE_SIZE          (2 * 8192) /* NOTE! Currently, this has to be a</div>
<div id="_mcePaste">power of 2 */</div>
<div id="_mcePaste">/* The 2-logarithm of UNIV_PAGE_SIZE: */</div>
<div id="_mcePaste">#define UNIV_PAGE_SIZE_SHIFT 14</div>
<div id="_mcePaste">/* Maximum number of parallel threads in a parallelized operation */</div>
<div id="_mcePaste">#define UNIV_MAX_PARALLELISM 32</div>
<div id="_mcePaste">UNIV_PAGE_SIZE就是数据页大小，默认的是16K. 后面的备注里标明，该值是可以设置必须为2的次方。对于该值可以设置成4k,8k,16k,32K,64K，在大也没意义了。</div>
<div id="_mcePaste">同时更改了UNIV_PAGE_SIZE后需要更改 UNIV_PAGE_SIZE_SHIFT 该值是2的多少次方为UNIV_PAGE_SIZE，所以设置数据页分别情况如下：</div>
<div id="_mcePaste">#define UNIV_PAGE_SIZE_SHIFT 12  if UNIV_PAGE_SIZ=4K</div>
<div id="_mcePaste">#define UNIV_PAGE_SIZE_SHIFT 13  if UNIV_PAGE_SIZ=8K</div>
<div id="_mcePaste">#define UNIV_PAGE_SIZE_SHIFT 15  if UNIV_PAGE_SIZ=32K</div>
<div id="_mcePaste">例子：</div>
<div id="_mcePaste">更改innodb的数据页为8K,相应修改为：</div>
<div id="_mcePaste">/*</div>
<div id="_mcePaste">DATABASE VERSION CONTROL</div>
<div id="_mcePaste">========================</div>
<div id="_mcePaste">*/</div>
<div id="_mcePaste">/* The universal page size of the database */</div>
<div id="_mcePaste">#define UNIV_PAGE_SIZE          8192   /* NOTE! Currently, this has to be a</div>
<div id="_mcePaste">power of 2 */</div>
<div id="_mcePaste">/* The 2-logarithm of UNIV_PAGE_SIZE: */</div>
<div id="_mcePaste">#define UNIV_PAGE_SIZE_SHIFT 13</div>
<div id="_mcePaste">/* Maximum number of parallel threads in a parallelized operation */</div>
<div id="_mcePaste">#define UNIV_MAX_PARALLELISM 32</div>
<div id="_mcePaste">重新编译，然后测试测试，再测试。Good luck!</div>
<div><span style="font-family: Verdana, Helvetica, sans-serif; line-height: 20px; font-size: small;">后补：
对于该值的修改如果存在担心可以用 grep -r “UNIV_PAGE_SIZE” * 在innobase那个目录 看看调用的位置去肯定一下。欢迎拍砖。目前我测试没问题。可以用于生产。</span></div>
<div><span style="font-family: Verdana, Helvetica, sans-serif; line-height: 20px; font-size: small;">这篇文章很给力，打算下一个阶段的时候用实际的环境测试一下page size对实际应用的影响。</span></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[我们知道Innodb的数据页是16K,而且是一个硬性的规定，系统里没更改的办法，希望将来MySQL也能也Oracle一样支持多种数据页的大小。但实际应用中有时16K显的有点大了，特别是很多业务在Oracle或是SQL SERVER运行的挺好的情况下迁到了MySQL上发现IO增长太明显的情况下，就会想到更改数据页大小了。实际上innodb的数据页大小也是可以更改的，只是需要在源码层去更改，然后重新rebuild一下MySQL.]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2010-11-24 15:55:51</wp:post_date>
		<wp:post_date_gmt>2010-11-24 07:55:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9b%b4%e6%94%b9innodb-%e6%95%b0%e6%8d%ae%e9%a1%b5%e5%a4%a7%e5%b0%8f%e4%bc%98%e5%8c%96mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="innodb"><![CDATA[innodb]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql,innodb,page_size]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1418]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linux下export无效的原因</title>
		<link>http://www.themysql.com/linux/linux%e4%b8%8bexport%e6%97%a0%e6%95%88%e7%9a%84%e5%8e%9f%e5%9b%a0.html</link>
		<pubDate>Thu, 02 Dec 2010 11:45:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[<div>export的用途是将自定义变量转成环境变量，这样该变量可以继续再<span style="color: #ff0000;">子程序</span>中使用。1、执行脚本时是在一个子shell环境运行的，脚本执行完后该子shell自动退出；2、一个shell中的系统环境变量才会被复制到子shell中（用export定义的变量）；3、一个shell中的系统环境变量只对该shell或者它的子shell有效，该shell结束时变量消失（并不能返回到父shell中）。3、不用export定义的变量只对该shell有效，对子shell也是无效的。</div>
定义下面两个脚本：
s1
<pre>#!/bin/sh
name1="123"
export name1
echo $name1</pre>
s2
<pre>#!/bin/sh
echo $name1</pre>
<div>上面执行sh s2的时候失败的原因，是因为s2不是s1的子程序</div>
可以通过下面几种方法实现s2中正常显示结果：
一、将s1进行修改
<pre>#!/bin/sh
name1="123"
export name1
echo $name1
sh s2</pre>
再次执行sh s1，就可以按照预期显示了。
二、在shell中export name1=123，然后执行sh s2也可以正常显示。
三、使用source命令，source s1;sh s2。source命令是这样解释的：Read and execute commands from filename in the current shell environment and return the exit status of the last command executed  from  filename.也就是source命令执行是在当前shell执行，因此s2就成了s1的子shell。]]></content:encoded>
		<excerpt:encoded><![CDATA[export的用途是将自定义变量转成环境变量，这样该变量可以继续再子程序中使用。1、执行脚本时是在一个子shell环境运行的，脚本执行完后该子shell自动退出；2、一个shell中的系统环境变量才会被复制到子shell中（用export定义的变量）；3、一个shell中的系统环境变量只对该shell或者它的子shell有效，该shell结束时变量消失（并不能返回到父shell中）。3、不用export定义的变量只对该shell有效，对子shell也是无效的。]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2010-12-02 19:45:38</wp:post_date>
		<wp:post_date_gmt>2010-12-02 11:45:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux%e4%b8%8bexport%e6%97%a0%e6%95%88%e7%9a%84%e5%8e%9f%e5%9b%a0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux-2"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[linux下export无效的原因]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1646]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql中idle connections的影响</title>
		<link>http://www.themysql.com/mysql/mysql%e4%b8%adidle-connections%e7%9a%84%e5%bd%b1%e5%93%8d.html</link>
		<pubDate>Tue, 21 Dec 2010 09:07:11 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[Yves Trudeau先是在mysqlhighperformance上发表了一篇文章指出idle-connections对mysql性能的影响，后来下面的回复中有人指出造成这种影响的是原因是作者是以debug模式编译的mysql，Yves Trudeau意识到之后又发了一篇，使用正式版进行测试，测试的结论是影响相对较小，贴上两次的图（右边的是debug版本，左边的是标准版），感谢作者这种孜孜追求：

<a href="http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn-1023x578.png"><img class="alignnone size-medium wp-image-153" title="debug测试结果" src="http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn-1023x578-300x169.png" alt="" width="300" height="169" /></a><a href="http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn_v2-1023x578.png"><img class="alignnone size-medium wp-image-152" title="标准版测试结果" src="http://www.themysql.com/wp-content/uploads/2010/12/NOTPM_vs_idle_conn_v2-1023x578-300x169.png" alt="" width="300" height="169" /></a>

dubug版本原文：<a href="http://www.mysqlperformanceblog.com/2010/12/17/impact-of-the-number-of-idle-connections-in-mysql/">http://www.mysqlperformanceblog.com/2010/12/17/impact-of-the-number-of-idle-connections-in-mysql/</a>

<a href="http://www.mysqlperformanceblog.com/2010/12/17/impact-of-the-number-of-idle-connections-in-mysql/"> </a>正式版原文：<a href="http://www.mysqlperformanceblog.com/2010/12/20/impact-of-the-number-of-idle-connections-in-mysql-version-2/">http://www.mysqlperformanceblog.com/2010/12/20/impact-of-the-number-of-idle-connections-in-mysql-version-2/</a>

作者：<strong>Yves Trudeau</strong>

<strong> </strong><a href="http://www.mysqlperformanceblog.com/2010/12/17/impact-of-the-number-of-idle-connections-in-mysql/"> </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[Yves Trudeau先是在mysqlhighperformance上发表了一篇文章指出idle-connections对mysql性能的影响，后来下面的回复中有人指出造成这种影响的是原因是作者是以debug模式编译的mysql，Yves Trudeau意识到之后又发了一篇，使用正式版进行测试，测试的结论是影响相对较小。]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date>2010-12-21 17:07:11</wp:post_date>
		<wp:post_date_gmt>2010-12-21 09:07:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e4%b8%adidle-connections%e7%9a%84%e5%bd%b1%e5%93%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="%e5%8e%9f%e5%88%9b"><![CDATA[原创]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1002]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TheMySQL博客第二更新</title>
		<link>http://www.themysql.com/wordpress-2/themysql%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e6%ac%a1%e6%9b%b4%e6%96%b0.html</link>
		<pubDate>Sat, 25 Dec 2010 19:52:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[本次更新主要是将原来的主题更换为inove，inove主题的比较方便修改，可以进行定制化；并且增加了如阅读次数、相关文章等功能。
<strong>一、添加插件wp-utf8-excerpt</strong>
http://myfairland.net/wp-utf8-excerpt/
1，解压到/wp-content/plugins/目录
2，在插件页面激活插件
3，修改主题的index.php、文件，把
<pre lang='php'>
<?php the_content(); ?>
</pre>
改成
<pre lang='php'>
<?php
if (is_single() or is_page()) {
   the_content();
} else {
   the_excerpt();
}
?>
</pre>
注意：有些主题在the_content()中还有一些字，比如the_content(’Continue Reading ?’)，这种要把整句话换掉。有些主题用了其他文件来控制存档页面，如category.php、archive.php等，如有必要，请对这些文件也做修改。
<strong>二、添加彩色标签云</strong>
http://zou.lu/colorful-tag-cloud-without-any-plugin-in-wordpress/
后台编辑 主题 的 functions.php , 输入以下代码
<pre lang='php'>
function colorCloud($text) { 
   $text = preg_replace_callback('|<a (.+?)>|i', 'colorCloudCallback', $text); 
   return $text; 
} 
function colorCloudCallback($matches) { 
$text = $matches[1]; 
$color = dechex(rand(0,16777215)); 
$pattern = '/style=(\'|\")(.*)(\'|\")/i'; 
$text = preg_replace($pattern, "style=\"color:#{$color};$2;\"", $text); 
return "<a $text>"; 
} 
add_filter('wp_tag_cloud', 'colorCloud', 1);
</pre>
<strong>三、添加wp-views插件，这方面教程教多，这里就不加赘述。</strong>
<strong>四、在主题中添加 LavaLamp 菜单效果（下次改动的时候重点改动，实现鼠标离开之后，滑动块停留在最后一次的位置上，点击目录之后也停留在相关的目录上）</strong>
http://www.neoease.com/lavalamp-for-wordpress-users/
<strong>五、添加相关日志</strong>
http://fishyoyo.com/5-wordpress-related-posts-plugins.html
使用基于分类的相关日志，首先获取当前页面的category的id，多个category id使用逗号分隔。
<pre lang='php'>
<!-- related posts START -->
<div class="related_posts">
	<h6>相关日志</h6>
	<?php 
		$categorys = get_the_category();
		$i=0;
		foreach($categorys as $category)
		{
			if($i!=0)
			{
				$category_ids.=",";
			}
			$category_ids.=$category->cat_ID;
			$i=$i+1;
		}
	?>
	<ul>
	<?php $posts = get_posts('numberposts=8&category='.$category_ids.'&exclude='.$current_post);
	foreach($posts as $post) {
	?>
	<li><a href="<?php the_permalink(); ?>" title="<?php the_title() ?>"><?php the_title() ?><br /></a>
	</li>
	<?php } ?>
	</ul>
</div>
<!-- related posts END -->
</pre>

下次更新主要更新菜单栏、对mysql进行一些性能上的优化。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2010-12-26 03:52:36</wp:post_date>
		<wp:post_date_gmt>2010-12-25 19:52:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>themysql%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e6%ac%a1%e6%9b%b4%e6%96%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="wordpress-2"><![CDATA[wordpress]]></category>
		<category domain="category" nicename="wordpress-2"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[wordpress添加相关日志,wordpress添加添加彩色标签云,inove主题定制化]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5bab73367c06716f07cdba51a5d10163</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[844]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_66a535a21ace331c03a634aa00d617cb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_40012ee7cdb549c28e5bf9a48d0a2df1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e61cac1c757056baf60e47564b9ed35f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9649ac765cba7fa8b15addca8fc05566</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2842c84f3914628babd3810319950c6d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_92fb4d5944bce56c6f9241ed6069b705</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9ce09940c75cfc7952fd278c8367bc09</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL InnoDB的幻读</title>
		<link>http://www.themysql.com/mysql/mysql-innodb%e7%9a%84%e5%b9%bb%e8%af%bb.html</link>
		<pubDate>Wed, 05 Jan 2011 17:22:21 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[copyleft by bitfly @ http://bitfly.cn
permalink: http://blog.bitfly.cn/post/mysql-innodb-phantom-read/

==================== 正文 ====================

（以下参考MySQL 5.0）

MySQL InnoDB事务的隔离级别有四级，默认是“可重复读”（REPEATABLE READ）。

未提交读（READ UNCOMMITTED）。另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据（脏读）。
提交读（READ COMMITTED）。本事务读取到的是最新的数据（其他事务提交后的）。问题是，在同一个事务里，前后两次相同的SELECT会读到不同的结果（不重复读）。
可重复读（REPEATABLE READ）。在同一个事务里，SELECT的结果是事务开始时时间点的状态，因此，同样的SELECT操作读到的结果会是一致的。但是，会有幻读现象（稍后解释）。
串行化（SERIALIZABLE）。读操作会隐式获取共享锁，可以保证不同事务间的互斥。
四个级别逐渐增强，每个级别解决一个问题。

脏读，最容易理解。另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据。
不重复读。解决了脏读后，会遇到，同一个事务执行过程中，另外一个事务提交了新数据，因此本事务先后两次读到的数据结果会不一致。
幻读。解决了不重复读，保证了同一个事务里，查询的结果都是事务开始时的状态（一致性）。但是，如果另一个事务同时提交了新数据，本事务再更新时，就会“惊奇的”发现了这些新数据，貌似之前读到的数据是“鬼影”一样的幻觉。
借鉴并改造了一个搞笑的比喻：

脏读。假如，中午去食堂打饭吃，看到一个座位被同学小Q占上了，就认为这个座位被占去了，就转身去找其他的座位。不料，这个同学小Q起身走了。事实：该同学小Q只是临时坐了一小下，并未“提交”。
不重复读。假如，中午去食堂打饭吃，看到一个座位是空的，便屁颠屁颠的去打饭，回来后却发现这个座位却被同学小Q占去了。
幻读。假如，中午去食堂打饭吃，看到一个座位是空的，便屁颠屁颠的去打饭，回来后，发现这些座位都还是空的（重复读），窃喜。走到跟前刚准备坐下时，却惊现一个恐龙妹，严重影响食欲。仿佛之前看到的空座位是“幻影”一样。
------

一些文章写到InnoDB的可重复读避免了“幻读”（phantom read），这个说法并不准确。

做个试验：(以下所有试验要注意存储引擎和隔离级别)
<pre lang='sql'>
mysql> show create table t_bitfly\G;
CREATE TABLE `t_bitfly` (
`id` bigint(20) NOT NULL default '0',
`value` varchar(32) default NULL,
PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=gbk

mysql> select @@global.tx_isolation, @@tx_isolation;
+-----------------------+-----------------+
| @@global.tx_isolation | @@tx_isolation  |
+-----------------------+-----------------+
| REPEATABLE-READ       | REPEATABLE-READ |
+-----------------------+-----------------+
</pre>
试验一：
<pre lang='sql'>
t Session A                   Session B
|
| START TRANSACTION;          START TRANSACTION;
|
| SELECT * FROM t_bitfly;
| empty set
|                             INSERT INTO t_bitfly
|                             VALUES (1, 'a');
|
| SELECT * FROM t_bitfly;
| empty set
|                             COMMIT;
|
| SELECT * FROM t_bitfly;
| empty set
|
| INSERT INTO t_bitfly VALUES (1, 'a');
| ERROR 1062 (23000):
| Duplicate entry '1' for key 1
v (shit, 刚刚明明告诉我没有这条记录的)
</pre>
如此就出现了幻读，以为表里没有数据，其实数据已经存在了，傻乎乎的提交后，才发现数据冲突了。

试验二：
<pre lang='sql'>
t Session A                  Session B
|
| START TRANSACTION;         START TRANSACTION;
|
| SELECT * FROM t_bitfly;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | a     |
| +------+-------+
|                            INSERT INTO t_bitfly
|                            VALUES (2, 'b');
|
| SELECT * FROM t_bitfly;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | a     |
| +------+-------+
|                            COMMIT;
|
| SELECT * FROM t_bitfly;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | a     |
| +------+-------+
|
| UPDATE t_bitfly SET value='z';
| Rows matched: 2  Changed: 2  Warnings: 0
| (怎么多出来一行)
|
| SELECT * FROM t_bitfly;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | z     |
| |    2 | z     |
| +------+-------+
|
v
</pre>
本事务中第一次读取出一行，做了一次更新后，另一个事务里提交的数据就出现了。也可以看做是一种幻读。

------

那么，InnoDB指出的可以避免幻读是怎么回事呢？

http://dev.mysql.com/doc/refman/5.0/en/innodb-record-level-locks.html

By default, InnoDB operates in REPEATABLE READ transaction isolation level and with the innodb_locks_unsafe_for_binlog system variable disabled. In this case, InnoDB uses next-key locks for searches and index scans, which prevents phantom rows (see Section 13.6.8.5, “Avoiding the Phantom Problem Using Next-Key Locking”).

准备的理解是，当隔离级别是可重复读，且禁用innodb_locks_unsafe_for_binlog的情况下，在搜索和扫描index的时候使用的next-key locks可以避免幻读。

关键点在于，是InnoDB默认对一个普通的查询也会加next-key locks，还是说需要应用自己来加锁呢？如果单看这一句，可能会以为InnoDB对普通的查询也加了锁，如果是，那和序列化（SERIALIZABLE）的区别又在哪里呢？

MySQL manual里还有一段：

13.2.8.5. Avoiding the Phantom Problem Using Next-Key Locking (http://dev.mysql.com/doc/refman/5.0/en/innodb-next-key-locking.html)

To prevent phantoms, InnoDB uses an algorithm called next-key locking that combines index-row locking with gap locking.

You can use next-key locking to implement a uniqueness check in your application: If you read your data in share mode and do not see a duplicate for a row you are going to insert, then you can safely insert your row and know that the next-key lock set on the successor of your row during the read prevents anyone meanwhile inserting a duplicate for your row. Thus, the next-key locking enables you to “lock” the nonexistence of something in your table.

我的理解是说，InnoDB提供了next-key locks，但需要应用程序自己去加锁。manual里提供一个例子：

SELECT * FROM child WHERE id &gt; 100 FOR UPDATE;

这样，InnoDB会给id大于100的行（假如child表里有一行id为102），以及100-102，102+的gap都加上锁。

可以使用show innodb status来查看是否给表加上了锁。

再看一个实验，要注意，表t_bitfly里的id为主键字段。实验三：
<pre lang='sql'>
t Session A                 Session B
|
| START TRANSACTION;        START TRANSACTION;
|
| SELECT * FROM t_bitfly
| WHERE id&lt;=1
| FOR UPDATE;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | a     |
| +------+-------+
|                           INSERT INTO t_bitfly
|                           VALUES (2, 'b');
|                           Query OK, 1 row affected
|
| SELECT * FROM t_bitfly;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | a     |
| +------+-------+
|                           INSERT INTO t_bitfly
|                           VALUES (0, '0');
|                           (waiting for lock ...
|                           then timeout)
|                           ERROR 1205 (HY000):
|                           Lock wait timeout exceeded;
|                           try restarting transaction
|
| SELECT * FROM t_bitfly;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | a     |
| +------+-------+
|                           COMMIT;
|
| SELECT * FROM t_bitfly;
| +------+-------+
| | id   | value |
| +------+-------+
| |    1 | a     |
| +------+-------+
v
</pre>
可以看到，用id&lt;=1加的锁，只锁住了id&lt;=1的范围，可以成功添加id为2的记录，添加id为0的记录时就会等待锁的释放。

MySQL manual里对可重复读里的锁的详细解释：

http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html#isolevel_repeatable-read

For locking reads (SELECT with FOR UPDATE or LOCK IN SHARE MODE), UPDATE, and DELETE statements, locking depends on whether the statement uses a unique index with a unique search condition, or a range-type search condition. For a unique index with a unique search condition, InnoDB locks only the index record found, not the gap before it. For other search conditions, InnoDB locks the index range scanned, using gap locks or next-key (gap plus index-record) locks to block insertions by other sessions into the gaps covered by the range.

------

一致性读和提交读，先看实验，实验四：
<pre lang='sql'>
t Session A                      Session B
|
| START TRANSACTION;             START TRANSACTION;
|
| SELECT * FROM t_bitfly;
| +----+-------+
| | id | value |
| +----+-------+
| |  1 | a     |
| +----+-------+
|                                INSERT INTO t_bitfly
|                                VALUES (2, 'b');
|                                COMMIT;
|
| SELECT * FROM t_bitfly;
| +----+-------+
| | id | value |
| +----+-------+
| |  1 | a     |
| +----+-------+
|
| SELECT * FROM t_bitfly LOCK IN SHARE MODE;
| +----+-------+
| | id | value |
| +----+-------+
| |  1 | a     |
| |  2 | b     |
| +----+-------+
|
| SELECT * FROM t_bitfly FOR UPDATE;
| +----+-------+
| | id | value |
| +----+-------+
| |  1 | a     |
| |  2 | b     |
| +----+-------+
|
| SELECT * FROM t_bitfly;
| +----+-------+
| | id | value |
| +----+-------+
| |  1 | a     |
| +----+-------+
v
</pre>
如果使用普通的读，会得到一致性的结果，如果使用了加锁的读，就会读到“最新的”“提交”读的结果。

本身，可重复读和提交读是矛盾的。在同一个事务里，如果保证了可重复读，就会看不到其他事务的提交，违背了提交读；如果保证了提交读，就会导致前后两次读到的结果不一致，违背了可重复读。

可以这么讲，InnoDB提供了这样的机制，在默认的可重复读的隔离级别里，可以使用加锁读去查询最新的数据。

http://dev.mysql.com/doc/refman/5.0/en/innodb-consistent-read.html

If you want to see the “freshest” state of the database, you should use either the READ COMMITTED isolation level or a locking read:
SELECT * FROM t_bitfly LOCK IN SHARE MODE;

------

结论：MySQL InnoDB的可重复读并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是next-key locks。

==================== 结尾 ====================

作者: bitfly. 转载请注明来源或包含本信息. 谢谢
链接: http://blog.bitfly.cn/post/mysql-innodb-phantom-read/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date>2011-01-06 01:22:21</wp:post_date>
		<wp:post_date_gmt>2011-01-05 17:22:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-innodb%e7%9a%84%e5%b9%bb%e8%af%bb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1126]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d997f430db0177eecb1fd03d1009be8a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a1212fa66a6fba821e68b31da0bf1dde</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8b728313ec9bf50144337bd39b088cc0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f0ac1c4456e1bb5fa16b7d122ff576c2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2df9888ec3a28d2201bd2aca6fe669e7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_48ffa07c5052fe24fa689b2e505e3799</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql sync_binlog选项</title>
		<link>http://www.themysql.com/mysql/mysql-sync_binlog%e9%80%89%e9%a1%b9.html</link>
		<pubDate>Wed, 05 Jan 2011 18:45:05 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=169</guid>
		<description></description>
		<content:encoded><![CDATA[sync_binlog

If the value of this variable is greater than 0, the MySQL server synchronizes its binary log to disk (using fdatasync()) after every sync_binlog writes to the binary log. There is one write to the binary log per statement if autocommit is enabled, and one write per transaction otherwise. The default value of sync_binlog is 0, which does no synchronizing to disk — in this case, the server relies on the operating system to flush the binary log's contents from to time as for any other file. A value of 1 is the safest choice because in the event of a crash you lose at most one statement or transaction from the binary log. However, it is also the slowest choice (unless the disk has a battery-backed cache, which makes synchronization very fast).

<a href="http://www.mysqlperformanceblog.com/2006/05/19/group-commit-and-xa/">Group commit and XA </a>
Returning to post Group commit and real fsync I made several experiments:

I ran sysbench update_key benchmarks without —log-bin, with —log-bin, and with —log-bin and —innodb-support-xa=0 (default value is 1). Results (in transactions / sec)
<table border="1" cellspacing="0" cellpadding="1" width="100%">
<tbody>
<tr>
<td>threads</td>
<td>without —log-bin</td>
<td>—log-bin</td>
<td>—log-bin and
—innodb_support-xa=0</td>
</tr>
<tr>
<td>1</td>
<td>1218.68</td>
<td>614.94</td>
<td>1010.44</td>
</tr>
<tr>
<td>4</td>
<td>2686.36</td>
<td>667.77</td>
<td>1162.60</td>
</tr>
<tr>
<td>16</td>
<td>3993.59</td>
<td>666.14</td>
<td>1161.56</td>
</tr>
<tr>
<td>64</td>
<td>3630.55</td>
<td>665.18</td>
<td>1151.36</td>
</tr>
</tbody>
</table>
So we can see group commit is not only broken when XA is enabled but also if XA is disabled but binary log is enabled. Performance without XA can be twice as good as with XA if binary logs are enabled as Innodb will need to flush its log buffer only once. So, if you are using —log-bin with innodb tables it makes sense to set —innodb-support-xa=0]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date>2011-01-06 02:45:05</wp:post_date>
		<wp:post_date_gmt>2011-01-05 18:45:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-sync_binlog%e9%80%89%e9%a1%b9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1718]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于innodb死锁</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8einnodb%e6%ad%bb%e9%94%81.html</link>
		<pubDate>Thu, 06 Jan 2011 07:29:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[MyISAM表锁是deadlock free的，这是因为MyISAM总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁。但在InnoDB中，<span style="color: #ff0000;">除单个SQL组成的事务外</span>（因为我们的绝大部分应用都是单个sql事务，因此对死锁的概念一直很含糊），锁是逐步获得的，这就决定了在InnoDB中发生死锁是可能的。如表20-17所示的就是一个发生死锁的例子。

表20-17           InnoDB存储引擎中的死锁例子
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="242" valign="top">session_1</td>
<td width="270" valign="top">session_2</td>
</tr>
<tr>
<td width="242" valign="top">mysql&gt; set autocommit = 0;

Query OK, 0 rows affected (0.00 sec)

mysql&gt; select * from table_1 where where for update;

...

做一些其他处理...</td>
<td width="270" valign="top">mysql&gt; set autocommit = 0;

Query OK, 0 rows affected (0.00 sec)

mysql&gt; select * from table_2 where for update;

...</td>
</tr>
<tr>
<td width="242" valign="top">select * from table_2 where id =1 for update;

因session_2已取得排他锁，等待</td>
<td width="270" valign="top">做一些其他处理...</td>
</tr>
<tr>
<td width="242" valign="top"></td>
<td width="270" valign="top">mysql&gt; select * from table_1 where where for update;

死锁</td>
</tr>
</tbody>
</table>
在上面的例子中，两个事务都需要获得对方持有的排他锁才能继续完成事务，这种循环锁等待就是典型的死锁。

发生死锁后，InnoDB一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB并不能完全自动检测到死锁，这需要通过设置锁等待超时参数innodb_lock_wait_timeout（默认50秒）来解决。<span style="color: #ff0000;">需要说明的是，这个参数并不是只用来解决死锁问题，在并发访问比较高的情况下，如果大量事务因无法立即获得所需的锁而挂起，会占用大量计算机资源，造成严重性能问题，甚至拖跨数据库。我们通过设置合适的锁等待超时阈值，可以避免这种情况发生。</span>

通常来说，死锁都是应用设计的问题，通过调整业务流程、数据库对象设计、事务大小，以及访问数据库的SQL语句，绝大部分死锁都可以避免。下面就通过实例来介绍几种避免死锁的常用方法。

（1）在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会。在下面的例子中，由于两个session访问两个表的顺序不同，发生死锁的机会就非常高！但如果以相同的顺序来访问，死锁就可以避免。

表20-18  InnoDB存储引擎中表顺序造成的死锁例子
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="288" valign="top"><strong>session_1</strong></td>
<td width="276" valign="top"><strong>session_2</strong></td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt; set autocommit=0;

Query OK, 0 rows affected (0.00 sec)</td>
<td width="276" valign="top">mysql&gt; set autocommit=0;

Query OK, 0 rows affected (0.00 sec)</td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt; select first_name,last_name from actor where actor_id = 1 for update;

+------------+-----------+

| first_name | last_name |

+------------+-----------+

| PENELOPE   | GUINESS   |

+------------+-----------+

1 row in set (0.00 sec)</td>
<td width="276" valign="top"></td>
</tr>
<tr>
<td width="288" valign="top"></td>
<td width="276" valign="top">mysql&gt; insert into country (country_id,country) values(110,'Test');

Query OK, 1 row affected (0.00 sec)</td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt;  insert into country (country_id,country) values(110,'Test');

等待</td>
<td width="276" valign="top"></td>
</tr>
<tr>
<td width="288" valign="top"></td>
<td width="276" valign="top">mysql&gt; select first_name,last_name from actor where actor_id = 1 for update;

+------------+-----------+

| first_name | last_name |

+------------+-----------+

| PENELOPE   | GUINESS   |

+------------+-----------+

1 row in set (0.00 sec)</td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt;  insert into country (country_id,country) values(110,'Test');

ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td>
<td width="276" valign="top"></td>
</tr>
</tbody>
</table>
（2）在程序以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，也可以大大降低出现死锁的可能。

表20-19  InnoDB存储引擎中表数据操作顺序不一致造成的死锁例子
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="288" valign="top"><strong>session_1</strong></td>
<td width="276" valign="top"><strong>session_2</strong></td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt; set autocommit=0;

Query OK, 0 rows affected (0.00 sec)</td>
<td width="276" valign="top">mysql&gt; set autocommit=0;

Query OK, 0 rows affected (0.00 sec)</td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt; select first_name,last_name from actor where actor_id = 1 for update;

+------------+-----------+

| first_name | last_name |

+------------+-----------+

| PENELOPE   | GUINESS   |

+------------+-----------+

1 row in set (0.00 sec)</td>
<td width="276" valign="top"></td>
</tr>
<tr>
<td width="288" valign="top"></td>
<td width="276" valign="top">mysql&gt; select first_name,last_name from actor where actor_id = 3 for update;

+------------+-----------+

| first_name | last_name |

+------------+-----------+

| ED         | CHASE     |

+------------+-----------+

1 row in set (0.00 sec)</td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt; select first_name,last_name from actor where actor_id = 3 for update;

等待</td>
<td width="276" valign="top"></td>
</tr>
<tr>
<td width="288" valign="top"></td>
<td width="276" valign="top">mysql&gt; select first_name,last_name from actor where actor_id = 1 for update;

ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td>
</tr>
<tr>
<td width="288" valign="top">mysql&gt; select first_name,last_name from actor where actor_id = 3 for update;

+------------+-----------+

| first_name | last_name |

+------------+-----------+

| ED         | CHASE     |

+------------+-----------+

1 row in set (4.71 sec)</td>
<td width="276" valign="top"></td>
</tr>
</tbody>
</table>
转自：《深入浅出MySQL——数据库开发、优化与管理维护》]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2011-01-06 15:29:02</wp:post_date>
		<wp:post_date_gmt>2011-01-06 07:29:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8einnodb%e6%ad%bb%e9%94%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1569]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>B树</title>
		<link>http://www.themysql.com/mysql/b%e6%a0%91.html</link>
		<pubDate>Thu, 06 Jan 2011 18:22:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div><strong>B树</strong></div>
<div>即二叉搜索树：</div>
<div>1.所有非叶子结点至多拥有两个儿子（Left和Right）；</div>
<div>2.所有结点存储一个关键字；</div>
<div>3.非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</div>
<div>如：</div>
<div><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/1.JPG" alt="" /></div>
<div>B树的搜索，从根结点开始，如果查询的关键字与结点的关键字相等，那么就命中；否则，如果查询关键字比结点关键字小，就进入左儿子；如果比结点关键字大，就进入右儿子；如果左儿子或右儿子的指针为空，则报告找不到相应的关键字；</div>
<div>如果B树的所有非叶子结点的左右子树的结点数目均保持差不多（平衡），那么B树的搜索性能逼近二分查找；但它比连续内存空间的二分查找的优点是，改变B树结构（插入与删除结点）不需要移动大段的内存数据，甚至通常是常数开销；</div>
<div>如：</div>
<div><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/2.JPG" alt="" /></div>
<div>但B树在经过多次插入与删除后，有可能导致不同的结构：</div>
<div><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/31.JPG" alt="" /></div>
<div>右边也是一个B树，但它的搜索性能已经是线性的了；同样的关键字集合有可能导致不同的树结构索引；所以，使用B树还要考虑尽可能让B树保持左图的结构，和避免右图的结构，也就是所谓的“平衡”问题；</div>
<div>实际使用的B树都是在原B树的基础上加上平衡算法，即“平衡二叉树”；如何保持B树结点分布均匀的平衡算法是平衡二叉树的关键；平衡算法是一种在B树中插入和删除结点的策略；</div>
<div><strong>B-树</strong></div>
<div>是一种多路搜索树（并不是二叉的）：</div>
<div>1.定义任意非叶子结点最多只有M个儿子；且M&gt;2；</div>
<div>2.根结点的儿子数为[2,  M]；</div>
<div>3.除根结点以外的非叶子结点的儿子数为[M/2,  M]；</div>
<div>4.每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</div>
<div>5.非叶子结点的关键字个数=指向儿子的指针个数-1；</div>
<div>6.非叶子结点的关键字：K[1], K[2],  …, K[M-1]；且K[i] &lt; K[i+1]；</div>
<div>7.非叶子结点的指针：P[1], P[2],  …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1],  K[i])的子树；</div>
<div>8.所有叶子结点位于同一层；</div>
<div>如：（M=3）</div>
<div><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/4.JPG" alt="" /></div>
<div>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</div>
<div>B-树的特性：</div>
<div>1.关键字集合分布在整颗树中；</div>
<div>2.任何一个关键字出现且只出现在一个结点中；</div>
<div>3.搜索有可能在非叶子结点结束；</div>
<div>4.其搜索性能等价于在关键字全集内做一次二分查找；</div>
<div>5.自动层次控制；</div>
<div>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率，其最底搜索性能为：</div>
<div><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/0.JPG" alt="" /></div>
<div>其中，M为设定的非叶子结点最多子树个数，N为关键字总数；</div>
<div>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</div>
<div>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；</div>
<div><strong>B+树</strong></div>
<div>B+树是B-树的变体，也是一种多路搜索树：</div>
<div>1.其定义基本与B-树同，除了：</div>
<div>2.非叶子结点的子树指针与关键字个数相同；</div>
<div>3.非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</div>
<div>5.为所有叶子结点增加一个链指针；</div>
<div>6.所有关键字都在叶子结点出现；</div>
<div>如：（M=3）</div>
<div><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/5.JPG" alt="" /></div>
<div>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</div>
<div>B+的特性：</div>
<div>1.所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</div>
<div>2.不可能在非叶子结点命中；</div>
<div>3.非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</div>
<div>4.更适合文件索引系统；</div>
<div><strong>B*树</strong></div>
<div>是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；</div>
<div><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/6.JPG" alt="" /></div>
<div>B*树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3（代替B+树的1/2）；</div>
<div>B+树的分裂：当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；</div>
<div>B*树的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；</div>
<div>所以，B*树分配新结点的概率比B+树要低，空间使用率更高；</div>
<div>B树：二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于走右结点；</div>
<div>B-树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；</div>
<div>所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</div>
<div>B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；</div>
<div>B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3；</div>
<div>实现：</div>
<div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td align="left"><strong>1、B+树</strong>索引的总体结构
①B<sup>+</sup>树索引是一个多级索引，但是其结构不同于多级顺序索引；
②B<sup>+</sup>树索引采用平衡树结构，即每个叶结点到根的路径长度都相同；
③每个非叶结点有<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/title/08/02.gif" border="0" alt="" width="29" height="14" />到n个子女，n对特定的树是固定的；
④B<sup>+</sup>树的所有结点结构都相同，它最多包含n-1个搜索码值K1、K2、…、Kn-1，以及n个指针P1、P2、…、Pn，每个结点中的搜索码值按次序存放，即如果i&lt;j，那么Ki&lt;Kj，如图1所示。</td>
</tr>
<tr>
<td align="left">
<div>图1 B<sup>+</sup>树的结点结构
<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/chapter/08/8-3-1.gif" border="0" alt="" width="420" height="34" /></div></td>
</tr>
<tr>
<td align="left">2、B<sup>+</sup>树索引的叶结点
①指针Pi(i=1,2,…,n-1)指向具有搜索码值Ki的一个文件记录或一个指针（存储）桶，桶中的每个指针指向具有搜索码值Ki的一个文件记录。指针桶只在文件不按搜索码顺序物理存储时才使用。指针Pn具有特殊的作用；
②每个叶结点最多可有n-1个搜索码值，最少也要有<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/title/08/04.gif" border="0" alt="" width="60" height="20" align="absMiddle" />个搜索码值。各个叶结点中搜索码值的范围互不相交。要使<strong>B+树</strong>索引成为稠密索引，数据文件中的各搜索码值都必须出现在某个叶结点中且只能出现一次；
③由于各叶结点按照所含的搜索码值有一个线性顺序，所以就可以利用各个叶结点的指针Pn将叶结点按搜索码顺序链接在一起。这种排序能够高效地对文件进行顺序处理，而B<sup>+</sup>树索引的其他结构能够高效地对文件进行随机处理，如图2所示。</td>
</tr>
<tr>
<td align="left">
<div>图2 <strong>B+树</strong>索引的叶结点结构示例
<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/chapter/08/8-3-2.gif" border="0" alt="" width="420" height="160" /></div></td>
</tr>
<tr>
<td align="left">3、B<sup>+</sup>树索引的非叶结点
①B<sup>+</sup>树索引的非叶结点形成叶结点上的一个多级（稀疏）索引；
②非叶结点的结构和叶结点的结构相同，即含有能够存储n-1个搜索码值和n个指针的存储单元的数据结构。只不过非叶结点中的所有指针都指向树中的结点；
③如果一个非叶结点有m个指针，则<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/title/08/02.gif" border="0" alt="" width="29" height="14" />≤m≤n。若m&lt;n，则非叶结点中指针Pm之后的所有空闲空间作为预留空间，与叶结点的区别在于结点的最后一个指针Pm和Pn的位置与指向不同，如图3所示；</td>
</tr>
<tr>
<td align="left">
<div>图3 <strong>B+树</strong>索引的非叶结点结构
<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/chapter/08/8-3-3.gif" border="0" alt="" width="420" height="80" /></div></td>
</tr>
<tr>
<td align="left">④在一个含有m个指针的非叶结点中，指针Pi(i=2,…,m-1)指向一棵子树，该子树的所有结点的搜索码值大于等于Ki-1而小于Ki。指针Pm指向子树中所含搜索码值大于等于Km-1的那一部分，而指针P1指向子树中所含搜索码值小于K1的那一部分，如图4所示。</td>
</tr>
<tr>
<td align="left">
<div>图4  B<sup>+</sup>树索引的非叶结点中指针Pi的指向
<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/chapter/08/8-3-4.gif" border="0" alt="" width="420" height="106" /></div></td>
</tr>
<tr>
<td align="left">4、B<sup>+</sup>树索引的根结点
①根结点的结构也与叶结点相同；
②根结点包含的指针数可以小于<img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/title/08/02.gif" border="0" alt="" width="29" height="14" />。但是，除非整棵树只有一个结点，否则根结点必须至少包含两个指针。图5给出一个B<sup>+</sup>树结构的示意图。</td>
</tr>
<tr>
<td align="left">
<div>图5 account关系的B<sup>+</sup>树索引结构</div>
<div><img src="http://www.nuist.edu.cn/courses/jsj/GD_jsj_013b/image/chapter/08/8-3-5.gif" border="0" alt="" width="420" height="134" /></div>
<div>5、部分操作的C语言实现</div>
<div>
<pre lang="c">/* btrees.h */
/*
* 平衡多路树的一种重要方案。
* 在 1970 年由 R. Bayer 和 E. McCreight 发明。
*/
#define M 1
/* B  树的阶，即非根节点中键的最小数目。
* 有些人把阶定义为非根节点中子树的最大数目。
*/
typedef int typekey;
typedef struct btnode { /* B-Tree 节点 */
int d; /* 节点中键的数目 */
typekey  k[2*M]; /* 键 */
char *v[2*M]; /* 值 */
struct btnode *p[2*M+1]; /*  指向子树的指针 */
} node, *btree;
/*
* 每个键的左子树中的所有的键都小于这个键，
*  每个键的右子树中的所有的键都大于等于这个键。
* 叶子节点中的每个键都没有子树。
*/

/* 当 M 等于 1 时也称为 2-3  树
* +----+----+
* | k0 | k1 |
* +-+----+----+---
* | p0 | p1 |  p2 |
* +----+----+----+
*/
extern int btree_disp; /* 查找时找到的键在节点中的位置  */
extern char * InsValue; /* 与要插的键相对应的值 */

extern btree  search(typekey, btree);
extern btree insert(typekey,btree);
extern btree  delete(typekey,btree);
extern int height(btree);
extern int  count(btree);
extern double payload(btree);
extern btree deltree(btree);
/* end of btrees.h */

/*******************************************************/

/*  btrees.c */
#include
#include
#include "btrees.h"

btree  search(typekey, btree);
btree insert(typekey,btree);
btree  delete(typekey,btree);
int height(btree);
int count(btree);
double  payload(btree);
btree deltree(btree);

static void  InternalInsert(typekey, btree);
static void InsInNode(btree, int);
static void SplitNode(btree, int);
static btree NewRoot(btree);

static void InternalDelete(typekey, btree);
static void  JoinNode(btree, int);
static void MoveLeftNode(btree t, int);
static  void MoveRightNode(btree t, int);
static void DelFromNode(btree t, int);
static btree FreeRoot(btree);

static btree delall(btree);
static  void Error(int,typekey);

int btree_disp; /* 查找时找到的键在节点中的位置 */
char *  InsValue = NULL; /* 与要插的键相对应的值 */
static int flag; /* 节点增减标志 */
static  int btree_level = 0; /* 多路树的高度 */
static int btree_count = 0; /* 多路树的键总数 */
static int node_sum = 0; /* 多路树的节点总数 */
static int level; /*  当前访问的节点所处的高度 */
static btree NewTree; /* 在节点分割的时候指向新建的节点 */
static  typekey InsKey; /* 要插入的键 */

btree search(typekey key, btree t)
{
int i,j,m;
level=btree_level-1;
while (level &gt;= 0){
for(i=0,  j=t-&gt;d-1; i t-&gt;k[m])?(i=m+1):(j=m));
if (key == t-&gt;k){
btree_disp = i;
return t;
}
if (key &gt; t-&gt;k) /* i ==  t-&gt;d-1 时有可能出现 */
i++;
t = t-&gt;p;
level--;
}
return  NULL;
}

btree insert(typekey key, btree t)
{
level=btree_level;
InternalInsert(key, t);
if (flag == 1) /*  根节点满之后，它被分割成两个半满节点 */
t=NewRoot(t); /* 树的高度增加 */
return t;
}

void InternalInsert(typekey key, btree t)
{
int i,j,m;

level--;
if (level &lt; 0){ /* 到达了树的底部: 指出要做的插入 */
NewTree =  NULL; /* 这个键没有对应的子树 */
InsKey = key; /* 导致底层的叶子节点增加键值+空子树对 */
btree_count++;
flag = 1; /* 指示上层节点把返回的键插入其中 */
return;
}
for(i=0, j=t-&gt;d-1; i t-&gt;k[m])?(i=m+1):(j=m));
if (key == t-&gt;k)  {
Error(1,key); /* 键已经在树中 */
flag = 0;
return;
}
if (key  &gt; t-&gt;k) /* i == t-&gt;d-1 时有可能出现 */
i++;
InternalInsert(key,  t-&gt;p);

if (flag == 0)
return;
/* 有新键要插入到当前节点中 */
if  (t-&gt;d &lt; 2*M) {/* 当前节点未满 */
InsInNode(t, i); /* 把键值+子树对插入当前节点中 */
flag = 0; /* 指示上层节点没有需要插入的键值+子树，插入过程结束 */
}
else /*  当前节点已满，则分割这个页面并把键值+子树对插入当前节点中 */
SplitNode(t, i); /* 继续指示上层节点把返回的键值+子树插入其中  */
}

/*
* 把一个键和对应的右子树插入一个节点中
*/
void InsInNode(btree t,  int d)
{
int i;
/* 把所有大于要插入的键值的键和对应的右子树右移 */
for(i = t-&gt;d; i  &gt; d; i--){
t-&gt;k = t-&gt;k[i-1];
t-&gt;v = t-&gt;v[i-1];
t-&gt;p[i+1] = t-&gt;p;
}
/* 插入键和右子树 */
t-&gt;k = InsKey;
t-&gt;p[i+1] = NewTree;
t-&gt;v = InsValue;
t-&gt;d++;
}
/*
* 前件是要插入一个键和对应的右子树，并且本节点已经满
* 导致分割这个节点，插入键和对应的右子树，
*  并向上层返回一个要插入键和对应的右子树
*/
void SplitNode(btree t, int d)
{
int i,j;
btree temp;
typekey temp_k;
char *temp_v;
/* 建立新节点 */
temp =  (btree)malloc(sizeof(node));
/*
*  +---+--------+-----+-----+--------+-----+
* | 0 | ...... | M | M+1 | ......  |2*M-1|
* +---+--------+-----+-----+--------+-----+
* |&lt;- M+1  -&gt;|&lt;- M-1 -&gt;|
*/
if (d &gt; M) { /* 要插入当前节点的右半部分 */
/* 把从  2*M-1 到 M+1 的 M-1 个键值+子树对转移到新节点中,
* 并且为要插入的键值+子树空出位置 */
for(i=2*M-1,j=M-1; i&gt;=d; i--,j--) {
temp-&gt;k[j] = t-&gt;k;
temp-&gt;v[j] = t-&gt;v;
temp-&gt;p[j+1] = t-&gt;p[i+1];
}
for(i=d-1,j=d-M-2; j&gt;=0; i--,j--) {
temp-&gt;k[j] = t-&gt;k;
temp-&gt;v[j] = t-&gt;v;
temp-&gt;p[j+1] = t-&gt;p[i+1];
}
/*  把节点的最右子树转移成新节点的最左子树 */
temp-&gt;p[0] = t-&gt;p[M+1];
/* 在新节点中插入键和右子树 */
temp-&gt;k[d-M-1] = InsKey;
temp-&gt;p[d-M] = NewTree;
temp-&gt;v[d-M-1] = InsValue;
/* 设置要插入上层节点的键和值 */
InsKey =  t-&gt;k[M];
InsValue = t-&gt;v[M];

}
else { /* d &lt;= M */
/* 把从 2*M-1 到 M 的 M 个键值+子树对转移到新节点中 */
for(i=2*M-1,j=M-1; j&gt;=0;  i--,j--) {
temp-&gt;k[j] = t-&gt;k;
temp-&gt;v[j] = t-&gt;v;
temp-&gt;p[j+1] = t-&gt;p[i+1];
}
if (d == M) /* 要插入当前节点的正中间 */
/* 把要插入的子树作为新节点的最左子树 */
temp-&gt;p[0] = NewTree;
/*  直接把要插入的键和值返回给上层节点 */
else { /* (d /* 把节点当前的最右子树转移成新节点的最左子树 */
temp-&gt;p[0] = t-&gt;p[M];
/* 保存要插入上层节点的键和值 */
temp_k =  t-&gt;k[M-1];
temp_v = t-&gt;v[M-1];
/* 把所有大于要插入的键值的键和对应的右子树右移 */
for(i=M-1; i&gt;d; i--) {
t-&gt;k = t-&gt;k[i-1];
t-&gt;v =  t-&gt;v[i-1];
t-&gt;p[i+1] = t-&gt;p;
}
/* 在节点中插入键和右子树 */
t-&gt;k[d] = InsKey;
t-&gt;p[d+1] = NewTree;
t-&gt;v[d] = InsValue;
/* 设置要插入上层节点的键和值 */
InsKey = temp_k;
InsValue = temp_v;
}
}
t-&gt;d =M;
temp-&gt;d = M;
NewTree = temp;
node_sum++;
}

btree delete(typekey key, btree t)
{
level=btree_level;
InternalDelete(key, t);
if (t-&gt;d == 0)
/* 根节点的子节点合并导致根节点键的数目随之减少，
* 当根节点中没有键的时候，只有它的最左子树可能非空 */
t=FreeRoot(t);
return t;
}

void InternalDelete(typekey key, btree t)
{
int i,j,m;
btree  l,r;
int lvl;

level--;
if (level &lt; 0) {
Error(0,key); /*  在整个树中未找到要删除的键 */
flag = 0;
return;
}
for(i=0, j=t-&gt;d-1; i  t-&gt;k[m])?(i=m+1):(j=m));
if (key == t-&gt;k) { /* 找到要删除的键 */
if  (t-&gt;v != NULL)
free(t-&gt;v); /* 释放这个节点包含的值 */
if (level == 0) { /*  有子树为空则这个键位于叶子节点 */
DelFromNode(t,i);
btree_count--;
flag = 1;
/*  指示上层节点本子树的键数量减少 */
return;
} else { /* 这个键位于非叶节点 */
lvl = level-1;
/* 找到前驱节点 */
r = t-&gt;p;
while (lvl &gt; 0) {
r =  r-&gt;p[r-&gt;d];
lvl--;
}
t-&gt;k=r-&gt;k[r-&gt;d-1];
t-&gt;v=r-&gt;v[r-&gt;d-1];
r-&gt;v[r-&gt;d-1]=NULL;
key =  r-&gt;k[r-&gt;d-1];
}
}
else if (key &gt; t-&gt;k) /* i == t-&gt;d-1  时有可能出现 */
i++;
InternalDelete(key,t-&gt;p);
/* 调整平衡 */
if (flag  == 0)
return;
if (t-&gt;p-&gt;d &lt; M) {
if (i == t-&gt;d) /*  在最右子树中发生了删除 */
i--; /* 调整最右键的左右子树平衡 */
l = t-&gt;p;
r =  t-&gt;p[i+1];
if (r-&gt;d &gt; M)
MoveLeftNode(t,i);
else if(l-&gt;d  &gt; M)
MoveRightNode(t,i);
else {
JoinNode(t,i);
/*  继续指示上层节点本子树的键数量减少 */
return;
}
flag = 0;
/*  指示上层节点本子树的键数量没有减少，删除过程结束 */
}
}

/*
* 合并一个节点的某个键对应的两个子树
*/
void JoinNode(btree t, int d)
{
btree l,r;
int i,j;
l  = t-&gt;p[d];
r = t-&gt;p[d+1];

/* 把这个键下移到它的左子树 */
l-&gt;k[l-&gt;d] = t-&gt;k[d];
l-&gt;v[l-&gt;d] = t-&gt;v[d];
/*  把右子树中的所有键值和子树转移到左子树 */
for (j=r-&gt;d-1,i=l-&gt;d+r-&gt;d; j &gt;= 0 ;  j--,i--) {
l-&gt;k = r-&gt;k[j];
l-&gt;v = r-&gt;v[j];
l-&gt;p =  r-&gt;p[j];
}
l-&gt;p[l-&gt;d+r-&gt;d+1] = r-&gt;p[r-&gt;d];
l-&gt;d  += r-&gt;d+1;
/* 释放右子树的节点 */
free(r);
/* 把这个键右边的键和对应的右子树左移 */
for (i=d; i &lt; t-&gt;d-1; i++) {
t-&gt;k = t-&gt;k[i+1];
t-&gt;v =  t-&gt;v[i+1];
t-&gt;p[i+1] = t-&gt;p[i+2];
}
t-&gt;d--;
node_sum--;
}
/*
* 从一个键的右子树向左子树转移一些键，使两个子树平衡
*/
void  MoveLeftNode(btree t, int d)
{
btree l,r;
int m; /* 应转移的键的数目 */
int i,j;
l = t-&gt;p[d];
r = t-&gt;p[d+1];
m = (r-&gt;d -  l-&gt;d)/2;

/* 把这个键下移到它的左子树 */
l-&gt;k[l-&gt;d] = t-&gt;k[d];
l-&gt;v[l-&gt;d] = t-&gt;v[d];
/* 把右子树的最左子树转移成左子树的最右子树
* 从右子树向左子树移动  m-1 个键+子树对 */
for (j=m-2,i=l-&gt;d+m-1; j &gt;= 0; j--,i--) {
l-&gt;k =  r-&gt;k[j];
l-&gt;v = r-&gt;v[j];
l-&gt;p = r-&gt;p[j];
}
l-&gt;p[l-&gt;d+m] = r-&gt;p[m-1];
/* 把右子树的最左键提升到这个键的位置上 */
t-&gt;k[d] = r-&gt;k[m-1];
t-&gt;v[d] = r-&gt;v[m-1];
/*  把右子树中的所有键值和子树左移 m 个位置 */
r-&gt;p[0] = r-&gt;p[m];
for (i=0; id-m; i++) {
r-&gt;k = r-&gt;k[i+m];
r-&gt;v = r-&gt;v[i+m];
r-&gt;p =  r-&gt;p[i+m];
}
r-&gt;p[r-&gt;d-m] = r-&gt;p[r-&gt;d];
l-&gt;d+=m;
r-&gt;d-=m;
}
/*
* 从一个键的左子树向右子树转移一些键，使两个子树平衡
*/
void  MoveRightNode(btree t, int d)
{
btree l,r;
int m; /* 应转移的键的数目 */
int i,j;
l = t-&gt;p[d];
r = t-&gt;p[d+1];

m = (l-&gt;d -  r-&gt;d)/2;
/* 把右子树中的所有键值和子树右移 m 个位置 */
r-&gt;p[r-&gt;d+m]=r-&gt;p[r-&gt;d];
for (i=r-&gt;d-1; i&gt;=0; i--) {
r-&gt;k[i+m] = r-&gt;k;
r-&gt;v[i+m] = r-&gt;v;
r-&gt;p[i+m] =  r-&gt;p;
}
/* 把这个键下移到它的右子树 */
r-&gt;k[m-1] = t-&gt;k[d];
r-&gt;v[m-1] = t-&gt;v[d];
/* 把左子树的最右子树转移成右子树的最左子树 */
r-&gt;p[m-1] =  l-&gt;p[l-&gt;d];
/* 从左子树向右子树移动 m-1 个键+子树对 */
for (i=l-&gt;d-1,j=m-2;  j&gt;=0; j--,i--) {
r-&gt;k[j] = l-&gt;k;
r-&gt;v[j] = l-&gt;v;
r-&gt;p[j] = l-&gt;p;
}
/* 把左子树的最右键提升到这个键的位置上 */
t-&gt;k[d] =  l-&gt;k;
t-&gt;v[d] = l-&gt;v;
l-&gt;d-=m;
r-&gt;d+=m;
}
/*
* 把一个键和对应的右子树从一个节点中删除
*/
void DelFromNode(btree t, int d)
{
int i;
/* 把所有大于要删除的键值的键左移 */
for(i=d; i &lt; t-&gt;d-1; i++) {
t-&gt;k = t-&gt;k[i+1];
t-&gt;v = t-&gt;v[i+1];
}
t-&gt;d--;
}
/*
* 建立有两个子树和一个键的根节点
*/
btree NewRoot(btree t)
{
btree temp;
temp = (btree)malloc(sizeof(node));
temp-&gt;d = 1;
temp-&gt;p[0] = t;
temp-&gt;p[1] = NewTree;
temp-&gt;k[0] = InsKey;
temp-&gt;v[0] = InsValue;
btree_level++;
node_sum++;
return(temp);
}
/*
* 释放根节点，并返回它的最左子树
*/
btree  FreeRoot(btree t)
{
btree temp;
temp = t-&gt;p[0];
free(t);
btree_level--;
node_sum--;
return temp;
}

void Error(int  f,typekey key)
{
if (f)
printf("Btrees error: Insert %d!\n",key);
else
printf("Btrees error: delete %d!\n",key);
}

int  height(btree t)
{
return btree_level;
}

int count(btree t)
{
return btree_count;
}
double payload(btree t)
{
if  (node_sum==0)
return 1;
return (double)btree_count/(node_sum*(2*M));
}
btree deltree (btree t)
{
level=btree_level;
btree_level =  0;
return delall(t);

}
btree delall(btree t)
{
int i;
level--;
if (level &gt;= 0) {
for (i=0; i &lt; t-&gt;d; i++)
if  (t-&gt;v != NULL)
free(t-&gt;v);
if (level &gt; 0)
for (i=0; i&lt;=  t-&gt;d ; i++)
t-&gt;p=delall(t-&gt;p);
free(t);
}
return NULL;
}

/* end of btrees.c */</pre>
</div></td>
</tr>
</tbody>
</table>
</div>
原帖地址：http://blog.csdn.net/hmsuccess/archive/2008/04/06/2255351.aspx
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2011-01-07 02:22:47</wp:post_date>
		<wp:post_date_gmt>2011-01-06 18:22:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>b%e6%a0%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1308]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Transactions - An InnoDB Tutorial</title>
		<link>http://www.themysql.com/mysql/transactions-an-innodb-tutorial.html</link>
		<pubDate>Thu, 06 Jan 2011 18:31:09 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[非常给力的一篇文章，原文地址：http://mysqldump.azundris.com/archives/77-Transactions-An-InnoDB-Tutorial.html

InnoDB does transactions. Meaning: It collects statements working on InnoDB tables and applies them on COMMIT to all tables "at once". Either all of these statements inside one transaction succeed ("commit") or all of them fail ("rollback"), changing nothing.

By default, the database is in AUTOCOMMIT mode. Meaning: The server sees a virtual COMMIT command after each statement. You can disable autocommit completely, or you are starting an explicit transaction inside autocommit using the BEGIN statement.
<pre lang='sql'>
root on mysql.sock [innodemo]&gt; begin;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [innodemo]&gt; insert into kris ( d ) values ( "vier" );

Query OK, 1 row affected (0.00 sec)

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+

| id | d    |

+----+------+

|  1 | eins |

|  2 | zwei |

|  3 | drei |

|  4 | vier |

+----+------+

4 rows in set (0.00 sec)

root on mysql.sock [innodemo]&gt; rollback;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+

| id | d    |

+----+------+

|  1 | eins |

|  2 | zwei |

|  3 | drei |

+----+------+

3 rows in set (0.00 sec)
</pre>
Here we start a transaction with BEGIN, temporarily disabling autocommit. This is the recommended way to work. A row is inserted into the table. For our own connection this row is now visible. We then end the transaction (returning to autocommit), but not with COMMIT, but ROLLBACK instead. This undoes all changes inside the transaction, which we can verify with another SELECT.

<strong>InnoDB stuff on disk</strong>

<pre lang='sql'>
linux:/export/data/rootforum/data # ls -lh ib* innodemo

-rw-rw---- 1 mysql mysql   5M Jan  9 18:27 ib_logfile0

-rw-rw---- 1 mysql mysql   5M Jan  9 18:28 ib_logfile1

-rw-rw---- 1 mysql mysql  10M Jan  9 18:27 ibdata1

innodemo:

total 112K

-rw-rw---- 1 mysql mysql   61 Jan  9 18:03 db.opt

-rw-rw---- 1 mysql mysql 8.4K Jan  9 18:28 kris.frm

-rw-rw---- 1 mysql mysql  96K Jan  9 18:28 kris.ibd
</pre>
Each InnoDB installation has at least one datafile, commonly called ibdata1 and at least two redo logfiles named ib_logfile0 and ib_logfile1. Position, size, number and name of these files can be configured with some freedom.

Our InnoDB uses the configuration setting innodb_file_per_table = 1. Meaning: Our data is being stored in .ibd files next to the .frm files inside the schema directory. In our example this comes down to $datadir/innodemo/kris.ibd. The extension .ibd is for InnoBase Data.

Despite the fact that actual data is being stored in .ibd files we still need the central ibdata file and at least two redo logs. The ibdata file houses the InnoDB shadow data dictionary, a copy of the table definitions from the .frm files. It also contains the undo log, which we will visit later in more detail.

The redo logfiles log all data modifying operations.

Unlike MyISAM you cannot move around .ibd files at the filesystem level - do not move or rename these files from outside the database. Also, do not copy them into another instance of MySQL. In a best case scenario InnoDB detects this and rejects the file. The worst case is data loss.

If you happen to operate innodb with innodb_file_per_table = 0 there is only one ibdata file and it will contain all data. The schema directory then has only .frm files.

Space inside an ibdata file can be freed and reclaimed, but the file itself will never shrink. If you are changing an instance that has been operating with innodb_file_per_table = 0 to innodb_file_per_table = 1, you may export data from inside the ibdata file to individual .ibd files using "ALTER TABLE t ENGINE=InnoDB". This will remove the table from the ibdata file and free the space inside you ibdata. But still your ibdata will not shrink. The only way to get rid of the large ibdata file is to dump the database and then recreate a new instance from the dump.

The amount of free space inside your ibdata or .ibd file is show as a comment in the output of SHOW TABLE STATUS for each table. The numbers are of course always multiples of 16K, the InnoDB page size.

It is possible to have more than one ibdata file, but it is not possible at all to control which tables or part of a table will be inside which ibdata file. If you set innodb_file_per_table, each table will be completely self-contained inside its own .idb file (but that information is of very limited use).

<strong>The Undo Log</strong>

In InnoDB, each table has two hidden columns, a transaction number and a pointer to the previous version of that row inside the undo log, called the rollback pointer.

Whenever we are chaning a row in InnoDB the old version of that row including its old transaction number is being copied into the undo log. The new version of the row including a new transaction number is installed inside the .ibd file. The rollback pointer of the new row will point to the old version of that row inside the undo log.
<pre lang='sql'>
root on mysql.sock [innodemo]&gt; begin;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [innodemo]&gt; update kris set d = "one" where id = 1;

Query OK, 1 row affected (0.01 sec)

Rows matched: 1  Changed: 1  Warnings: 0

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+------+          +----+------+------+

| id | d    | txn# |          | id | d    | txn# |

+----+------+------+          +----+------+------+

|  1 | one  |   2  | ------&gt;  |  1 | eins |   1  |

|  2 | zwei |   1  |          +----+------+------+

|  3 | drei |   1  |

+----+------+------+

3 rows in set (0.00 sec)
</pre>
The example above shows these hidden columns and the undo log entry for illustrative purposes only. I have been faking this by hand, there is no statement that produces such output.

The linked list of row versions can span multiple versions of a row, that is, each entry inside the undo log can point to an even older version of that row and so on. If the undo log is never purged, it will eventually go back to the time when the database server had been installed. But fortunately there is the purge thread which will automatically collect all rows from the undo log that are older than the oldest active transaction inside the system. This prevents infinite growth of the undo log.

Copying a version of a row from the table into the undo log and the linked list of row versions are called MVCC, Multiversion Concurrency Control.

The way InnoDB implements MVCC is optimized for COMMIT. When a row is being committed, nothing needs to be done. The transaction is marked as committed, the rollback pointers are kept and all is fine.

<pre lang='sql'>
root on mysql.sock [innodemo]&gt; rollback;

Query OK, 0 rows affected (0.01 sec)

+----+------+------+          +----+------+------+

| id | d    | txn# |          | id | d    | txn# |

+----+------+------+ ROLLBACK +----+------+------+

|  1 | eins |   1  | &lt;------- |    |      |      | |  2 | zwei |   1  |          +----+------+------+ |  3 | drei |   1  | +----+------+------+ 3 rows in set (0.00 sec) A rollback is not so easy: We have quite some work to do. For each row affected by the rollback we have to retrieve the data from the undo log and put it back into place to undo our change to the original table. If we had been affecting a lot of rows with our transaction this can take quite some time, because the undo log is organized by row and not by page. It is adviseable not to make your transactions to large: In many cases a transaction size of 1.000 to 10.000 rows is quite fast enough for bulk data load but also acceptable in terms of rollback time. Transaction Isolation Level Read Uncomitted When we are looking at our transaction example from above from the point of view of a second connection it may be that we can observe the change or not. The first connection does: CODE: root on mysql.sock [innodemo]&gt; begin;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [innodemo]&gt; update kris set d = "one" where id = 1;

Query OK, 1 row affected (0.00 sec)

Rows matched: 1  Changed: 1  Warnings: 0

We are leaving this open not doing either COMMIT or ROLLBACK. In a second window we are opening a connection to the database, checking what is visible:

CODE:
root on mysql.sock [(none)]&gt; use innodemo;

Database changed

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+

| id | d    |

+----+------+

|  1 | eins |

|  2 | zwei |

|  3 | drei |

+----+------+

3 rows in set (0.00 sec)
</pre>
The first thing we observe is that our read access does not hang or wait despite the fact that a transaction is in progress. In MVCC, reading and writing operations never block each other. This is a big difference to MyISAM and one reason why InnoDB is the recommended storage engine for use cases with a high write concurrency - even if it has to make a copy of each row it changes.

We are seeing the old value of the row with id = 1. We do know from above that the .ibd file alreay contains the changed value, but we do not see it. This indicates that the database has been following the rollback pointer into the undo log and retrived an old version of that row for us. This is different from the "inside" view the first connection gets of its own transaction, where we can see our own changes immediately even before we COMMIT.

But we can change our second external connection in a way that it will see this uncomitted data as well. For this we change the TRANSACTION ISOLATION LEVEL to READ UNCOMMITTED.
<pre lang='sql'>
root on mysql.sock [innodemo]&gt; set transaction isolation level read uncommitted;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+

| id | d    |

+----+------+

|  1 | one  |

|  2 | zwei |

|  3 | drei |

+----+------+

3 rows in set (0.00 sec)
</pre>
We learn: The writing connection will always perform the same amount of work. It will always make a copy of the data it is changing and put it into the undo log. This is necessary to enable rollback. So multiple versions of the row always exist.

A reading connection can choose on the fly which version of the data shall be visible to it. Each reader can chose its own isolation level without affecting other connections, and each reader can change its own isolation level as it wishes, because all versions of the data will always be present.

In READ UNCOMITTED mode we always look at data inside the .ibd file and never follow any rollback pointers. We may see data that is not yet committed and may never be committed. We are looking at a hypothetical version of reality that may never be realized. For applications that is often not the desired mode of operation.

Transaction Isolation Level Read Comitted

Changing the TRANSACTION ISOLATION LEVEL to READ COMMITTED a reader will not see uncommitted rows in an .ibd file. For all rows that have not been changed by the uncommitted transaction we get data from the .ibd file as before, but for all rows that hold uncommitted data InnoDB follows the rollback pointer one step into the past into the undo log, fetching the newest committed version of that row. Thus we will always see data that is "really there" and all those hypothetical versions of reality that are part of READ UNCOMMITTED are being filtered out.

This is a lot better, but still not good enough. It may be that we are looking at the same data twice, and the data may be changing between these two looks. For example we might have an application which maintains a counter inside the database. That is, inside the application we might have a sequence of commands such as "begin; update kris set d = d + 1 where id = 2; commit;". This will increment a counter for the row id = 2

If in a second connection we are looking at the table with "READ COMMITTED" we will see the counter move for that row id = 2. That is the case even if our second connection is inside its own transaction - the sequence BEGIN-SELECT-SELECT-COMMIT, a read-only transaction, has no meaning in READ COMMITTED.

<pre lang='sql'>
root on mysql.sock [innodemo]&gt; set transaction isolation level read committed;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [innodemo]&gt; begin;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+

| id | d    |

+----+------+

|  1 | eins |

|  2 | zwei |

|  3 | drei |

+----+------+

3 rows in set (0.01 sec)

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+

| id | d    |

+----+------+

|  1 | eins |

|  2 | 1    |

|  3 | drei |

+----+------+

3 rows in set (0.00 sec)

root on mysql.sock [innodemo]&gt; select * from kris;

+----+------+

| id | d    |

+----+------+

|  1 | eins |

|  2 | 2    |

|  3 | drei |

+----+------+

3 rows in set (0.00 sec)

root on mysql.sock [innodemo]&gt; commit;

Query OK, 0 rows affected (0.00 sec)
</pre>
<strong>Transaction Isolation Level Repeatable-Read</strong>

This is precisely what is different once we move to TRANSACTION ISOLATION LEVEL REPEATABLE READ. The moment we start a transaction with BEGIN our view of the database becomes an unchanging snapshot which is held until we end our transaction. In REPEATABLE READ there is such a thing as a read-only transaction.

Internally this is being done by following the rollback pointer for a row not just one step, but as long until we find the newest version of that row that had been visible for the reader when the reader started its transaction. So while writing connections change the database again and again more and more old versions of the row go into the undo log where they are being archived.

While READ COMMITTED only dives just a single step into the rows past, it may be that many versions of a rows past have to be skipped for a certain reader, diving into the undo log to an arbitrary depth. Thus the lifetime of entries in the undo log is no longer fixed and the undo log can grow and shrink. InnoDB has a global purge thread (which is not shown in SHOW PROCESSLIST). The purge thread looks at the list of currently active transactions and determines which is the oldest entry inside the undo log that is still needed by the oldest transaction. It will then delete all entries from the undo log that are even older than this.

This may mean that a long running transaction effectively stalls the purge thread. If your database for example runs "mysqldump --single-transaction" to export a large database it may be that this "single transaction" will take many minutes or even hours to finish. The purge thread cannot proceed during this time. If you have many writes to this database during this time your undo log will grow, potentially even grow a lot.

As said before the undo log is always part of your "ibdata" file, even if you are running with innodb_file_per_table = 1. So even on such servers the ibdata file can grow - 256M to 1G are completely normal.

If an ibdata file is too small and cannot grow because the innodb_data_file_path is defined without "autoextend" or because the disk is full this may lead to error messages that are hard to debug ("table full" despite the fact that a lot of space is available) and it will lead to unwanted rollbacks.

Transaction Isolation Level SERIALIZEABLE and SELECT ... FOR UPDATE

While REPEATABLE READ will serve all our readers needs we are still missing a mechanism for dealing with READ-MODIFY-WRITE cycles correctly. A RMW cycle is an access where the application is reading data, changes it inside the application and then put the changed data back into the database. For this to happen consistently we must make sure that the data inside the database will not change after we have read it into the application. Otherwise we will end up with an ugly race condition when two connections are trying to change the same row at the same time.

We achive this consistency by using a transaction in which we are reading data using a SELECT ... FOR UPDATE statement. This is a select statement that performs a normal read but generates locks like an update statement. Meaning in our case that we will get exclusive locks (X locks) on all rows read by the select through an index. The locks are held until the transaction ends. "FOR UPDATE" essentially serializes all transactions on specified rows through these locks.

And as usual there are a few tricks things to take care of:

The first tricky thing is that the locks are generated using the index. When we are looking at an EXPLAIN plan with "using where" this often means that the index selects more lines than we will see in the result set. This is because there is an additional constraint inside the WHERE clause which further reduces the result set generated by the index accesses. But because locks are generated by the index accesses it may also mean that we generate more locks than just for the rows visible in the result set of our SELECT ... FOR UPDATE statement. Maybe a LOT more locks.

To demonstrate that we create a table with two columns a and b. a is our primary key and b is not indexed. Running a SELECT ... FOR UPDATE with WHERE a &gt; ... AND b = ... we will see that all rows found by the a-condition are locked - even those where the b-condition is not true.
<pre lang='sql'>
--

-- Create table

--

root on mysql.sock [kris]&gt; create table t (

a integer not null,

b integer not null

) engine = innodb;

Query OK, 0 rows affected (0.16 sec)

--

-- Generate data

--

root on mysql.sock [kris]&gt; insert into t values ( rand() * 100000, rand() * 10);

Query OK, 1 row affected (0.01 sec)

root on mysql.sock [kris]&gt;  insert into t select rand() * 100000, rand() * 10 from t;

Query OK, 1 row affected (0.01 sec)

Records: 1  Duplicates: 0  Warnings: 0

...

root on mysql.sock [kris]&gt;  insert into t select rand() * 100000, rand() * 10 from t;

Query OK, 4096 rows affected (0.26 sec)

Records: 4096  Duplicates: 0  Warnings: 0

-- We still have duplicates preventing

-- creation of a primary key

root on mysql.sock [kris]&gt; create table dup as select a from t group by a having count(a) &gt; 1 ;

Query OK, 300 rows affected (0.08 sec)

Records: 300  Duplicates: 0  Warnings: 0

root on mysql.sock [kris]&gt; delete from t where a in ( select a from dup );

Query OK, 608 rows affected (5.65 sec)

root on mysql.sock [kris]&gt; alter table t add primary key (a);

Query OK, 7584 rows affected (0.40 sec)

Records: 7584  Duplicates: 0  Warnings: 0

root on mysql.sock [kris]&gt; drop table dup;

Query OK, 0 rows affected (0.00 sec)

--

-- the a-condition selects 62 rows

--

root on mysql.sock [kris]&gt;  select a, b from t where a &gt; 99000;

...

| 99490 |  8 |

...

62 rows in set (0.00 sec)

--

-- The actual demo: inside a transaction

-- do a SELECT ... FOR UPDATE

--

root on mysql.sock [kris]&gt; begin;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [kris]&gt;  select a, b from t where a &gt; 99000 and b = 10;

+-------+----+

| a     | b  |

+-------+----+

| 99839 | 10 |

| 99970 | 10 |

+-------+----+

2 rows in set (0.00 sec)
</pre>
We leave this hanging with no COMMIT or ROLLBACK. Inside a second connection we now try to change the pair (99490, 8). We see: The statement hangs due to an X-lock on that row.
<pre lang='sql'>
root on mysql.sock [kris]&gt; update t set b = 502 where a = 99490;

... hang ...

By creating an additional INDEX (a,b) and forcing its use our locking improves a lot: Only the two records (99839, 10) and (99970, 10) get X-locks and the second parallel update does not wait.
CODE:
root on mysql.sock [kris]&gt; begin;

Query OK, 0 rows affected (0.00 sec)

root on mysql.sock [kris]&gt;  select * from t force index (a) where a &gt; 99000 and b = 10;

+-------+----+

| a     | b  |

+-------+----+

| 99839 | 10 |

| 99970 | 10 |

+-------+----+

2 rows in set (0.00 sec)

root on mysql.sock [kris]&gt; explain select * from t force index (a) where a &gt; 99000 and b = 10\G

*************************** 1. row ***************************

id: 1

select_type: SIMPLE

table: t

type: range

possible_keys: a

key: a

key_len: 4

ref: NULL

rows: 63

Extra: Using where; Using index

1 row in set (0.00 sec)

The second connection:
CODE:
root on mysql.sock [kris]&gt; update t set b = 503 where a = 99490;

Query OK, 1 row affected (0.09 sec)

Rows matched: 1  Changed: 1  Warnings: 0
</pre>
The way X-locks are generated through the index has far reaching consequences: We absolutely have to double check each and every query plan of our SELECT ... FOR UPDATE statements. Not using proper indices here has detrimental effects on our performance. An ALL or INDEX inside the type column of such an EXPLAIN would indicate an index scan - and because we scan the entire index this is just a very expensive and slow way to create a table lock from row locks.

Another tricky thing is that InnoDB does not just lock rows, but also the gap behind a row in order to simplify its implementation of REPEATABLE READ. This "next key locking" can be turned of using a configuration statement with the unlikely name "innodb_locks_unsafe_for_binlog". If you turn this on, InnoDB will generate only row locks and not next key locks that span the gap to the next record as well.

At the transaction isolation level SERIALIZEABLE the system will behave just as with REPEATABLE READ, but it will execute each and every SELECT in a way as if it was a SELECT ... FOR UPDATE. Meaning: Each and every SELECT statement will create X-locks as if it were an UPDATE statement, each read will lock like a write. The will ultimately lead to a situation where even concurrent reads (locking like writes) will lock each other out. This is a behaviour even worse than MyISAM.

The transaction isolation level SERIALIZEABLE is unnecessary: It is never needed as long as the SQL inside the application will create proper locks using ... FOR UPDATE. Only applications that do not do this and cannot be fixed need SERIALIZEABLE.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2011-01-07 02:31:09</wp:post_date>
		<wp:post_date_gmt>2011-01-06 18:31:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>transactions-an-innodb-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[825]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python内存泄露</title>
		<link>http://www.themysql.com/python/python%e5%86%85%e5%ad%98%e6%b3%84%e9%9c%b2.html</link>
		<pubDate>Wed, 12 Jan 2011 08:10:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<h5>python内存泄露</h5>
下面的例子显示了一个典型的内存泄露：
<pre lang='python'>
#!/usr/local/bin/python2.7
class LeakTest(object):
    def __init__(self):
        print 'Object with id %d born here.' % id(self)
    def __del__(self):
        print 'Object with id %d dead here.' % id(self)
def foo():
    A=LeakTest()
    B=LeakTest()
    A.b=B
    B.a=A
foo()
[root@SJSWT44-122 ~]# python2.7 test.py 
Object with id 47432678233872 born here.
Object with id 47432678233936 born here.
</pre>
类似于死锁，导致互相的引用计数器都无法清零，因此无法释放掉内存
另外当对象成为容器对象的一个元素，引用计数器加1

<h5>如何侦察那些对象没有被释放，一直在吞噬内存。</h5>
objgraph is a module that lets you visually explore Python object graphs.
<a href='http://mg.pov.lt/objgraph/'>官方地址</a>
下载之后，python setup.py install就安装成功了
主要是使用objgraph.show_most_common_types(limit=100)来显示当前内存中的对象
<pre lang='python'>
#注意leak_test对象必须继承object，否则objgraph无法侦察到
import objgraph
class leak_test(object):
    def __init__(self):
        property="abcd"
    def __del__(self):
        pass
array=[]
def test(array):
    for i in range(1,100):
        a=leak_test()
        array.append(a)
print 'start'
test(array)
objgraph.show_most_common_types(limit=100)
print 'end'
</pre>


参考文献：
1,<a href='http://www.czug.org/blog/eishn/blogentry.2005-01-12.8557597867'>Python中的内存泄漏</a>
2,<a href='http://blog.csdn.net/rstevens/archive/2010/11/09/5997974.aspx'>python内存泄露的诊断</a>
3,<a href='http://www.wentrue.net/blog/?p=164'>python垃圾回收机制对list.append()的性能影响</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2011-01-12 16:10:47</wp:post_date>
		<wp:post_date_gmt>2011-01-12 08:10:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python%e5%86%85%e5%ad%98%e6%b3%84%e9%9c%b2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[python,python内存泄露]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[描述了python泄露，如何侦测内存泄露，如何解决内存泄露]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1699]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql init-connect选项与字符集</title>
		<link>http://www.themysql.com/mysql/mysql-init-connect%e9%80%89%e9%a1%b9%e4%b8%8e%e5%ad%97%e7%ac%a6%e9%9b%86.html</link>
		<pubDate>Thu, 20 Jan 2011 09:43:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[init-connect='SET NAMES utf8'
SET character_set_client = x;
SET character_set_results = x;
SET character_set_connection = x;
这三个选项应该配置的是服务器端的，而我们设置的character_set_server=utf8，默认这三个选项就是utf8的，因此这个指定我觉得没有作用。

Note that the content of init_connect is not executed for users that have the SUPER privilege. This is done so that an erroneous value for init_connect does not prevent all clients from connecting. For example, the value might contain a statement that has a syntax error, thus causing client connections to fail. Not executing init_connect for users that have the SUPER privilege enables them to open a connection and fix the init_connect value.

通过python进行测试
conn=MySQLdb.connect(host='127.0.0.1',user='admin2',passwd='',db='test',charset='gb2312')

mysql&gt; show grants for 'admin2'@'127.0.0.1';
+-----------------------------------------------------------------+
| Grants for admin2@127.0.0.1                                   |
+-----------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'admin2'@'127.0.0.1'                    |
| GRANT SELECT, INSERT ON `test`.`test` TO 'admin2'@'127.0.0.1' |
+-----------------------------------------------------------------+
2 rows in set (0.00 sec)

但是测试脚本执行的结果仍然显示乱码，并且character_set_client、character_set_results为MySQLdb.connect连接方法中设置的参数，init-connect没有执行。猜测假如init-connect='SET NAMES utf8'按照文档中所说的在连接连上server之后，执行set操作，session级别的参数character_set_client、character_set_results应该为utf8

但是将init-connect改为"insert into test.test values('hello')"，执行结果显示插入了hello

将mysql的log开启之后发现，对于使用python下面的MySQLdb来说，其中set autocommit=0是MySQLdb默认的方式。
conn=MySQLdb.connect(host='127.0.0.1',user='admin2',passwd='',db='test',charset='gb2312')
<span style="color: #ff0000;">MySQLdb先执行init-connect的SET NAMES utf8，然后将charset='gb2312'解释为SET NAMES gb2312执行，所以使用不同语言的客户端的时候最好都强制对字符集进行指定或者深入调查清楚默认的行为。</span>
101118  0:27:52     1 Connect   admin2@127.0.0.1 on test
1 Query     SET NAMES utf8
1 Query     SET NAMES gb2312
1 Query     set autocommit=0
conn=MySQLdb.connect(host='127.0.0.1',user='admin2',passwd='',db='test')
101118  0:27:52     1 Connect   admin2@127.0.0.1 on test
1 Query     SET NAMES utf8
1 Query     set autocommit=0

另外两篇讨论字符集的问题：

自己写的《MySQL中latin1与中文》<a href="http://www.themysql.com/?p=283">http://www.themysql.com/?p=283
</a>鸟哥写的《深入Mysql字符集设置》<a href="http://www.laruence.com/2008/01/05/12.html">http://www.laruence.com/2008/01/05/12.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2011-01-20 17:43:10</wp:post_date>
		<wp:post_date_gmt>2011-01-20 09:43:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-init-connect%e9%80%89%e9%a1%b9%e4%b8%8e%e5%ad%97%e7%ac%a6%e9%9b%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1878]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[mysql-init-connect%e9%80%89%e9%a1%b9]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>insert buffer探秘---节省随机IO的利器</title>
		<link>http://www.themysql.com/mysql/insert-buffer%e6%8e%a2%e7%a7%98-%e8%8a%82%e7%9c%81%e9%9a%8f%e6%9c%baio%e7%9a%84%e5%88%a9%e5%99%a8.html</link>
		<pubDate>Tue, 25 Jan 2011 07:40:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=205</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-size: small;">原文出处：<a href="http://www.mysqlperformanceblog.com/2009/01/13/some-little-known-facts-about-innodb-insert-buffer/">http://www.mysqlperformanceblog.com/2009/01/13/some-little-known-facts-about-innodb-insert-buffer/</a></span>

<span style="font-size: small;">中文翻译：<a href="http://hi.baidu.com/fishhust/blog/item/b9ffb3806ccaebde9023d919.html">http://hi.baidu.com/fishhust/blog/item/b9ffb3806ccaebde9023d919.html</a></span>

<span style="font-size: small;">Despite being standard Innodb feature forever Insert Buffers remains some kind of mysterious thing for a lot of people, so let me try to explain thing a little bit.</span>

<span style="font-size: small;">Innodb uses insert buffer to “cheat” and not to update index leaf pages when at once but “buffer” such updates so several updates to the same page can be performed with single sweep.---<span style="color: #ff0000;">innodb使用insert buffer忽悠数据库:它并不马上更新索引的叶子页,而是把若干对同一页面的更新缓存起来,一次性更新</span>. Insert buffer only can work for non-unique keys because until the merge is performed it is impossible to check if the value is unique.----<span>insert buffer只能用在非唯一索引中,因为列的唯一性通过索引来保证,所以在索引没有被更新前,数据库并不知道索引是否是唯一的.如果用在唯一索引中,在insert merge的过程中,可能就会导致唯一键冲突.这和insert delayed是一个道理,而insert delayed可能导致冲突</span></span>

<span style="font-size: small;">Insert buffer is allocated in the Innodb system table space. Even though it is called “buffer” similar to “doublewrite buffer” it is really the space in the tablepace. ---<span>insert buffer和doublewrite buffer一样,都不是内存buffer,而是保存在磁盘上,公共的表空间中.</span>Though it can be cached in the buffer pool same as other pages. This property allows insert buffer to survive transaction commits and even MySQL restarts. ----<span>存储在硬盘上的好处是,即使机器重启,这个buffer也不会丢失.</span>Really it may take <strong>weeks</strong> before the given index page is merged, though usually it is much sooner than that.-----<span>insert buffer的数据真正merge到数据库可能会经过很长的时间</span></span>

<span style="font-size: small;">There are two ways of insert buffer merge is happening. First is on demand merge – if accessed page contains unmerged records in insert buffer the merge is performed before page is made available. This means insert buffer can slow down read operations.----<span>如果页面含有没有被merge的记录,那么这页将被标记为不可用,所以对unmerged 页面的读取操作,必须先等待merge操作完成,然后才能进行.这会降低读取的速度.另一方面,对页面的读取操作,会触发insert buffer的merge操作.</span></span>

<span style="font-size: small;">The other way insert buffer is merged is by background thread. There are very little merges happening if system is loaded and merge process becomes more active if system is idle. ----<span>另一种情况是,如果系统负载很重,insert buffer的merge操作只会缓慢的进行;反之,当系统没有什么负载时,merge操作会很活跃.</span>This behavior can cause interesting results, like you had system lightly used and have very little IO activity, but when you remove the load from the system completely you see high IO load which goes for hours even after all buffer pool dirty pages are completed. ----<span>dirty pages的刷新操作也很消耗资源,通常在关闭数据库的时候,你会看到IO很重,mysql正是在purge dirty pages,但是也许在merge insert buffer,同样,如果系统一点负载也没有,但是mysql很活跃,也不要奇怪,它可能正在merge insert buffer</span>.This can be very surprising.</span>

<span style="font-size: small;">Stats about Innodb Insert Merge Buffer are available in <strong>SHOW INNODB STATUS</strong> output:</span>

<code>
<span style="font-family: 新宋体; font-size: small;">-------------------------------------
INSERT BUFFER AND ADAPTIVE HASH INDEX
-------------------------------------
Ibuf: size 7545, free list len 3790, seg size 11336<span>,==这里size+free=seg size,表示总共的insert buffer的大小,他们的单位都是page
</span>8075308 inserts, 7540969 merged recs, 2246304 merges
</span></code>

<span style="font-size: small;">The “seg size” is a full allocated size of segment in pages. So in this case it is about 180MB
The “free list” is number of pages which are free – containing no unmerged records. The <span style="color: #ff0000;">“size” is size (in pages) of insert buffer which is not merged.--<span>size里的是没有被merge的脏数据</span></span></span>

<span style="font-size: small;">The fact size is in pages is not really helpful because depending on the row size there can be different number of rows in the insert buffer --<span>insert buffer中的数据行大小不一致,所以不能根据size的大小来估计行的数量</span> and it is rows we see in performance stats, for example to understand when insert buffer merge will be completed.</span>

<span style="font-size: small;"><span style="color: #ff0000;">The “inserts” is number of inserts to insert buffer since start and number of merged records is number of records which were merged to their appropriate page locations since start.</span> ----<span>单位都是行.</span> So we know in this case insert buffer has grown 534339 records since start.---<span>inserts减去已经merge的即可</span> There is a temptation to use this number as count of unmerged rows in insert buffer but this would not be correct – <span style="color: #ff0000;">insert buffer may not be empty at the start. So you can only tell insert buffer has at least this number of records. For the same reason do not get scared if you see more merged records than inserted.--------<span>上面的3个值,都是mysql启动的时候开始计数的,从mysql启动以来,共插入了</span></span><span style="font-family: 新宋体; color: #000000;">8075308条,merge了7540969条,merge了2246304次.所以说,从mysql启动开始到现在,insert buffer中的数据增加了8075308-7540969=534339条.但是由于mysql启动的时候,insert buffer可能不是空的,所以现在insert buffer的数据应该&gt;=534339条.</span></span>

<span style="font-size: small;">The value of 2246304 merges shows us there was about 3 records merged for each merge operation, meaning insert buffer could in theory reduce IO needed to update leaf pages 3 times.--<span style="font-family: 新宋体;">7540969/2246304=3.36,说明每次merge操作节省了大约3被的IO</span></span>

<span style="font-size: small;">As I mentioned Insert buffer merge can take quite a while – with 100 records merged per second we’re looking at least 5343 seconds or 1.5 hours on this server… and there are insert buffers which are 10x and 100x larger than this.</span>

<span style="font-size: small;">Innodb unfortunately offers no control for insert buffer while it surely would be benefiting for different workloads and hardware configuration. For example there is very good question if insert buffer really makes sense for SSD because saving random IO is not so much needed for these devices.</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2011-01-25 15:40:59</wp:post_date>
		<wp:post_date_gmt>2011-01-25 07:40:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>insert-buffer%e6%8e%a2%e7%a7%98-%e8%8a%82%e7%9c%81%e9%9a%8f%e6%9c%baio%e7%9a%84%e5%88%a9%e5%99%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="innodb"><![CDATA[innodb]]></category>
		<category domain="post_tag" nicename="insert-buffer"><![CDATA[insert buffer]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql insert buffer,mysql优化,mysql insert buffer详解]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1238]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RAID基础，RAID10与RAID01比较，RAID10与RAID5比较</title>
		<link>http://www.themysql.com/linux/raid%e5%9f%ba%e7%a1%80%ef%bc%8craid10%e4%b8%8eraid01%e6%af%94%e8%be%83%ef%bc%8craid10%e4%b8%8eraid5%e6%af%94%e8%be%83.html</link>
		<pubDate>Thu, 27 Jan 2011 08:37:43 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=207</guid>
		<description></description>
		<content:encoded><![CDATA[转自：<a href="http://btxigua.itpub.net/post/34419/406437">http://btxigua.itpub.net/post/34419/406437</a>

文档中，RAID10与RAID5抄袭了piner的文章，敬请谅解。

<h3>一、RAID10和RAID01的比较</h3>
 RAID10是先做镜象，然后再做条带。
 RAID01则是先做条带，然后再做镜象。
比如以6个盘为例，RAID10就是先将盘分成3组镜象，然后再对这3个RAID1做条带。RAID01则是先利用3块盘做RAID0，然后将另外3块盘做为RAID0的镜象。
下面以4块盘为例来介绍安全性方面的差别：
1、RAID10的情况
这种情况中，我们假设当DISK0损坏时，在剩下的3块盘中，只有当DISK1一个盘发生故障时，才会导致整个RAID失效，我们可简单计算故障率为1/3。
2、RAID01的情况
这种情况下，我们仍然假设DISK0损坏，这时左边的条带将无法读取（raid0是一个整体，当一块磁盘发生故障时，整个raid0将无法读取）。在剩下的3块盘中，只要DISK2，DISK3两个盘中任何一个损坏，都会导致整个RAID失效，我们可简单计算故障率为2/3。
因此RAID10比RAID01在安全性方面要强。

从数据存储的逻辑位置来看，在正常的情况下RAID01和RAID10是完全一样的，而且每一个读写操作所产生的IO数量也是一样的，所以在读写性能上两者没什么区别。而当有磁盘出现故障时，比如前面假设的DISK0损坏时，我们也可以发现，这两种情况下，在读的性能上面也将不同，RAID10的读性能将优于RAID01。

<span style="font-family: verdana, arial, helvetica; font-size: x-small;">BTxigua 上传了这个图片:
<a href="http://www.themysql.com/wp-content/uploads/2011/01/68_186731_1190616355.jpg"><img class="alignnone size-medium wp-image-208" title="68_186731_1190616355" src="http://www.themysql.com/wp-content/uploads/2011/01/68_186731_1190616355-300x150.jpg" alt="" width="300" height="150" /></a></span>
<h3>二、RAID10和RAID5的比较</h3>
为了方便对比，这里拿同样多驱动器的磁盘来做对比，RAID5选择3D+1P的RAID方案，RAID10选择2D+2D的RAID方案。

1、安全性方面的比较

其实在安全性方面，勿须质疑，肯定是RAID10的安全性高于RAID5。我们也可以从简单的分析来得出。当盘1损坏时，对于RAID10，只有当盘1对应的镜象盘损坏，才导致RAID失效。但是对于RAID5，剩下的3块盘中，任何一块盘故障，都将导致RAID失效。

在恢复的时候，RAID10恢复的速度也快于RAID5。

2、空间利用率的比较

RAID10的利用率是50%，RAID5的利用率是75%。硬盘数量越多，RAID5的空间利用率越高。

3、读写性能方面的比较

主要分析分析如下三个过程：读，连续写，离散写。

在介绍这三个过程之前，先介绍一个特别重要的概念：cache。

cache已经是整个存储的核心所在，就是中低端存储，也有很大的cache存在，包括最简单的raid卡，一般都包含有几十，甚至几百兆的raid cache。

cache的主要作用是什么呢？体现在读与写两个不同的方面，如果作为写，一般存储阵列只要求写到cache就算完成了写操作，所以，阵列的写是非常快速的，在写cache的数据积累到一定程度，阵列才把数据刷到磁盘，可以实现批量的写入，至于cache数据的保护，一般都依赖于镜相与电池（或者是UPS）。

cache的读一样不可忽视，因为如果读能在cache中命中的话，将减少磁盘的寻道，因为磁盘从寻道开始到找到数据，一般都在6ms以上，而这个时间，对于那些密集型io的应用可能不是太理想。但是，如果cache能命中，一般响应时间则可以在1ms以内。两者应该相差3个数量级（1000倍）。

1）读操作方面的性能差异

RAID10可供读取有效数据的磁盘个数为4，RAID5可供读取有效数据的磁盘个数也为4个（校验信息分布在所有的盘上），所以两者的读的性能应该是基本一致的。

2）连续写方面的性能差异

在连续写操作过程，如果有写cache存在，并且算法没有问题的话，RAID5比RAID10甚至会更好一些，虽然也许并没有太大的差别。（这里要假定存储有一定大小足够的写cache，而且计算校验的cpu不会出现瓶颈）。

因为这个时候的RAID校验是在cache中完成，如4块盘的RAID5，可以先在内存中计算好校验，同时写入3个数据+1个校验。而RAID10只能同时写入2个数据+2个镜相。

如上图所示，4块盘的RAID5可以在同时间写入1、2、3到cache，并且在cache计算好校验之后，这里假定是6，同时把三个数据写到磁盘。而4块盘的RAID10不管cache是否存在，写的时候，都是同时写2个数据与2个镜相。

根据前面对缓存原理的介绍，写cache是可以缓存写操作的，等到缓存写数据积累到一定时期再写到磁盘。但是，写到磁盘阵列的过程是迟早也要发生的，所以RAID5与RAID10在连续写的情况下，从缓存到磁盘的写操作速度会有较小的区别。不过，如果不是连续性的强连续写，只要不达到磁盘的写极限，差别并不是太大。

3）离散写方面的性能差异

例如oracle 数据库每次写一个数据块的数据，如8K；由于每次写入的量不是很大，而且写入的次数非常频繁，因此联机日志看起来会像是连续写。但是因为不保证能够添满RAID5的一个条带，比如32K（保证每张盘都能写入），所以很多时候更加偏向于离散写入（写入到已存在数据的条带中）。

我们从上图看一下离散写的时候，RAID5与RAID10工作方式有什么不同。如上图：我们假定要把一个数字2变成数字4，那么对于RAID5，实际发生了4次io：先读出2与校验6，可能发生读命中然后在cache中计算新的校验写入新的数字4与新的校验8。

如上图我们可以看到：对于RAID10，同样的单个操作，最终RAID10只需要2个io，而RAID5需要4个io.

这里我忽略了RAID5在那两个读操作的时候，可能会发生读命中操作的情况。也就是说，如果需要读取的数据已经在cache中，可能是不需要4个io的。这也证明了cache对RAID5 的重要性，不仅仅是计算校验需要，而且对性能的提升尤为重要。

当然，并不是说cache对RAID10就不重要了，因为写缓冲，读命中等，都是提高速度的关键所在，只不过RAID10对cache的依赖性没有RAID5那么明显而已。

4）磁盘的IOPS对比

假定一个case，业务的iops是10000，读cache命中率是30%，读iops为60%，写iops为40%，磁盘个数为120，那么分别计算在raid5与raid10的情况下，每个磁盘的iops为多少。

raid5:

单块盘的iops = (10000*(1-0.3)*0.6 + 4 * (10000*0.4))/120

= (4200 + 16000)/120

= 168

这里的10000*(1-0.3)*0.6表示是读的iops，比例是0.6，除掉cache命中，实际只有4200个iops。

4 * (10000*0.4) 表示写的iops，因为每一个写，在raid5中，实际发生了4个io，所以写的iops为16000个

为了考虑raid5在写操作的时候，那2个读操作也可能发生命中，所以更精确的计算为：

单块盘的iops = (10000*(1-0.3)*0.6 + 2 * (10000*0.4)*(1-0.3) + 2 * (10000*0.4))/120

= (4200 + 5600 + 8000)/120

= 148

计算出来单个盘的iops为148个，基本达到磁盘极限

raid10

单块盘的iops = (10000*(1-0.3)*0.6 + 2 * (10000*0.4))/120

= (4200 + 8000)/120

= 102

可以看到，因为raid10对于一个写操作，只发生2次io，所以，同样的压力，同样的磁盘，每个盘的iops只有102个，还远远低于磁盘的极限iops。

<h3>三、小结</h3>

所以要求较高的空间利用率，对安全性要求不是特别高、大文件存储的系统采用RAID5比较好。

相反，安全性要求很高，不计成本，小数据量频繁写入的系统采用RAID10的方式比较好。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2011-01-27 16:37:43</wp:post_date>
		<wp:post_date_gmt>2011-01-27 08:37:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>raid%e5%9f%ba%e7%a1%80%ef%bc%8craid10%e4%b8%8eraid01%e6%af%94%e8%be%83%ef%bc%8craid10%e4%b8%8eraid5%e6%af%94%e8%be%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="raid"><![CDATA[raid]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1118]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MYSQL数据文件--.frm文件(表结构恢复)</title>
		<link>http://www.themysql.com/mysql/mysql%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6-frm%e6%96%87%e4%bb%b6%e8%a1%a8%e7%bb%93%e6%9e%84%e6%81%a2%e5%a4%8d.html</link>
		<pubDate>Tue, 15 Feb 2011 03:21:52 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=215</guid>
		<description></description>
		<content:encoded><![CDATA[转自：http://blog.csdn.net/chuan122345/archive/2009/12/06/4951936.aspx
了解MYSQL的都知道，在MYSQL中建立任何一张数据表，在其数据目录对应的数据库目录下都有对应表的.frm文件,.frm文件是用来保存每个数据表的元数据(meta)信息，包括表结构的定义等，.frm文件跟数据库存储引擎无关，也就是任何存储引擎的数据表都必须有.frm文件，命名方式为数据表名.frm，如user.frm. .frm文件可以用来在数据库崩溃时恢复表结构。

下面说说如何通过.frm文件恢复数据表结构。

一. InnoDB表结构的恢复

假定：MYSQL数据库已经崩溃，目前只有对应表的frm文件，大家都知道，frm文件无法通过文本编辑器查看，因为如果不恢复，基本上来说对我们没什么用。这里我们为了测试，假定该文件为test_innodb.frm.

该表创建脚本如下：

mysql> create table test_innodb

    -> (A int(11) default NULL,
    -> B varchar(30) default NULL,
    -> C date default NULL) engine=innodb;
Query OK, 0 rows affected (0.05 sec)

恢复方法介绍(过程)：

1. 在新的正常工作的MYSQL环境下建立一个数据库，比如aa.

2. 在aa数据库下建立同名的数据表test_innodb，表结构随意，这里只有一个id字段，操作过程片段如下：

mysql> create table test_innodb (id bigint not null)engine=InnoDB;
Query OK, 0 rows affected (0.09 sec)

mysql> show tables;
+--------------+
| Tables_in_aa |
+--------------+
| test_innodb |
+--------------+
2 rows in set (0.00 sec)

mysql> desc test_innodb;
+-------+------------+------+-----+---------+-------+
| Field | Type       | Null | Key | Default | Extra |
+-------+------------+------+-----+---------+-------+
| id    | bigint(20) | NO   |     | NULL    |       |
+-------+------------+------+-----+---------+-------+
1 row in set (0.00 sec)

3.停止mysql服务器，将系统崩溃后留下的test_innodb.frm文件拷贝到新的正常数据库的数据目录aa下，覆盖掉下边同名的frm文件：

4.重新启动MYSQL服务。

5.测试下是否恢复成功，进入aa数据库，用desc命令测试下：

mysql> desc test_innodb;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| A     | int(11)     | YES  |     | NULL    |       |
| B     | varchar(30) | YES  |     | NULL    |       |
| C     | date        | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
3 rows in set (0.01 sec)

OK，发现表结构已经恢复过来了。

二. MyISAM表结构的恢复。

MyISAM类型的表恢复相对比较简单。

同样先假定需要恢复的表的FRM文件为test_myisam.frm,表结构为

mysql> create table test_myisam
    -> (A int(11) default NULL,
    -> B varchar(30) default NULL,
    -> C date default NULL) engine=myisam;
Query OK, 0 rows affected (0.05 sec)

恢复过程如下：

1. 直接将test_myisam.frm拷贝到正常数据库对应的数据目录下。这时测试

mysql> show tables;
+--------------+
| Tables_in_aa |
+--------------+
| test_innodb |
| test_myisam |
+--------------+
3 rows in set (0.00 sec)

mysql> desc test_myisam;
ERROR 1017 (HY000): Can't find file: 'test_myisam' (errno: 2)

发现只能通过show tables命令看见表名，但是表结构还是没有恢复，desc命令报错。

2. 在与test_myisam.frm同一目录建立以下2个文件，文件内容可以为空：

test_myisam.MYD test_myisam.MYI

3. 在MYSQL命令行使用MYSQL本身的数据表恢复命令repair命令恢复表，如下：

mysql> repair table test_myisam USE_FRM;
+-----------------+--------+----------+----------+
| Table           | Op     | Msg_type | Msg_text |
+-----------------+--------+----------+----------+
| aa.test_myisam | repair | status   | OK       |
+-----------------+--------+----------+----------+
1 row in set (0.00 sec)

根据结果可以知道,恢复命令执行成功，下边用desc命令测试下：

mysql> desc test_myisam;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| A     | int(11)     | YES  |     | NULL    |       |
| B     | varchar(30) | YES  |     | NULL    |       |
| C     | date        | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
3 rows in set (0.02 sec)

果然恢复成功了。

也可以用show create table命令测试下：

mysql> show create table test_myisam;
+--------------+-----------------------------------------------------------------
----------------------------------------------------------------------+
| Table        | Create Table
                                                                      |
+--------------+-----------------------------------------------------------------
----------------------------------------------------------------------+
| test_myisam | CREATE TABLE `test_myisam` (
  `A` int(11) DEFAULT NULL,
  `B` varchar(30) DEFAULT NULL,
  `C` date DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1 |
+--------------+-----------------------------------------------------------------
----------------------------------------------------------------------+

在恢复MyISAM表结构时，提到MYD文件和MYI文件，这两个文件都专属于MyISAM存储引擎的，前者用来保存MyISAM表的数据，后者用来存放MyISAM表的索引信息。具体在以后的日志再做详细介绍，这里不再赘述。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2011-02-15 11:21:52</wp:post_date>
		<wp:post_date_gmt>2011-02-15 03:21:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6-frm%e6%96%87%e4%bb%b6%e8%a1%a8%e7%bb%93%e6%9e%84%e6%81%a2%e5%a4%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1102]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>贾平凹《美穴地》</title>
		<link>http://www.themysql.com/%e6%96%87%e5%ad%a6/%e8%b4%be%e5%b9%b3%e5%87%b9%e3%80%8a%e7%be%8e%e7%a9%b4%e5%9c%b0%e3%80%8b.html</link>
		<pubDate>Sat, 05 Mar 2011 16:42:03 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=218</guid>
		<description></description>
		<content:encoded><![CDATA[上学的时候，看书看累了，喜欢趴在阅览室里面把贾平凹的小说一本一本的往过读，时间长了慢慢也就淡了，但是那种兴奋刺激还因为《美穴地》而萦绕在心头，淡淡的悲观挥之不去。回想起来，觉得自己如同柳子言一样懦弱，唯一的区别就是没有因为懦弱而变的谨慎。

下面是我在网上搜到的一篇评论，写的很不错，自愧是写不出这样的感想。就只能是转载在这里，没事了看看。

第一次听说《美穴地》是在一本关于张艺谋的书里，说大名鼎鼎的张艺谋导演买下了《美穴地》的电影剧本改编权云云。虽然后来张导没能真把它变成一部电影，而是去拍了部《秋菊打官司》，但张导一贯挑选小说的眼光，使我还没看小说就相信，这必然又是一个情节张力十足，人物神奇诡秘，恩怨交织，敌意与恋情纠缠在一起，回环曲折的故事。
读过《美穴地》后发现，它的意义远远不止如此，在我看来，它是情的极致和美的极致的一齐臻达。所谓情的极致和美的极致，就是情感和美感纠合在一起，一唱一和，共同逗弄出我们这些读者的各种心灵经验出来。四姨太的出场如《红楼梦》里的王熙凤，未见其人先闻其声，“让我瞧瞧，来的又是哪一路先生？”一种真率而野性的美先被描摹了出来。再见其人，“遂一朵粉云飘至台阶，天陡然也粉亮了”。这是怎样一张容颜，“一个怎样艳丽的美妇”啊，能让天地为之增色。这儿不妨先宕开一笔，谈谈贾平凹小说里的女子之美。贾平凹曾坦诚，自己喜欢狐狸精式的女子，于是在他的小说里，这些美丽得有些妖娆之气，颇类似《聊斋志异》中仙狐异兔美法的女子一再出现，如《佛关》中的兑子，这里的四姨太，《五魁》里他的女人，《白朗》中的女人等等。这些女子有悖于我们观念中的女人之美，是所谓的“红颜祸水”，但贾平凹说过，他从内心深处厌恶这种观念，认为这是我们旧道德中最腐臭的东西。他写作的时候，是出于人的本性，出于一个男人的本性，所张扬的是一个本质的、天然的女人味。其实当这样的女子在现实生活中出现在你身旁，往往能令你忘记那“腐臭”的三纲五常，只沉醉于她的美中，不能自拔。柳子言就是小说中的“我们”。四姨太的一粒瓜子加一个媚笑，就使柳子言灵魂出窍，分神迷思，小说后来又用了相当的篇幅描写这种情思，“几次觉得后脖子似乎还在发痒”，耳膜里“消灭不了女人尖尖锥锥的调笑”，要把自己“弄得气喘吁吁起来”。这爱如此崇高，以至苟百都亵渎四姨太，柳子言会毫不迟疑的卫护。再会时，四姨太以奇妙的语言相激，以要枣子为口实，以挑刺为邀……一波一波的，女人主动而活泼，男人却胆小而憨实，这一段，把两人由情转爱的历程写活了，神了，也美了！后来的四姨太被姚掌柜当作平安符般转送给了匪头苟百都，苟百都死后他又像收回自己财产一样收回四姨太，蹩腿的柳子言，爱得愈悲切，遗憾就愈深，这种悲剧的美感始终荡漾着，像一柱迷魂的香，迷住读者的心灵，做的势愈足，迷人的美感便愈神。
《美穴地》的结尾，类似于传统的“化蝶”或“大团圆”，本来我以为，四姨太和柳子言历经九九八十一难，团圆了，应该从此快活美满的生活下去了，但是，《美穴地》之美，在这里又提高一个八分音符，文似看山不喜平，开水烧到九十九度，在这里出人意料的升温，引起了我内心深深的震撼和对美的折服。整个作品自始至终弥漫着一种哀婉、凄美甚至悲怆的请调。当我们看着柳子言和四姨太多折的爱情轨道时，常常会对种种失之交臂、种种大逆不道、种种非人性的遭遇，感到撕心裂肺的愤慨、惋惜和喟叹。愤之愈深，惜之愈彻，叹之愈烈，美感便愈强。《美穴地》浓缩了作者对待爱情的种种潜意识性的观点，浓缩了人世间种种爱的雏形或者情形，庶几成了对人间爱的观点的概括性表达，所以说《美穴地》是一个浓缩的美学意义上的爱的版本。
柳子言身上既有爱的古典性又有懦弱的现代性，他对四姨太的爱始终不渝。单是那伴随柳子言后半生被他视为定情信物而贴身穿着的红绸裹兜就证明了这一点，而且你若认为柳子言只是迷恋四姨太容颜的话又大错特错了，因为即使四姨太后来被毁了容，柳子言也照样“一下子跳起来，将面前的女人搂抱住了”。但他无论在面对女人给他的爱前抑或是自己主动追求爱的旅程里又是胆小而懦弱的，他只敢在心里肆无忌惮的假想与四姨太再会的种种情形，他觉得“那女人真正成为自己的老婆长年相厮那纯是远山头上一朵云，登上山头云则又远，他们的缘分只是一种偶然的相遇相爱”。如果说柳子言的爱是放诞了奇异光彩的暗恋的话，那苟百都的爱即为赤裸裸的强悍欲望的表达了，他那一身匪气、霸气再加上丑陋肮脏的外表确如现代爱情生活中的催花狂魔。难怪柳子言在得知四姨太成了“黑皮臭肉的苟百都的老婆”后，觉得实在无法接受，“恨不得一个石子砸过去，砸出五颜六色的脑浆来”。而另一个与四姨太产生情感纠葛的姚掌柜，他视爱为占有，在他身上也揭示了自古以来金钱与所谓爱情的深刻关系。姚掌柜爱四姨太，所以他才会等苟百都死后千方百计的把那女人再找回来，可是他爱的只是女人艳丽的容颜，一旦女人脸上多了四道从左额直到右腮的疤痕，就立马慷慨的把她有如送自己家藏般的送予他人。一直处在爱的被动状态的四姨太是一个命运多折的女人，她敢爱敢恨，爱耍小女人的心计，虽然性格刚烈，但比刚烈更多的，却是女人天然的需求——肉体和灵魂的需求。当肉体和灵魂同时得不到满足时，她就咄咄逼人的对柳子言迸发出浓烈的爱情；当肉体的欲望得到稍息之后，她灵魂的欲望还不忘向柳子言张扬；当最终肉体和灵魂的欲望都归结再柳子言身上时，我们看到那是多么的平淡无奇和平常不过啊。
从姚掌柜和苟百都的主雇关系，以及姚掌柜的一夫多妻制等看，故事发生在以前的时代，但贾平凹有意的淡化了这种时代背景，采用一种接近于四姨太纯粹情感叙述的方式进行写作，使我们读起来更具一种亲切感和启迪性。作者的立意，也许恰在这里，拨开时代的乌云，驱散历史的阴影，让爱情凸现，水墨画一般画出一则涵盖千古的袖珍爱情故事，所以说《美穴地》堪称情的极致的作品。
最后不得不提的仍然是作者贾平凹那让人称道的语言表达功力。在他的小说中，我们往往能读到一种深邃的，像大地一样坚实的真实感。我想，它是源于贾平凹对每一个生活细节、每一种精神线条的敏感，以及他那杰出的对事实和场面的描绘能力。凝练的，及物的，活泼的，口语化的，民间的，几乎每一个句子每一个词都触及事物本身和人物的内心，表现出强烈的美感和生活气息。谢有顺在谈贾平凹的文学整体观时就说“就着贾平凹这种对现实事象的表现力而言，我认为，在当今文坛是少有人可以与之相匹敌的”。
贾平凹用自己的魔笔为我们呈现了一个哀婉而凄美的爱的故事——《美穴地》。

<a href='http://www.themysql.com/wp-content/uploads/2011/03/美穴地.txt'>点击直接看，很短</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date>2011-03-06 00:42:03</wp:post_date>
		<wp:post_date_gmt>2011-03-05 16:42:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%b4%be%e5%b9%b3%e5%87%b9%e3%80%8a%e7%be%8e%e7%a9%b4%e5%9c%b0%e3%80%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%96%87%e5%ad%a6"><![CDATA[文学]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2046]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.100.38.251</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 10:05:21</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 02:05:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test2]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>32</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.100.38.251</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 09:44:08</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 01:44:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test<a href="#comment-28" rel="nofollow">@xjb </a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[xjb]]></wp:comment_author>
			<wp:comment_author_email>iamxjb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.watch-life.net</wp:comment_author_url>
			<wp:comment_author_IP>222.244.134.27</wp:comment_author_IP>
			<wp:comment_date>2011-04-01 23:15:59</wp:comment_date>
			<wp:comment_date_gmt>2011-04-01 15:15:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[因为这篇文章，我想去看看《美穴地》]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>mysql覆盖索引</title>
		<link>http://www.themysql.com/mysql/mysql%e8%a6%86%e7%9b%96%e7%b4%a2%e5%bc%95.html</link>
		<pubDate>Tue, 08 Mar 2011 07:16:29 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>covering index：</strong>An index that contains (or “covers”) all the data needed to satisfy a query is called a covering index.

<strong>效果：</strong>覆盖索引在表结构很庞大的时候（特别是包含了很多text、varchar等），Covering indexes can be a very powerful tool and can dramatically improve performance.

<strong> 具体原因如下：</strong>
一、Index entries are usually much smaller than the full row size, so MySQL can
access significantly less data if it reads only the index. This is very important for
cached workloads, where much of the response time comes from copying the
data. It is also helpful for I/O-bound workloads, because the indexes are smaller
than the data and fit in memory better. (This is especially true for MyISAM,
which can pack indexes to make them even smaller.)
二、Indexes are sorted by their index values (at least within the page), so I/O-bound
range accesses will need to do less I/O compared to fetching each row from a
random disk location. For some storage engines, such as MyISAM, you can even
OPTIMIZE the table to get fully sorted indexes, which will let simple range queries
use completely sequential index accesses.
三、Most storage engines cache indexes better than data. (Falcon is a notable excep-
tion.) Some storage engines, such as MyISAM, cache only the index in MySQL’s
memory. Because the operating system caches the data for MyISAM, accessing it
typically  requires  a  system  call.  This  may  cause  a  huge  performance  impact,
especially for cached workloads where the system call is the most expensive part
of data access.
四、Covering indexes are especially helpful for InnoDB tables, because of InnoDB’s
clustered indexes. InnoDB’s secondary indexes hold the row’s primary key val-
ues  at  their  leaf  nodes.  Thus,  a  secondary  index  that  covers  a  query  avoids
another index lookup in the primary key.

<strong>详细测试如下：</strong>
表结构
CREATE TABLE `test` (
`id` int(10) unsigned NOT NULL,
`gid` int(10) unsigned NOT NULL default '0',
`gname` varchar(100) NOT NULL default '',
`gimage` varchar(255) NOT NULL default '',
`gprice` int(8) unsigned NOT NULL default '0',
`sender_uid` bigint(20) NOT NULL default '0',
`sender_name` varchar(255) NOT NULL default '',
`receiver_uid` bigint(20) NOT NULL default '0',
`receiver_name` varchar(255) NOT NULL default '',
`method` tinyint(2) unsigned NOT NULL default '0',
`message` text NOT NULL,
`addtime` bigint(13) unsigned NOT NULL default '0',
`status` int(11) NOT NULL default '0',
`flash_data` text,
`kind` tinyint(4) NOT NULL default '0',
`payway` tinyint(4) NOT NULL default '0',
`is_wap` tinyint(1) NOT NULL default '0',
`flashname` varchar(100) NOT NULL default '',
`hang` int(11) NOT NULL default '1',
`replied` int(10) unsigned NOT NULL default '0',
`record_source` int(10) unsigned NOT NULL default '0',
PRIMARY KEY  (`id`),
) ENGINE=InnoDB

mysql&gt; select count(*) from test;
+----------+
| count(*) |
+----------+
|  2424284 |
+----------+
1 row in set (0.00 sec)

mysql&gt; select sender_uid from test limit 500000,1;
+------------+
| sender_uid |
+------------+
|  225623103 |
+------------+
1 row in set (0.37 sec)

mysql&gt; select sender_uid from test limit 700000,1;
+------------+
| sender_uid |
+------------+
|  229785203 |
+------------+
1 row in set (0.44 sec)

没有加索引
[root]# /etc/init.d/mysql restart
Shutting down MySQL..                                      [  OK  ]
Starting MySQL.
[root]# date;mysql test -e"SELECT sender_uid,receiver_uid FROM test WHERE sender_uid&gt;=225623103 AND sender_uid&lt;=229785203;"&gt;/dev/null;date;
Tue Mar  8 11:39:22 CST 2011
Tue Mar  8 11:39:30 CST 2011
[root]# /etc/init.d/mysql restart
Shutting down MySQL..                                      [  OK  ]
Starting MySQL.
[root]# date;mysql test -e"SELECT sender_uid,receiver_uid FROM test WHERE sender_uid&gt;=225623103 AND sender_uid&lt;=229785203;"&gt;/dev/null;date;
Tue Mar  8 11:39:42 CST 2011
Tue Mar  8 11:39:50 CST 2011

加了sender_uid,receiver_uid联合索引之后
[root]# /etc/init.d/mysql restart
Shutting down MySQL...                                     [  OK  ]
Starting MySQL.                                            [  OK  ]
[root]# date;mysql test -e"SELECT sender_uid,receiver_uid FROM test WHERE sender_uid&gt;=225623103 AND sender_uid&lt;=229785203;"&gt;/dev/null;date;
Tue Mar  8 11:56:16 CST 2011
Tue Mar  8 11:56:17 CST 2011
[root]# /etc/init.d/mysql restart
Shutting down MySQL.
[  OK  ]
Starting MySQL.                                            [  OK  ]
[root]#
[root]# date;mysql test -e"SELECT sender_uid,receiver_uid FROM test WHERE sender_uid&gt;=225623103 AND sender_uid&lt;=229785203;"&gt;/dev/null;date;
Tue Mar  8 11:56:24 CST 2011
Tue Mar  8 11:56:25 CST 2011]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2011-03-08 15:16:29</wp:post_date>
		<wp:post_date_gmt>2011-03-08 07:16:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e8%a6%86%e7%9b%96%e7%b4%a2%e5%bc%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="innodb"><![CDATA[innodb]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="category" nicename="%e5%8e%9f%e5%88%9b"><![CDATA[原创]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1343]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>procedure/trigger/event在mysql replication下的运行过程</title>
		<link>http://www.themysql.com/mysql/procedure-trigger-event%e5%9c%a8mysql-replication%e4%b8%8b%e7%9a%84%e8%bf%90%e8%a1%8c%e8%bf%87%e7%a8%8b.html</link>
		<pubDate>Fri, 11 Mar 2011 17:20:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[测试了一下procedure/trigger/event在mysql主从中的运行过程，总结遂成文如下。

以下测试与结论基于下面的设置：
tx_isolation=repeatable-read
binlog_format=statement

<strong>procedure</strong>

执行call procedure_test()时，mysql会在binlog中记录procedure_test中执行的语句，而不是记录call procedure_test()

<strong>trigger</strong>

<pre lang="sql">
CREATE TABLE test1(a1 INT);
CREATE TABLE test2(a2 INT);
delimiter //
CREATE trigger trigger_test before insert on test1
for each row begin
insert into test2 set a2=new.a1+1;
end//
</pre>
主库和从库的binlog如下所示（主从库binlog一致）：
<pre lang="sql">
#110312  0:01:45 server id 193506  end_log_pos 3539     Query   thread_id=345   exec_time=0     error_code=0
SET TIMESTAMP=1299859305/*!*/;
CREATE TABLE test1(a1 INT)
/*!*/;
# at 3539
#110312  0:01:54 server id 193506  end_log_pos 3626     Query   thread_id=345   exec_time=0     error_code=0
SET TIMESTAMP=1299859314/*!*/;
CREATE TABLE test2(a2 INT)
/*!*/;
# at 3626
#110312  0:04:19 server id 193506  end_log_pos 3838     Query   thread_id=345   exec_time=0     error_code=0
SET TIMESTAMP=1299859459/*!*/;
CREATE DEFINER=`root`@`127.0.0.1` trigger trigger_test before insert on test1
for each row begin
insert into test2 set a2=new.a1+1;
end
/*!*/;
# at 3838
#110312  0:05:15 server id 193506  end_log_pos 3904     Query   thread_id=345   exec_time=0     error_code=0
SET TIMESTAMP=1299859515/*!*/;
BEGIN
/*!*/;
# at 3904
#110312  0:05:15 server id 193506  end_log_pos 3994     Query   thread_id=345   exec_time=0     error_code=0
SET TIMESTAMP=1299859515/*!*/;
insert into test1 values(123)
/*!*/;
# at 3994
#110312  0:05:15 server id 193506  end_log_pos 4021     Xid = 1488
COMMIT/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
</pre>
从binlog中可以看出trigger和procedure、event不同的是：trigger的行为是不记录进binlog中的，trigger在replication中的同步完全是在slave上自主触发的。

<strong>event</strong>
<pre lang="sql">
CREATE EVENT event_replication_test
ON SCHEDULE at '2011-03-11 21:30'
ENABLE
DO
BEGIN
insert into event_test(name) values(UUID());
END//
</pre>
测试，21:25设置21:30执行这个event
在主从上分别执行show events，主从上都已经包含了这个event
然后执行stop slave
21:30之后观察event_test表，主库中有记录，从库中没有记录

观察binlog
binlog_format=statemnet下mysql会记录下event执行的语句以及create event/drop event

从库没有和trigger一样执行的原因是：
在从库上执行show events时可以看到从库的event的status是SLAVESIDE_DISABLED
mysql&gt; show events;
+----+------------------------+----------------+-----------+----------+---------------------+----------------+----------------+--------+------+--------------------+------------+----------------------+----------------------+--------------------+
| Db | Name                   | Definer        | Time zone | Type     | Execute at          | Interval value | Interval field | Starts | Ends | Status             | Originator | character_set_client | collation_connection | Database Collation |
+----+------------------------+----------------+-----------+----------+---------------------+----------------+----------------+--------+------+--------------------+------------+----------------------+----------------------+--------------------+
| fb | event_replication_test | root@127.0.0.1 | SYSTEM    | ONE TIME | 2011-03-11 21:30:00 | NULL           | NULL           | NULL   | NULL | SLAVESIDE_DISABLED |     193506 | utf8                 | utf8_general_ci      | utf8_bin           |
+----+------------------------+----------------+-----------+----------+---------------------+----------------+----------------+--------+------+--------------------+------------+----------------------+----------------------+--------------------+
1 row in set (0.00 sec)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2011-03-12 01:20:41</wp:post_date>
		<wp:post_date_gmt>2011-03-11 17:20:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>procedure-trigger-event%e5%9c%a8mysql-replication%e4%b8%8b%e7%9a%84%e8%bf%90%e8%a1%8c%e8%bf%87%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="replication"><![CDATA[replication]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql procedure,mysql trigger,mysql event,mysql procedure在replication下的运行过程,mysql trigger在replication下的运行过程,mysql event在replication下的运行过程]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[测试了一下procedure/trigger/event在mysql主从中的运行过程，总结遂成文如下。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1265]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql使用event每天将数据备份为一张表</title>
		<link>http://www.themysql.com/mysql/mysql%e4%bd%bf%e7%94%a8event%e6%af%8f%e5%a4%a9%e5%b0%86%e6%95%b0%e6%8d%ae%e5%a4%87%e4%bb%bd%e4%b8%ba%e4%b8%80%e5%bc%a0%e8%a1%a8.html</link>
		<pubDate>Fri, 11 Mar 2011 17:35:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=230</guid>
		<description></description>
		<content:encoded><![CDATA[主要思路是先创建一个存储过程，然后创建event每天定时执行存储过程。

<strong>一、创建日期表存储过程</strong>
<pre lang="sql">DELIMITER //
CREATE PROCEDURE proc_create_table_daily(table_name varchar(100))
begin
declare str_date char(8);
declare create_sql varchar(100);
declare rename_sql varchar(100);
set str_date=date_format(now(),"%Y%m%d");
select str_date;
set create_sql=concat('create table ',table_name,'_tmp like ',table_name,";");
select create_sql;
set rename_sql=concat('rename table ',table_name,' to ',table_name,'_',str_date,',',table_name,'_tmp to ',table_name,";");
select rename_sql;
set @create_sql=create_sql;
prepare p1 from @create_sql;
execute p1;
deallocate prepare p1;
set @rename_sql=rename_sql;
prepare p2 from @rename_sql;
execute p2;
deallocate prepare p2;
end//</pre>
<strong>二、创建event定时创建表</strong>
<pre lang="sql">DELIMITER //
DROP EVENT IF EXISTS event_create_table_daily//

CREATE EVENT event_create_table_daily
ON SCHEDULE EVERY 1 day
STARTS '2011-03-12 01:00:01'
ENABLE
DO
BEGIN
call proc_create_table_daily('event_test');
END//
DELIMITER ;</pre>
<strong>在写event过程中遇到的一些问题：</strong>
<ol>
	<li>查看存储过程：show procedure status</li>
	<li>查看event：show events</li>
	<li>prepare(预处理)execute stmt using @var,只能跟@var变量,declare和传入的变量不行!!!</li>
	<li>ON SCHEDULE EVERY 1 Hour STARTS '2011-03-11 18:11:30'意思就是从start时间开始，每过一个小时执行一次，starts时间也会执行</li>
	<li>存储过程的变量分为两种：全局变量@str_data，session中一直有效；declare str_date char(8)局部变量，使用的时候不需要添加@符号</li>
	<li>如果event是ON SCHEDULE at now()当event执行结束后使用[ON COMPLETION [NOT] PRESERVE] 来决定是否保存event</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date>2011-03-12 01:35:01</wp:post_date>
		<wp:post_date_gmt>2011-03-11 17:35:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e4%bd%bf%e7%94%a8event%e6%af%8f%e5%a4%a9%e5%b0%86%e6%95%b0%e6%8d%ae%e5%a4%87%e4%bb%bd%e4%b8%ba%e4%b8%80%e5%bc%a0%e8%a1%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dba-tools"><![CDATA[DBA Tools]]></category>
		<category domain="post_tag" nicename="dba-tools"><![CDATA[DBA Tools]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="category" nicename="%e5%8e%9f%e5%88%9b"><![CDATA[原创]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[mysql使用event每天将数据备份为一张表]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql使用event,mysql如何使用event,mysql event,mysql event例子]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2315]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.100.38.251</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 09:57:01</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 01:57:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>蛋疼的mysql</title>
		<link>http://www.themysql.com/mysql/%e8%9b%8b%e7%96%bc%e7%9a%84mysql.html</link>
		<pubDate>Sat, 23 Apr 2011 13:57:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

今天一个机器报警磁盘空间不足，上去看了下，直接100多G的error log，打开一看全是：

110423 21:06:57 [Warning] Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. The statement is unsafe because it uses a LIMIT clause. This is unsafe because the set of rows included cannot be predicted. Statement: delete from feed_content_10 where small_type=3514 and  time &lt;date_sub(now(),interval 15 day) order by time asc limit 400

这个是伟哥删过去数据时用的语句，以前语句没有order by time直接是limit 400出了一大堆warning，加了order by time之后居然warning依旧，google一把，原来也有人给mysql报了一个这样的<a href="http://bugs.mysql.com/bug.php?id=42415" target="_blank">bug</a>，使用order by之后删除的记录是完全确定的，按理不会出这个warning才对。

<strong>仔细阅读发现蛋疼的事情出来了：</strong>mysql把warning从this is unsafe改成了this may be unsafe，真蛋疼。

再往下看，用户又提说这个应该检测一下，不能语句中有个limit全报warning。mysql才增加了一个patch，不过现在还在等待review，review、测试完成之后应该会提交到正式版本中。(目前的percona5.5.10还没有更新)

目前解决这个问题两个方法：一个是将binlog_format换成row-based，一种是在更新语句中不使用limit。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2011-04-23 21:57:16</wp:post_date>
		<wp:post_date_gmt>2011-04-23 13:57:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%9b%8b%e7%96%bc%e7%9a%84mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[2602]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[[Warning] Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.100.38.251</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 10:06:50</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 02:06:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[测试]]></wp:comment_author>
			<wp:comment_author_email>test@test.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.100.38.249</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 10:09:24</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 02:09:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.100.38.251</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 09:50:10</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 01:50:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[恩，或者把要删除的id的前后位置找到，然后用id between也可以。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>30</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[玄惭]]></wp:comment_author>
			<wp:comment_author_email>luolongjiu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>58.100.50.217</wp:comment_author_IP>
			<wp:comment_date>2011-04-24 23:39:12</wp:comment_date>
			<wp:comment_date_gmt>2011-04-24 15:39:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[如果单次删除数据量大的话，写个存储过程，先把id取出来，在关联主表删除数据，500条提交一次^_^]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>关于mysql varchar长度</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8emysql-varchar%e9%95%bf%e5%ba%a6.html</link>
		<pubDate>Wed, 27 Apr 2011 10:05:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=239</guid>
		<description></description>
		<content:encoded><![CDATA[本文是对row_format为compact时，varchar长度的一个探讨。
《MySQL技术内幕 InnoDB存储引擎》中姜承尧提到MySQL varchar最大长度65535是指所有的varchar长度累加必须小于65535，这篇文章对这个进行一个探讨，发现65535中应该包含了所有字段的长度、变长字段长度标示位、NULL标示位的累计。在此感谢姜承尧的《MySQL技术内幕 InnoDB存储引擎》，对很多东西有了一个更清晰的了解。

注：下面的测试是
character_set=utf8
utf8下面一个字符占3个字节，因此最大是65535/3=21845，但是21845之后没有地方存储长度信息，所以单列的最大长度是21844


Every table (regardless of storage engine) has a maximum row size of 65,535 bytes。可以通过下面的测试有个了解。
<pre lang="sql">
show table status like "test";
Row_format:Compact

CREATE TABLE `test` (
  `c1` varchar(21844) COLLATE utf8_bin NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin

mysql> alter table test modify column c1 varchar(21844) not null; 
Query OK, 7 rows affected (0.07 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> alter table test modify column c1 varchar(21845) not null; 
ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. You have to change some columns to TEXT or BLOBs
mysql> select 21844*3+2;
+-----------+
| 21844*3+2 |
+-----------+
|     65534 |
+-----------+
1 row in set (0.00 sec)
</pre>
<strong>因为null标示位占用了一个字节，所以可以去掉not null限制。</strong>
<pre lang="sql">
mysql> alter table test modify c1 varchar(21844) COLLATE utf8_bin; 
Query OK, 7 rows affected (0.08 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> alter table test add column i1 int not null;
ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. You have to change some columns to TEXT or BLOBs

mysql> alter table test modify column c1 varchar(21843) not null;   
Query OK, 7 rows affected (0.08 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> alter table test add column i1 int not null;              
Query OK, 7 rows affected (0.08 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> alter table test add column i2 int not null; 
ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. You have to change some columns to TEXT or BLOBs

mysql> select 21843*3+2+4;
+-------------+
| 21843*3+2+4 |
+-------------+
|       65535 |
+-------------+
1 row in set (0.00 sec)
</pre>
<strong>这个时候去掉not null就不可以了</strong>
<pre lang="sql">
mysql> alter table test modify column c1 varchar(21843);           
ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. You have to change some columns to TEXT or BLOBs
</pre>
参照如下：
1，http://dev.mysql.com/doc/refman/5.0/en/column-count-limit.html
2，MySQL技术内幕 InnoDB存储引擎
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2011-04-27 18:05:59</wp:post_date>
		<wp:post_date_gmt>2011-04-27 10:05:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8emysql-varchar%e9%95%bf%e5%ba%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="%e5%90%b9%e6%af%9b%e6%b1%82%e7%96%b5"><![CDATA[吹毛求疵]]></category>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql varchar长度]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[770]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fedora&amp;ubuntu下安装synergy</title>
		<link>http://www.themysql.com/linux/fedoraubunt%e4%b8%8b%e5%ae%89%e8%a3%85synergy.html</link>
		<pubDate>Thu, 12 May 2011 07:19:21 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=246</guid>
		<description></description>
		<content:encoded><![CDATA[synergy是一款在多个平台下共享鼠标键盘的软件。下面描述如何在fedora下面配置synergy。主要参照军辉的<a href="http://blog.renren.com/blog/227366242/711287907">我的工作模式</a>
本来想去官方网站上下载1.4.2进行安装的时候，发现了一大堆的依赖关系，因此使用了使用yum安装了synergy-plus-1.3.4-6.fc14.i686，对应的windows版的<a href="http://code.google.com/p/synergy-plus/downloads/list?can=1&amp;q=">下载地址</a>；ubuntu下使用apt-get安装。

服务器端配置(fedora和ubuntu下的配置相同，默认没有synergy.conf，因此需要手工创建)：
1，配置/etc/synergy.conf，将linux-name替换成fedora主机的host-name，windows-name也替换成windows下的名称。<strong>注意linux-name和windows-name后的:</strong>。

section: screens
linux-name:
windows-name:
end
section: links
windows-name:
right = linux-name
linux-name:
left = windows-name
end

2，在fedora的Firewall Configuration-Other Ports中添加24800 TCP，否则会出现
failed to connect to server: Timed out

在windows的客户端：
Other Computer's Host Name:这个地方一定要填写服务器的IP地址，否则会提示address not found

Options中的Advanced选项中填写的host-name要在服务器的configure文件中配置，否则会提示Server refused client with name "XXX"  A client with name "XXX" is not in the map。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date>2011-05-12 15:19:21</wp:post_date>
		<wp:post_date_gmt>2011-05-12 07:19:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fedoraubunt%e4%b8%8b%e5%ae%89%e8%a3%85synergy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fedoral"><![CDATA[fedoral]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux-2"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1442]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fedora%e4%b8%8b%e5%ae%89%e8%a3%85synergy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于mysql高版本同步低版本</title>
		<link>http://www.themysql.com/mysql/%e5%85%b3%e4%ba%8emysql%e9%ab%98%e7%89%88%e6%9c%ac%e5%90%8c%e6%ad%a5%e4%bd%8e%e7%89%88%e6%9c%ac.html</link>
		<pubDate>Wed, 25 May 2011 11:49:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=248</guid>
		<description></description>
		<content:encoded><![CDATA[今天一台mysql服务器5.5.8同步5.0.27时slave停止，错误消息如下：
Last_Error: Error 'master may suffer from http://bugs.mysql.com/bug.php?id=24432 so slave stops; check error log on slave for more info' on query. Default database: 'fb'. Query: 'INSERT into ON DUPLICATE KEY UPDATE ''

但是测试5.5.8同步5.0.45的时候发现这个bug还未修复，<span style="color: #ff0000;"><strong>只是复制不再停止，也没有提示错误</strong></span>。本来猜测是innodb_autoinc_lock_mode导致的，但是innodb_autoinc_lock_mode=1同步innodb_autoinc_lock_mode=0没有问题，因为对与“Mixed-mode inserts”，两者的区别的是在是否会预先分配，导致“空隙”出现而影响到下一次插入，但是mysql的binlog中，在insert语句之前会记录INSERT_ID(SET INSERT_ID=6/*!*/;)，因此也不会出现问题。

关于mysql对与auto_increment id的处理可以查看<a title="mysql官方关于如何处理auto-increment id" href="http://dev.mysql.com/doc/refman/5.5/en/innodb-auto-increment-handling.html" target="_blank">官方的文档</a>，写的非常清晰。

<strong><span style="color: #ff0000;">因此建议尽量不要使用高版本同步低版本，这样会有潜在的风险导致数据不一致，如果非要同步，建议定期检查数据一致性，推荐 使用</span><a title="mysql数据一致性检查工具mk-table-checksum" href="http://www.maatkit.org/doc/mk-table-checksum.html" target="_blank"><span style="color: #ff0000;">mk-table-checksum</span></a></strong>

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2011-05-25 19:49:28</wp:post_date>
		<wp:post_date_gmt>2011-05-25 11:49:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8emysql%e9%ab%98%e7%89%88%e6%9c%ac%e5%90%8c%e6%ad%a5%e4%bd%8e%e7%89%88%e6%9c%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1011]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.themysql.com/mysql/innodb_flush_log_at_trx_commit%e5%8f%82%e6%95%b0%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95.html</link>
		<pubDate>Tue, 31 May 2011 07:19:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=253</guid>
		<description></description>
		<content:encoded><![CDATA[mk-variable-advisor上建议将服务器的innodb_flush_log_at_trx_commit设置为2
# WARN innodb_flush_log_at_trx_commit-2: Setting innodb_flush_log_at_trx_commit to 0 has no performance benefits over setting it to 2, and more types of data loss are possible.

于是用sysbench对innodb_flush_log_at_trx_commit进行了测试。

innodb_flush_log_at_trx_commit控制了innodb何时刷新transaction log，0表示每秒钟write and flush一次，1表示每次commit write and flush一次，2表示每次commit write一次，每秒钟flush一次。flush时采用的方法由参数innodb_flush_method决定。0性能最好，2次之，1最差；0相比也最不安全，innodb崩溃的时候会损失一秒钟的事务。按照实际的需求进行设置，一般的应用建议设置为2。

测试参数：
innodb_buffer_pool_size=1G
-rw-rw---- 1 mysql mysql  12G May 30 15:27 /data/var/test/sbtest.ibd

测试结果如下图（如果当事务较小，服务器处理能力较强时，这种差距应该会拉大）：

﻿﻿<a href="http://www.themysql.com/wp-content/uploads/2011/05/1.png"><img class="alignnone size-medium wp-image-254" title="innodb_flush_log_at_trx_commit性能测试结果" src="http://www.themysql.com/wp-content/uploads/2011/05/1-250x300.png" alt="innodb_flush_log_at_trx_commit性能测试结果" width="250" height="300" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2011-05-31 15:19:56</wp:post_date>
		<wp:post_date_gmt>2011-05-31 07:19:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>innodb_flush_log_at_trx_commit%e5%8f%82%e6%95%b0%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1615]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.123.89.99</wp:comment_author_IP>
			<wp:comment_date>2011-07-12 09:52:35</wp:comment_date>
			<wp:comment_date_gmt>2011-07-12 01:52:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[横坐标没有标注好，实际上是1 2 4 8 16 32 64 128 256 512 768 1024]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[huixiangtao]]></wp:comment_author>
			<wp:comment_author_email>huixiangtao@yahoo.com.cn</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>1.203.140.248</wp:comment_author_IP>
			<wp:comment_date>2011-07-11 23:15:34</wp:comment_date>
			<wp:comment_date_gmt>2011-07-11 15:15:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thread num有点小,为什么不多测些？]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[addcn]]></wp:comment_author>
			<wp:comment_author_email>lhuibo@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>116.77.32.115</wp:comment_author_IP>
			<wp:comment_date>2011-06-30 11:47:30</wp:comment_date>
			<wp:comment_date_gmt>2011-06-30 03:47:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請教下這個圖是什麼工具生成的嗎？謝謝]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>61</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.24.198.139</wp:comment_author_IP>
			<wp:comment_date>2011-06-30 11:57:28</wp:comment_date>
			<wp:comment_date_gmt>2011-06-30 03:57:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[將測試結果copy到excel，然後使用excel繪製的]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>60</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Percona和Xtradb特性总结</title>
		<link>http://www.themysql.com/mysql/percona%e5%92%8cxtradb%e7%89%b9%e6%80%a7%e6%80%bb%e7%bb%93.html</link>
		<pubDate>Thu, 09 Jun 2011 07:21:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Response Time Distribution</strong>
query_response_time_stats设置是否开启，默认[0]
通过query_response_time_range_base设置range_base
(range_base ^ n; range_base ^ (n+1)]
通过SELECT * from INFORMATION_SCHEMA.QUERY_RESPONSE_TIME或SHOW QUERY_RESPONSE_TIME;查看
FLUSH QUERY_RESPONSE_TIME;
FLUSH does two things:
Clears the collected times from the QUERY_RESPONSE_TIME table
Reads the value of query_response_time_range_base and uses it to set the range base for the table
表类型momory因此对性能的损耗应该十分有限

<strong>Support of Multiple Page Sizes</strong>
innodb_page_size
Dynamic Variable	 No
###EXPERIMENTAL###: The universal page size of the database. Changing for an existing database is not supported. Use at your own risk!

<strong>Fast Shutdown</strong>
Some InnoDB/XtraDB threads which perform various background activities are in the sleep state most of the time. They only wake up every few seconds to perform their tasks. They also check whether the server is in the shutdown phase, and if not, they go to the sleep state again. That means there could be a noticeable delay (up to 10 seconds) after a shutdown command and before all InnoDB/XtraDB threads actually notice this and terminate. This is not a big problem for most production servers, because a shutdown of a heavily loaded server normally takes much longer than 10 seconds.
后台运行的处于sleep状态的线程，只有在wake up的时候才会检查是否处于关闭状态，xtradb直接关闭。

<strong>Count InnoDB Deadlocks</strong>
It adds a new global status variable (innodb_deadlocks) showing the number of deadlocks.*
innodb_deadlocks

<strong>Slow Query Log</strong>
log_slow_filter这个variable可以将更多的类型输入到slow log中
<table>
<tbody>
<tr>
<th>Value</th>
<th>Explanation</th>
</tr>
<tr>
<td>qc_miss</td>
<td>The query was not found in the query cache.</td>
</tr>
<tr>
<td>full_scan</td>
<td>The query performed a full table scan.</td>
</tr>
<tr>
<td>full_join</td>
<td>The query performed a full join (a join without indexes).</td>
</tr>
<tr>
<td>tmp_table</td>
<td>The query created an implicit internal temporary table.</td>
</tr>
<tr>
<td>tmp_table_on_disk</td>
<td>The query's temporary table was stored on disk.</td>
</tr>
<tr>
<td>filesort</td>
<td>The query used a filesort.</td>
</tr>
<tr>
<td>filesort_on_disk</td>
<td>The filesort was performed on disk.</td>
</tr>
</tbody>
</table>
更多的特性参照官方说明：<a href="http://www.percona.com/docs/wiki/percona-server:features:start">http://www.percona.com/docs/wiki/percona-server:features:start</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date>2011-06-09 15:21:25</wp:post_date>
		<wp:post_date_gmt>2011-06-09 07:21:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>percona%e5%92%8cxtradb%e7%89%b9%e6%80%a7%e6%80%bb%e7%bb%93</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="percona"><![CDATA[Percona]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1038]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>编译安装xtrabackup</title>
		<link>http://www.themysql.com/mysql/%e7%bc%96%e8%af%91%e5%ae%89%e8%a3%85xtrabackup.html</link>
		<pubDate>Sat, 25 Jun 2011 14:08:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[xtrabackup是percona公司创建并维护的项目，提供innodb引擎的在线备份。
xtrabackup提供了两种命令行工具：
xtrabackup：用于备份InnoDB引擎的数据（不会备份myisam比如mysql权限相关表等，也不会自动copy frm文件）；
innobackupex：一个perl脚本，在执行过程中会调用xtrabackup命令，用该命令即可以备份InnoDB，也可以备份MyISAM/copy frm文件。

1，下载xtrabackup源代码,www.percona.com
2，解压xtrabackup源代码，在解压之后的根目录下执行。注意
①不能进入到utils目录中
②不能使用sh来执行，因为ubuntu下sh默认使用的是dash而不是bash
③最后代表mysql的版本号，执行时要指定与之匹配的MySQL数据库版本。
④解压之后目录下就已经存在innobackupex脚本，innobackupex脚本调用xtrabackup命令进行备份，因此实际上是在编译安装xtrabackup

/win/xtrabackup-1.6# ./utils/build.sh 5.1

因为是编译安装，因此包依赖关系需要一点点的处理
bzr: command not found
apt-get install bzr

BUILD/autorun.sh: line 41: aclocal: command not found
apt-get install autoconf

BUILD/autorun.sh: line 44: libtoolize: command not found
apt-get install libtool

命令执行完成之后，xtrabackup就可以用了，一般默认编译后，该文件保存在xtrabackup-1.6/mysql-5.1.56/storage/innobase/xtrabackup/目录下，当然也可以通过find命令查找xtrabackup的具体路径。

为方便使用创建两个软连接：
<pre lang="sh">
ln -s /usr/local/xtrabackup-1.6/innobackupex /bin/innobackupex
ln -s /usr/local/xtrabackup-1.6/mysql-5.1.56/storage/innobase/xtrabackup/xtrabackup_51 /bin/xtrabackup_51
</pre>

下来就可以使用了，下面的脚本是一个简单的mysql全量备份脚本

<pre lang="sh">
#!/bin/sh
#The location to save backup file,the location should be dedicated to backup,when backup finish it should be move to other safe place.
backup_loc="/data/dbbak"
innobackupex --user=root --password=123 --throttle=100 --slave-info $backup_loc
if [ $? -ne 0 ]
then
    exit
fi
backup_name=`ls  $backup_loc | grep 20`
innobackupex --apply-log --ibbackup=xtrabackup_51 /data/dbbak/$backup_name >/data/dbbak/xtrabackup.log 2>&1
tar -cjf $backup_name.tar.bz2 ./$backup_name/
#copy...
#rm -rf $backup_loc
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2011-06-25 22:08:27</wp:post_date>
		<wp:post_date_gmt>2011-06-25 14:08:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%bc%96%e8%af%91%e5%ae%89%e8%a3%85xtrabackup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="percona"><![CDATA[Percona]]></category>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1523]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql crash with create temporary innodb table</title>
		<link>http://www.themysql.com/mysql/mysql-crash-with-create-temporary-innodb-table.html</link>
		<pubDate>Mon, 08 Aug 2011 08:32:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[mysql5.5中create tempory table with innodb engine会造成mysqld crash掉
mysql@>create temporary table test1(id int) engine=innodb;
Query OK, 0 rows affected (0.00 sec)

mysql@>show create table test1;
ERROR 2006 (HY000): MySQL server has gone away
No connection. Trying to reconnect...
Connection id:    1
Current database: fb

ERROR 1146 (42S02): Table 'fb.test1' doesn't exist

error log中的信息如下：
110808 16:20:35  InnoDB: Database was not shut down normally!
InnoDB: of table 110808 16:20:38 [Warning] Invalid (old?) table or database name '#sql4619_1_0'
"shm".<result 2 when explaining filename '#sql4619_1_0'>.
110808 16:20:38  InnoDB: 1.1.4 started; log sequence number 154250481442
110808 16:20:38 [Note] Recovering after a crash using fb-bin
110808 16:20:38 [Note] Starting crash recovery...
110808 16:20:38 [Note] Crash recovery finished.
110808 16:20:38  InnoDB: Error: table 110808 16:20:38 [Warning] Invalid (old?) table or database name '#sql4619_1_0'
`shm`.<result 2 when explaining filename '#sql4619_1_0'> does not exist in the InnoDB internal

如果engine=myisam的话就没有问题，如果把tmp_dir由tmpfs修改为物理磁盘的话也不会有问题，更深层的原因现在还不知道，已经有人发现了这个问题，并且作为一个bug提交了。

mysql的temporary table是在线程存活期中有效的，当线程close掉的时候，temporary table会被drop掉，另外创建一个同名的temporary table会将同名的非temporary隐藏起来，线程结束之后显影。另外因为是跟线程关联的，所以多个线程的临时表名称可以冲突。

翻译来自这边文章：http://ronaldbradford.com/blog/tag/tmpfs/
mysql bug：http://bugs.mysql.com/bug.php?id=26662
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2011-08-08 16:32:36</wp:post_date>
		<wp:post_date_gmt>2011-08-08 08:32:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-crash-with-create-temporary-innodb-table</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1417]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[zuoxingyu]]></wp:comment_author>
			<wp:comment_author_email>32416070@qq.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.86.78.66</wp:comment_author_IP>
			<wp:comment_date>2011-10-28 16:49:51</wp:comment_date>
			<wp:comment_date_gmt>2011-10-28 08:49:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mysql&gt; create temporary table test1(id int) engine=innodb;
Query OK, 0 rows affected (0.73 sec)

mysql&gt; show create table test1;
+-------+--------------------------------------------------
| Table | Create Table
+-------+--------------------------------------------------
| test1 | CREATE TEMPORARY TABLE `test1` (
  `id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 |
+-------+--------------------------------------------------
1 row in set (0.03 sec)

mysql&gt; select version();
+-----------+
| version() |
+-----------+
| 5.5.12    |
+-----------+
1 row in set (0.09 sec)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>96</wp:comment_id>
			<wp:comment_author><![CDATA[zuoxingyu]]></wp:comment_author>
			<wp:comment_author_email>32416070@qq.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.86.78.66</wp:comment_author_IP>
			<wp:comment_date>2011-10-28 16:54:21</wp:comment_date>
			<wp:comment_date_gmt>2011-10-28 08:54:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可能是小版本的问题。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Centos下安装MySQLdb</title>
		<link>http://www.themysql.com/mysql/centos%e4%b8%8b%e5%ae%89%e8%a3%85mysqldb.html</link>
		<pubDate>Fri, 26 Aug 2011 08:32:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[安装之前需要先安装
①MySQL-devel-VERSION.i386.rpm。The libraries and include files that are needed if you want to compile other MySQL clients, such as the Perl modules。如果不安装会出现“EnvironmentError: mysql_config not found”。
②MySQL-shared-VERSION.i386.rpm。This package contains the shared libraries (libmysqlclient.so*) that certain languages and applications need to dynamically load and use MySQL。如果不安装会出现“/usr/bin/ld: cannot find -lmysqlclient_r“

注意：
5.5.8的shared出现问题，导致一直提示“/usr/bin/ld: cannot find -lmysqlclient_r”，安装5.5.15之后就问题
x86对应32位版本,amd64对应x86_64版本


方法一：
wget -q http://peak.telecommunity.com/dist/ez_setup.py
python ez_setup.py
easy_install是由PEAK(Python Enterprise Application Kit)开发的setuptools包里带的一个命令，所以使用easy_install实际上是在调用setuptools来完成安装模块的工作。

easy_install MySQL-python

方法二：
下载MySQL-python-1.2.3.tar.gz;tar xfz MySQL-python-1.2.1.tar.gz;python ez_setup.py;python setup.py build;python setup.py install]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2011-08-26 16:32:35</wp:post_date>
		<wp:post_date_gmt>2011-08-26 08:32:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>centos%e4%b8%8b%e5%ae%89%e8%a3%85mysqldb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1131]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql跳过大量replication错误的几种方法</title>
		<link>http://www.themysql.com/mysql/mysql%e8%b7%b3%e8%bf%87%e5%a4%a7%e9%87%8freplication%e9%94%99%e8%af%af%e7%9a%84%e5%87%a0%e7%a7%8d%e6%96%b9%e6%b3%95.html</link>
		<pubDate>Thu, 03 Nov 2011 11:42:14 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[mysql跳过大量replication错误的几种方法(错误大家都不想见到，但是见到了也得想办法处理)：

1，使用pt-slave-restart脚本
地址：http://www.percona.com/doc/percona-toolkit/pt-slave-restart.html
推荐使用这种方法，有诸多优点：快速，可以使用error-numbers选项跳过指定的error code

2，使用set sql_slave_skip_counter
使用watch -n 1 “mysql -hxxx -uxx -pxx -e'set global sql_slave_skip_counter=1;start slave'”
但是有诸多缺点，跟pt-slave-restart相比，pt的优点就是他的缺点，因为他-n的最小单位是秒，因此速度较慢。
注意：可能有人会对这个错误产生疑问，提示一下set global sql_slave_skip_counter=1在mysql replication运行正常的情况下会报错误，提示无法执行。
另外使用sql_slave_skip_counter的时候会在error log中记录每一条跳过的语句，可以通过分析error log来调查原因或者进行修补。

3，使用mysql variable slave_skip_errors
缺点：不是Dynamic的，不能动态修改，必须重启服务器
参数说明：Normally, replication stops when an error occurs on the slave. This gives you the opportunity to resolve the inconsistency in the data manually. This variable tells the slave SQL thread to continue replication when a statement returns any of the errors listed in the variable value.

4，使用slave_exec_mode
是Dynamic的，可以动态修改，但是只能跳过duplicate-key and no-key-found errors
参数说明：Controls whether IDEMPOTENT or STRICT mode is used in replication conflict resolution and error checking. IDEMPOTENT mode causes suppression of duplicate-key and no-key-found errors. Beginning with MySQL 5.1.23-ndb-6.2.14 and MySQL 5.1.24, this mode should be employed in multi-master replication, circular replication, and some other special replication scenarios. STRICT mode is the default, and is suitable for most other cases.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2011-11-03 19:42:14</wp:post_date>
		<wp:post_date_gmt>2011-11-03 11:42:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e8%b7%b3%e8%bf%87%e5%a4%a7%e9%87%8freplication%e9%94%99%e8%af%af%e7%9a%84%e5%87%a0%e7%a7%8d%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[mysql跳过大量replication错误的几种方法]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mysql,replication error]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1172]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql5.5同步mysql5.1出现“BIGINT UNSIGNED value is out of range”解决方法</title>
		<link>http://www.themysql.com/mysql/mysql5-5%e5%90%8c%e6%ad%a5mysql5-1%e5%87%ba%e7%8e%b0%e2%80%9cbigint-unsigned-value-is-out-of-range%e2%80%9d%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95.html</link>
		<pubDate>Mon, 12 Dec 2011 12:34:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[线上遇到的错误：
主库5.1版本执行下面类似的语句
<code lang="sql">
mysql> update test set age=greatest(0,age-1) where id=1;
从库5.5版本复制出错：
mysql> update test set age=greatest(0,age-1) where id=1;
</code>


原因：
Mysql5.5下sql_mode为空时，两个数想减，当其中一个为unsigned时，如果结果为负数，则会出现error；sql_mode修改为NO_UNSIGNED_SUBTRACTION，则不会出现error，如下所示：
<code lang="sql">
mysql> SET sql_mode = '';
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT CAST(0 AS UNSIGNED) - 1;
ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(cast(0 as unsigned) - 1)'
If the NO_UNSIGNED_SUBTRACTION SQL mode is enabled, the result is negative:

mysql> SET sql_mode = 'NO_UNSIGNED_SUBTRACTION';
mysql> SELECT CAST(0 AS UNSIGNED) - 1;
+-------------------------+
| CAST(0 AS UNSIGNED) - 1 |
+-------------------------+
|                      -1 |
+-------------------------+
 </code>
目前从测试的结果看，sql_mode不会对replication的sql_thread产生影响（使用NO_ZERO_IN_DATE、STRICT_ALL_TABLES、NO_UNSIGNED_SUBTRACTION进行测试），5.1->5.5时，当遇到这个错误的时候，通过修改从库的sql_mode无法解决这个问题。

测试5.5->5.5，当主库的sql_mode设置成NO_UNSIGNED_SUBTRACTION时，主库可以插入，从库也不会报错。 
从目前调查的结论看，这个应该是一个bug。

解决方法：
1，  主库和从库版本保持一致（主库升级或者从库降级）。如果主库升级的话，主库需要设置sql_mode=” NO_UNSIGNED_SUBTRACTION”。
2，  将原来的greatest函数修改为控制流函数if，建议使用这种方法。
<code lang="sql">
mysql> update test set age=greatest(0,age-1) where id=1;
Query OK, 0 rows affected (0.00 sec)
Rows matched: 1  Changed: 0  Warnings: 0
mysql> update test set age=if(age>1,age-1,0) where id=1;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0
</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date>2011-12-12 20:34:18</wp:post_date>
		<wp:post_date_gmt>2011-12-12 12:34:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql5-5%e5%90%8c%e6%ad%a5mysql5-1%e5%87%ba%e7%8e%b0%e2%80%9cbigint-unsigned-value-is-out-of-range%e2%80%9d%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1423]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL Trigger的一个bug</title>
		<link>http://www.themysql.com/mysql/mysql-trigger%e7%9a%84%e4%b8%80%e4%b8%aabug.html</link>
		<pubDate>Mon, 12 Dec 2011 12:39:43 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[一、故障原因

使用trigger在特定的场景（场景描述见Bug重现以及原因分析）下触发了mysql的bug，官方已经确认bug还没有修复，目前5.1以上版本都存在。

Bug地址http://bugs.mysql.com/bug.php?id=53079

二、解决方案

1.将binlog_format修改为mixed或者row-based（可以在线修改）。

2.从应用角度分析，摒弃trigger这种实现方式。

三、Bug重现以及原因分析

下面是从bug中摘取的，描述的很清晰，我这里就不做翻译了，已经进行了测试了和bug描述的一致。

Description:

When there is an UPDATE and an INSERT trigger on same table, and both triggers perform an

INSERT into a second table which has an auto_inc column, replication fails with a DUP KEY

error on the UPDATE statement if the transactions are committed in a different order than

the statements are executed. This is because the binary log contains a SET INSERT_ID

statement before the UPDATE, and that ID is used by the trigger (not by the UPDATE

statement itself).

How to repeat:

Create the following two tables and two triggers in a replicated environment, using

InnoDB engine and 5.1.45 distribution.

master [localhost] {msandbox} (test) &gt; CREATE TABLE `a` (

-&gt;   `id` int(10) unsigned NOT NULL auto_increment,

-&gt;   `c1` varchar(255) NOT NULL,

-&gt;   PRIMARY KEY  (`id`)

-&gt; ) ENGINE=InnoDB ;

Query OK, 0 rows affected (0.00 sec)

master [localhost] {msandbox} (test) &gt; CREATE TABLE `b` (

-&gt;   `id` int(10) unsigned NOT NULL auto_increment,

-&gt;   `a_id` int(10) unsigned NOT NULL,

-&gt;   `op` enum('i','u','d') default 'i',

-&gt;   `t` timestamp NOT NULL default CURRENT_TIMESTAMP,

-&gt;   PRIMARY KEY  (`id`)

-&gt; ) ENGINE=InnoDB ;

Query OK, 0 rows affected (0.00 sec)

master [localhost] {msandbox} (test) &gt; delimiter ;;

master [localhost] {msandbox} (test) &gt; create trigger a_ai after insert on a for each row

begin insert into b (a_id, op) values (NEW.id, 'i'); end;;

Query OK, 0 rows affected (0.01 sec)

master [localhost] {msandbox} (test) &gt; create trigger a_au after update on a for each row

begin insert into b (a_id, op) values (NEW.id, 'u'); end;;

Query OK, 0 rows affected (0.00 sec)

I will upload the full log of reproducing the bug in a file, but the gist of it is:

On master, open 2 connections and run insert and update on table `a` in the following

order:

1: INSERT

1: COMMIT

2:     BEGIN

2:     UPDATE

1: BEGIN

1: INSERT

1: COMMIT

2:     COMMIT

The interleaving of statements causes the order of statements in the binary log to differ

from the order in which the TRIGGERs executed on the master (the master executes IUI but

the slave executes IIU), and therefor the UPDATE fails with a DUPKEY error because the

binary log included a SET INSERT_ID before the UPDATE statement.

The slave will execute both inserts into the `a` table, and the fail when it executes the

update, claiming a duplicate key error for primary key value "2".

Suggested fix:

Do not include SET INSERT_ID before an UPDATE, even if that UPDATE fires a TRIGGER which

generates a new auto_inc value. That was the behavior in 5.0.87, and replication did not

break (though the master and slave did get out of sync).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2011-12-12 20:39:43</wp:post_date>
		<wp:post_date_gmt>2011-12-12 12:39:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-trigger%e7%9a%84%e4%b8%80%e4%b8%aabug</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[708]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何判断MySQL的版本</title>
		<link>http://www.themysql.com/mysql/%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%admysql%e7%9a%84%e7%89%88%e6%9c%ac.html</link>
		<pubDate>Wed, 28 Dec 2011 02:41:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>一、MySQL正在运行</strong>
mysql&gt; status
--------------
mysql  Ver 14.14 Distrib 5.5.18, for Linux (x86_64) using readline 5.1
mysql&gt; select version();
+------------+
| version()  |
+------------+
| 5.5.12-log |
+------------+
1 row in set (0.00 sec)
<strong>二、MySQL没有运行</strong>
通过以下方法确定MySQL的版本，按推荐优先级进行排 序：
1.binlog
mysql重启的情况下会产生一条新的binlog，每条binlog的开头都会有类似下面的记录
#111115 15:26:25 server id 24273307 end_log_pos 107 Start: binlog v 4, server v 5.5.8-log created 111115 15:26:25 at startup

2.slow.log
/usr/local/mysql55/bin/mysqld, Version: 5.5.8-log (MySQL Community Server (GPL)). started with:
tac slow.log | grep "Version" -m 1（防止慢查询较大时，影响到效率）

3.error.log
Version: '5.5.8-log' socket: '/tmp/mysql3307.sock' port: 3307 MySQL Community Server (GPL)

4.通过查看mysql库表（mysql不同的版本包含一些不同的表；这种方式的话，如果在升级版本的时候没有使用mysql_upgrade进行更新的话，会存在问题）
使用类似于IE、Firefox调css的hack方案，就像会祥目前所采用的方案，分析mysql库下面的表：
plugin=` sudo /bin/ls /$mysql_datadir/mysql${port}/mysql |grep plug -i`
proxies_priv=`sudo /bin/ls /$mysql_datadir/mysql${port}/mysql |grep proxies_priv -i`
if [ -z "$plugin" ] &amp;&amp; [ -z "$proxies_priv" ] ; then
_version=5.0
elif [ -z "$proxies_priv" ] ; then
_version=5.1
else
_version=5.5
fi

注：
前三种方式存在的问题：如果使用使用mysql5.1启动mysql5.5，会在slow.log error.log binlog中记录下5.1；建议就是采用上次成功启动之后的版本作为下一次启动的版本。
第四种方式存在的问题：如果在升级之后，没有使用mysql_upgrade会存在误判，使用前三种方式不会存在这个问题。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2011-12-28 10:41:15</wp:post_date>
		<wp:post_date_gmt>2011-12-28 02:41:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%admysql%e7%9a%84%e7%89%88%e6%9c%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[876]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>165</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>rj03hou@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>61.135.152.207</wp:comment_author_IP>
			<wp:comment_date>2011-12-31 13:58:50</wp:comment_date>
			<wp:comment_date_gmt>2011-12-31 05:58:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[主要是需求就是通过数据文件来判断MySQL的版本，而你说的是判断mysql客户端和服务器端的版本]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>164</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>164</wp:comment_id>
			<wp:comment_author><![CDATA[shepard]]></wp:comment_author>
			<wp:comment_author_email>shijiunv@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>211.144.198.146</wp:comment_author_IP>
			<wp:comment_date>2011-12-30 21:02:07</wp:comment_date>
			<wp:comment_date_gmt>2011-12-30 13:02:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; mysqld -V
mysqld  Ver 5.5.15 for linux2.6 on x86_64 (MySQL Community Server (GPL))

&gt; mysql -V
mysql  Ver 14.14 Distrib 5.5.15, for linux2.6 (x86_64) using readline 5.1]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>MySQL中latin1与中文</title>
		<link>http://www.themysql.com/mysql/mysql%e4%b8%adlatin1%e4%b8%8e%e4%b8%ad%e6%96%87.html</link>
		<pubDate>Mon, 30 Jan 2012 09:27:30 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=283</guid>
		<description></description>
		<content:encoded><![CDATA[跟同事讨论latin1与中文的关系，调查了之后将结果总结如下:
不同的字符集编码了不同的字符，latin1中包含有191个可打印字符，其余是控制字符或者扩展的欧洲特殊字符；不包含中文字符。

之所以可以在latin1中保存和显示中文字符请看下面的示例以及说明：
latin1和ascii都可以存储中文(ascii就不列举)
<pre lang="sql">CREATE TABLE `user` (
`name` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1
set names latin1;
insert into user values("我们");
mysql&gt;select * from user;
+--------+
| name   |
+--------+
| 我们   |
+--------+
1 row in set (0.00 sec)</pre>
使用set names latin1之后，character_set_client、character_set_connection、character_set_results都将设置为ascii编码，不会做任何编码转化(编码转化会涉及到重新编码，因为不同的字符集对同一个字符的编码不一样；以及新字符集无法编码旧字符集中字符的问题)。

如果改成set names utf8，则insert的时候，character_set_connection-&gt;column character set时，会将utf8编码强行转化成latin1，转化时超出latin1编码范围的字符全部转化成0x3F（latin1中的?）。

参照：<a title="深入Mysql字符集设置" href="http://www.laruence.com/2008/01/05/12.html">深入MySQL字符集设置</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date>2012-01-30 17:27:30</wp:post_date>
		<wp:post_date_gmt>2012-01-30 09:27:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e4%b8%adlatin1%e4%b8%8e%e4%b8%ad%e6%96%87</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[1351]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1088</wp:comment_id>
			<wp:comment_author><![CDATA[地方]]></wp:comment_author>
			<wp:comment_author_email>3333333@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://服务而我</wp:comment_author_url>
			<wp:comment_author_IP>222.76.71.110</wp:comment_author_IP>
			<wp:comment_date>2012-08-13 14:35:25</wp:comment_date>
			<wp:comment_date_gmt>2012-08-13 06:35:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我呃呃呃呃呃呃呃呃呃呃呃]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>innodb long column在不同的file format下的存储</title>
		<link>http://www.themysql.com/mysql/innodb-long-column%e5%9c%a8%e4%b8%8d%e5%90%8c%e7%9a%84file-format%e4%b8%8b%e7%9a%84%e5%ad%98%e5%82%a8.html</link>
		<pubDate>Wed, 01 Feb 2012 11:58:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[innodb long column在不同的file format下的存储：
innodb_file_format=Antelope，ROW_FORMAT=COMPACT或者REDUNDANT时，保存前768个字节，剩下的会保存在overflow page中。
innodb_file_format=Barracuda，table is created with ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED， long column values are stored fully off-page, and the clustered index record contains only a 20-byte pointer to the overflow page.

facebook的Mark Callaghan进行了测试，补充了官方文档，一个page中可以存储下两行时可以不会将数据保存到overflow page中。（因为facebook被墙了，因此将文章贴在下面了）
How many pages does InnoDB for tables with large columns?
by Mark Callaghan on Friday, January 20, 2012 at 9:20pm

I am confused by the descriptions of when InnoDB uses external pages for long columns. There have been a few good blog posts about this but the official documentation isn't clear to me when it describes the old (Antelope) and new (Barracuda) file formats. I don't think I am alone in being confused.

The main point is that despite what the documentation might say and I think it is ambiguous, rows with a large column can be stored inline. By large column I mean one that is greater than 768 bytes. I prefer to have rows not use external pages because that can increase the number of disk reads required to fetch a row. I prefer the Dynamic row format versus the Compact row format because there is no benefit for my workload in storing the prefix of a large column inline. Queries in my workload select do not select a prefix of large columns and I suspect that the database will be smaller when the Dynamic format is used but I have yet to confirm that (a test is in progress).

I tested this for uncompressed InnoDB tables using the default page size of 16kb and a table with two columns (int and text). I inserted 131072 rows into the table and then ran a modified version of innochecksum to count the number of pages by type. I also looked at the size of the per-table ibd files. The InnoDB file format is Barracuda and the tables use row_format=Compact. The table was loaded four times using:
length(text) == 500 for all rows. This used 5376 pages total and 0 external pages.
length(text) == 1000 for all rows. This used 9984 pages total and 0 external pages.
length(text) == 6000 for all rows. This used 67072 pages total and 0 external pages. There were 2 rows per page as that used about 12kb on each page. This makes it clear that InnoDB can store large columns inline in leaf pages without using external pages as long as the size of the row is less than half the size of a page.
length(text) == 9000 for all rows. This used 160768 pages. Each row requires one overflow page. Innochecksum reports that there were 131072 pages with type FIL_PAGE_TYPE_BLOB, 7792 pages with type FIL_PAGE_TYPE_INDEX and 22383 pages with type FIL_PAGE_TYPE_ALLOCATED. This makes it clear that InnoDB uses a separate external page per large column as there were 131072 rows with one large column each and the same number of external pages.
I repeated the test using row_format=Dynamic and the same number of pages is used for the first three sizes for the text column: 500. Fewer pages were used for the Dynamic row format because a prefix of the large column is not stored inline and the number of FIL_PAGE_TYPE_INDEX pages is 2147 versus 7792. The number of FIL_PAGE_TYPE_ALLOCATED pages was also much less (2147 versus 22383) but I have yet to explain the reason for that.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date>2012-02-01 19:58:08</wp:post_date>
		<wp:post_date_gmt>2012-02-01 11:58:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>innodb-long-column%e5%9c%a8%e4%b8%8d%e5%90%8c%e7%9a%84file-format%e4%b8%8b%e7%9a%84%e5%ad%98%e5%82%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[746]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducing new type of benchmark(简略翻译)</title>
		<link>http://www.themysql.com/mysql/introducing-new-type-of-benchmark%e7%ae%80%e7%95%a5%e7%bf%bb%e8%af%91.html</link>
		<pubDate>Wed, 29 Feb 2012 14:36:52 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=295</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

原文地址：<a href="http://www.mysqlperformanceblog.com/2012/02/25/introducing-new-type-of-benchmark/">http://www.mysqlperformanceblog.com/2012/02/25/introducing-new-type-of-benchmark/</a>

一篇写的很好的文章，让测试更加接近现实。

Traditionally the most benchmarks are focusing on throughput. We all get used to that, and in fact in our benchmarks, sysbench and tpcc-mysql, the final result is also represents the throughput (transactions per second in sysbench; NewOrder transactions Per Minute in tpcc-mysql). However, like Mark Callaghan mentioned <a href="http://www.mysqlperformanceblog.com/2012/02/23/percona-server-vs-mysql-on-intel-320-ssd/comment-page-1/#comment-891509">in comments</a>, response time is way more important metric to compare.

传统的benchmark都主要考察的是TPS，忽略了另外一个重要的纬度：响应时间。
<div>I want to pretend that we pioneered (not invented, but started to use widely) a benchmark methodology when we measure not the final throughput, but rather periodic probes (i.e. every 10 sec).
It allows us to draw “stability” graphs, like this one</div>
<div><img src="file:///C:/Users/sina/AppData/Local/Temp/enhtmlclip/Image.png" alt="alt" width="576" height="360" /></div>
<div>where we can see not only a final result, but how the system behaves in dynamic.</div>
<div>我提倡在测试时，我们不应该只记录TPS，同时应该间隔一段时间记录响应时间，这样可以绘制出一幅图，通过它可以观察稳定性。</div>
<strong>What’s wrong with existing benchmarks?</strong>
<div>Well, all benchmarks are lie, and focusing on throughput does not get any closer to reality.</div>
<div>现有的benchmark都存在问题，他们只关注TPS，跟实际有差距。</div>
Benchmarks, like sysbench or tpcc-mysql, start N threads and try to push the database as much as possible, bombarding the system with queries with no pause.
<div>That rarely happens in real life. There are no systems that are pushed to 100% load all time.</div>
<div>benchmark软件比如说sysbench、tpcc-mysql，都是开启N个线程，然后“不停”的向数据库发送请求，在现实中很少见，很有有系统会不停的发送请求。</div>
<div>So, <strong>how we can model it?</strong> There are different theories, and the one which describes user’s behavior, is <a href="http://en.wikipedia.org/wiki/Queueing_theory">Queueing theory</a>. In short we can assume that users send requests with some <strong>arrival rate</strong> (which can be different in the different part of day/week/month/year though). And what is important for an end user is <strong>response time</strong>, that is how long the user has to wait on results. E.g. when you go to your Facebook profile or Wikipedia page, you expect to get response within second or two.</div>
<div>我们应该如何建模？有很多的理论，其中一种模仿用户的行为，队列理论。用户发送请求都是存在一定的“arrival rate”（这个在不同的时间段是不一样）。对与用户最重要的，就是请求的响应时间。</div>
<div>How we should change the benchmark to base on this model ?</div>
<div>按照这种模型，我们应该如何改变我们的benchmark？</div>
<div>
There are my working ideas:</div>
<ul>
	<li>Benchmark starts N working threads, but they all are idle until asked to handle a request</li>
	<li>For example, if our target is arrival rate 2 queries per second, then exponential distribution will give us following intervals (in sec) between events: 0.61, 0.43, 1.55, 0.18, 0.01, 0.76, 0.09, 1.26, …&nbsp;

Or if we represent graphically (point means even arrival):
<a href="http://www.mysqlperformanceblog.com/wp-content/uploads/2012/02/arrival.png"><img src="file:///C:/Users/sina/AppData/Local/Temp/enhtmlclip/Image(1).png" alt="alt" width="590" height="107" /></a>
As you see interval is far from being strict 0.5 sec, but 0.5 is the mean of this random generation function. On the graph you see 20 events arrived within 9 seconds.</li>
	<li>Transactions from the queue are handled by one of free threads, or are waiting in the queue until one of threads are ready. The time waiting in the queue is added to a total response time.</li>
	<li>As a result we measure 95% or 99% response times.</li>
</ul>
<div>我的一些想法就是：启动起来N个线程，按照泊松分布将请求发送到队列中，N个线程开始处理队列中的请求，当请求不能被处理时，就等待，最后的response time从进入队列中开始计算。</div>
<div>What does it give to us? It allows to see:</div>
<ul>
	<li>What is the response time we may expect having a given arrival rate</li>
	<li>What is the optimal number of working threads (the one that provides best response times)</li>
</ul>
<div>按照这样的做法，我们可以通过测试得出：</div>
<div>1.按照某个arrival rate的时候的响应时间</div>
<div>2.最佳的working threads</div>
<div><strong>
</strong></div>
<div><strong>When it is useful?</strong></div>
At this moment I am looking to answer on questions like:
– When we add additional node to a cluster (e.g. XtraDB Cluster), how does it affect the response time ?
– When we put a load to two nodes instead of three nodes, will it help to improve the response time ?
– Do we need to increase number of working threads when we add nodes ?

Beside cluster testing, it will also help to see an affect of having a side on the server. For example, the famous problem with <a href="http://www.mysqlperformanceblog.com/2011/04/20/drop-table-performance/">DROP TABLE performance</a>. Does DROP TABLE, running in separate session, affect a response time of queries that handle user load ? The same for mysqldump, how does it affect short user queries ?
<div>In fact I have a prototype based on sysbench. It is there <a href="https://code.launchpad.net/~vadim-tk/sysbench/inj-rate">lp:~vadim-tk/sysbench/inj-rate/</a>. It works like a regular sysbench, but you need to specify the additional parameter <code>tx-rate</code>, which defines an expected arrival rate (in transactions per second).</div>
<div>事实上，我已经做了原型出来（地址如上），和普通的sysbench使用没有两样，通过增加一个参数tx-rate（这个参数定义了期望的arrival rate，TPS）</div>
There are some results from my early experiments. Assume we have an usual sysbench setup, and we target an arrival rate as 3000 transactions per second (regular sysbench transactions). We vary working threads from 1 to 128.

There are results for 16-128 threads (the result is 99% response time, taken every 10 sec. the less is better)
<a href="http://www.mysqlperformanceblog.com/wp-content/uploads/2012/02/rt-16-128-1.png"><img src="file:///C:/Users/sina/AppData/Local/Temp/enhtmlclip/Image(2).png" alt="alt" width="600" height="370" /></a>
<div>We can see that 16 threads give best 99% response time (15.74ms final), 32 threads: 16.75 ms, 64 threads: 25.14ms.
And with 128 threads we have pretty terrible unstable response times, with 1579.91ms final.
That means that 16-32 threads is probably best number of concurrently working threads (for this kind of workload and this arrival rate).</div>
<div>我使用它进行了一次并发测试，发现并发数量在16-32之间时，响应时间最低。</div>
Ok, but what happens if we have not enough working threads? You can see it from following graph (1-8 threads):
<a href="http://www.mysqlperformanceblog.com/wp-content/uploads/2012/02/rt-1-8-1.png"><img src="file:///C:/Users/sina/AppData/Local/Temp/enhtmlclip/Image(3).png" alt="alt" width="600" height="370" /></a>
The queue piles up, waiting time grows, and the final response time grows linearly up to ~30 sec, where benchmark stops, because the queue is full.

I am looking for your comments, do you find it useful?

<a href="https://twitter.com/VadimTk">Follow @VadimTk</a>

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date>2012-02-29 22:36:52</wp:post_date>
		<wp:post_date_gmt>2012-02-29 14:36:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-new-type-of-benchmark%e7%ae%80%e7%95%a5%e7%bf%bb%e8%af%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[561]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL5.6新功能Innodb表空间导入</title>
		<link>http://www.themysql.com/mysql/mysql5-6%e6%96%b0%e5%8a%9f%e8%83%bdinnodb%e8%a1%a8%e7%a9%ba%e9%97%b4%e5%af%bc%e5%85%a5.html</link>
		<pubDate>Wed, 11 Apr 2012 03:11:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>mysql5.6新功能通过flush table with read lock时将meta-data记录到一个单独的文件中，从而使得可以将ibd文件copy到别处进行import，这样可以使用xtrabackup的备份的表可以进行单表还原，但是还得先把xtrabackup备份启动起来生成cfg文件；还是比较麻烦，Percona可以直接import（可以从官方的innodb引擎备份的文件中进行import），注意Percona这个功能（通过参数<a title="innodb_import_table_from_xtrabackup" href="http://www.percona.com/doc/percona-server/5.5/management/innodb_expand_import.html?id=percona-server:features:innodb_import_table_from_xtrabackup&amp;redirect=2#innodb_import_table_from_xtrabackup"><tt>innodb_import_table_from_xtrabackup</tt></a>.</div>
<div>控制）默认是关闭的，不过是dynamic的。<em></em><strong><em>
</em><a href="http://www.percona.com/doc/percona-xtrabackup/xtrabackup_bin/exporting_importing_tables.html?id=percona-xtrabackup:xtrabackup:export_and_import">http://www.percona.com/doc/percona-xtrabackup/xtrabackup_bin/exporting_importing_tables.html?id=percona-xtrabackup:xtrabackup:export_and_import</a>

The Problem</strong></div>
<div>In the past users were unable to take full advantage of the <a title="FLUSH TABLES WITH READ LOCK" href="http://dev.mysql.com/doc/refman/5.6/en/flush.html" target="_blank">FLUSH TABLES WITH READ LOCK</a> statement. InnoDB simply ignored the flush to disk part. If the table did not have any dirty pages in the InnoDB buffer that weren’t synced to disk (due to sheer luck) then it was safe to copy the .ibd file to another location. Also, the restore was not without its limitations and complications. The .ibd file could not be copied over to another server because InnoDB during <a title="ALTER TABLE T IMPORT TABLESPACE" href="http://dev.mysql.com/doc/refman/5.6/en/alter-table.html" target="_blank">import</a> did not do any fix ups required proper import. The main problems during import were :</div>
<div>当执行flush tables withe read lock之后，innodb会将table的所有脏页刷新到磁盘上，这个时候.ibd文件将不会发生很大的改变，但是因为下面的原因导致将idb文件copy到别的实例上时会发生错误：</div>
<ul>
	<li>If the tablespace id of the IMPORTing instance had changed then the import would fail.</li>
	<li>If the table and index ids in the tablespace were different than the importing server.因为两个实例表创建的顺序可能不一致，导致tablespace id会不一致。<a href="http://www.jzxue.com/shujuku/mysql/201109/13-8842.html">参照</a></li>
	<li>InnoDB uses a global row id, this is used for tables without an explicit primary key, the row id if present in a to be imported tablespace had to be lower than importing server current maximum.当表没有显示的制定主键时，innodb使用隐藏的row id来表示主键，这个保存在共享表空间中会存在不一致。</li>
	<li>Maximum LSN of the tablespace had to be lower than the server current max LSN</li>
	<li>The maximum trx id of the tablespace had to be lower than the server current max trx id.</li>
	<li>Purge and change buffer issues</li>
</ul>
<div>In short, if it worked you were lucky that the above constraints were satisfied or your tables were probably read-only.</div>
<div><span style="color: #555555; font-family: 'Trebuchet MS', 'Lucida Grande', Verdana, Georgia, sans-serif;">如果上面的条件都满足时，现在的版本进行import是没有问题的。</span></div>
<strong>The Solution</strong>

Do the flush (export) properly and also the import. During flushing we disable purge, merge all pending change buffer entries to the tablespace and then flush all the dirty pages to disk. <strong>Note: Purge will remain disabled until UNLOCK TABLES; is issued</strong>. Write out a meta-data file that contains the table schema, hostname of the exporting server, page size of the exporting instance and the highest autoinc value in memory etc.. So that when we do an import we can check if the table schema matches (currently ignores foreign key relationships) and also restore the autoinc value. This meta-data file is created in the same directory as the tablespace, it has a suffix of .cfg. If the tables is named <em>customer</em> then the meta-data file will be named <em>customer.cfg</em> and the tablespace will be named <em>customer.ibd.</em> Note: FLUSH TABLES and IMPORT only work for tables that are stored outside the system tablespace, in their own tablespace. The InnoDB config parameter <a title="innodb_file_per_table" href="http://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_file_per_table" target="_blank">innodb_file_per_table</a> must be set when creating the table.
<div>Because InnoDB stores data in <a title="Endianess" href="http://en.wikipedia.org/wiki/Endianness" target="_blank">big-endian format</a>, this allows copying data between different architectures possible. Copying between different operating systems will also work.</div>
<div>5.6的解决方法就是在执行flush table with read lock时将共享表空间中保存的关于表的meta-data保存在一个外部的cfg文件中，等import时可以读取这个cfg文件进行修正。</div>
<strong>Example</strong>

If you want to backup a single table:

CREATE DATABASE ftwrl;

CREATE TABLE ftwrl.t (C INT) ENGINE=InnoDB;

INSERT INTO ftwrl.t VALUES(1),(2),(3);

SELECT * FROM ftwrl.t;

FLUSH TABLES ftwrl.t WITH READ LOCK;

From the command line, copy the t.ibd and t.cfg to your backup directory. The files should in the ftwrl/ sub-directory under <a title="--datadir" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-install-db.html#option_mysql_install_db_datadir" target="_blank">datadir</a>.

UNLOCK TABLES; — <strong>Note: This will remove the t.cfg file.</strong>

DROP TABLE ftwrl.t;

CREATE TABLE ftwrl.t (C INT) ENGINE=InnoDB;

ALTER TABLE ftwrl.t DISCARD TABLESPACE;

The DISCARD tablespace will rename the t.ibd file to t.ibt in the same directory, you have to remove this file manually for now. Once you’ve removed this file, copy the backed up tablespace t.ibd and the meta-data file t.cfg to the ftwrl/ sub-directory. Then issue the folowing:

ALTER TABLE ftwrl.t IMPORT TABLESPACE;
CHECK TABLE ftwrl.t;
SELECT * FROM t;

You should be good to go. If you want to backup multiple tables together then the syntax for that is:

FLUSH TABLES t1, t2, …, tn WITH READ LOCK;

Copy as before but this time the multiple tablespaces and meta-data files

UNLOCK TABLES;

Then first discard the tablespace as above followed by an import as above.

<strong>Other changes</strong>
Errors and warnings will be pushed to the client so that the user doesn’t need to poke around in the server error log files to check why an operation failed. The intention is to send enough information to the user so that the problem can be clearly identified and understood.

<strong>Conclusion</strong>

The syntax for “export” is not finalised yet and may change, for now the above examples using FLUSH TABLES WITH READ LOCK should work. To export tables that are in a foreign key relationship you must export and import all the tables together, otherwise you may end up with inconsistencies. The export/import doesn’t work on partitioned tables, this limitation will be addressed later. A matching table definition must exist in the importing server instance, currently we don’t automagically create the table using the saved meta-data during import. The .cfg format is not written in stone yet, we may add more data to this file, e.g., when we add partition support.
<div>Your feedback is important to us, so that we can improve this feature further.</div>
<div>参照：</div>
<div>1.<a href="http://www.jzxue.com/shujuku/mysql/201109/13-8842.html">innodb数据表空间文件平滑迁移</a></div>
</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2012-04-11 11:11:36</wp:post_date>
		<wp:post_date_gmt>2012-04-11 03:11:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql5-6%e6%96%b0%e5%8a%9f%e8%83%bdinnodb%e8%a1%a8%e7%a9%ba%e9%97%b4%e5%af%bc%e5%85%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql5-6"><![CDATA[MySQL5.6]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[715]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用thrift接口访问HBase</title>
		<link>http://www.themysql.com/hbase/%e4%bd%bf%e7%94%a8thrift%e6%8e%a5%e5%8f%a3%e8%ae%bf%e9%97%aehbase.html</link>
		<pubDate>Fri, 29 Jun 2012 04:07:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[hbase用java来操作是最方便，也效率最高的方式。但java并非轻量级，不方便在任何环境下调试。而且不同的开发人员熟悉的语言不一样，开发效率也不一样。hbase 通过thrift，还可以用python,ruby,cpp,perl等语言来操作。

thrift是facebook开发开源的类似google的protobuf的远程调用组件。但protobuf只有数据的序列化，且只支持二进制协议，没有远程调用部分。protobuf原生支持cpp,python,java,另外还有第三方实现的objectc，ruby等语言。而thrift是实现了序列化，传输，协议定义，远程调用等功能，跨语言能力更多。某些方面二者可以互相替代，但一些方面则各有适用范围。

Thrift的一个介绍：<a rel="nofollow" href="http://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/">http://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/</a>

<strong>安装过程：</strong>

<pre lang="sh">
yum install automake libtool flex bison pkgconfig gcc-c++ boost-devel libevent-devel zlib-devel python-devel ruby-devel
wget https://github.com/downloads/libevent/libevent/libevent-2.0.19-stable.tar.gz
./configure --prefix=/usr/local/libevent-2.0.19
make && make install   
wget libbit-vector-perl_7.2.orig.tar.gz
cd Bit-Vector-7.2/ 
perl Makefile.PL  
make && install 
./configure --prefix=/usr/local/thrift-0.8.0 --with-libevent=/usr/local/libevent-2.0.19/
make && make install
</pre>

<strong>启动：</strong>
<pre lang="sh">
nohup hbase thrift -threadpool start >thrift.log 2>&1 &;
</pre>
<strong>示例程序：</strong>

python简单示例程序如下：
<pre lang="python">#!/usr/bin/env python
import sys
sys.path.append('/usr/local/thrift-0.8.0/bin/gen-py')
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from hbase import Hbase
from hbase.ttypes import *
transport = TSocket.TSocket('localhost', 9090)
transport = TTransport.TBufferedTransport(transport)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Hbase.Client(protocol)
transport.open()
tableName="test"
#create table t1 with column family contents
try:
    client.createTable(tableName,[ColumnDescriptor(name="contents:", maxVersions=1),])
except AlreadyExists:
    client.disableTable(tableName)
    client.deleteTable(tableName)
    client.createTable(tableName,[ColumnDescriptor(name="contents:", maxVersions=1),])
#put thress rows to test
mutations = [Mutation(column="contents:", value="content")]
client.mutateRow(tableName,"1", mutations)
client.mutateRow(tableName,"2", mutations)
client.mutateRow(tableName,"3", mutations)
#get row from test
print client.getRow("t1","1")</pre>
python更加复杂一些的一个例子：<a href="http://blog.csdn.net/fanzy618/article/details/4091602">http://blog.csdn.net/fanzy618/article/details/4091602</a>

perl示例程序见：<a href="http://code.google.com/p/hbase-thrift/source/browse/trunk/perl/test/tables.t?r=2">http://code.google.com/p/hbase-thrift/source/browse/trunk/perl/test/tables.t?r=2</a>

通过对python接口的使用，推荐使用java，因为java的文档更加丰富一些。如果使用python或者perl需要阅读生成的接口文件。

<strong>遇到的问题</strong>
<div>需要安装教新版本的libevent，否则在编译的会报下面的错误
<pre>
libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I../.. -I/usr/include/include -I./src -Wall -g -O2 -MT libthriftnb_la-TNonblockingServer.lo -MD -MP -MF .deps/libthriftnb_la-TNonblockingServer.Tpo -c src/server/TNonblockingServer.cpp  -fPIC -DPIC -o .libs/libthriftnb_la-TNonblockingServer.o
src/server/TNonblockingServer.cpp: In destructor 'virtual apache::thrift::server::TNonblockingServer::~TNonblockingServer()':
src/server/TNonblockingServer.cpp:539: error: 'event_base_free' was not declared in this scope
make[4]: *** [libthriftnb_la-TNonblockingServer.lo] Error 1
</pre>
</div>
<div>python客户端抛出错误：
<pre>socket.error: [Errno 104] Connection reset by peer</pre>
解决方法：
<pre> 
12/06/01 17:55:40 ERROR server.THsHaServer: Read an invalid frame size of -2147418111. Are you using TFramedTransport on the client side?
 要想提高传输效率，必须使用TFramedTransport或TBufferedTransport.但对-hsha，-nonblocking两种服务器模式，必须使用TFramedTransport。将其改为线程方式试试。
 [zhouhh@Hadoop48 hbase-0.94.0]$ hbase thrift -p 19090 -threadpool start
 ...
 12/06/01 18:02:17 DEBUG thrift.ThriftServerRunner: Using binary protocol
 12/06/01 18:02:17 INFO thrift.ThriftServerRunner: starting TBoundedThreadPoolServer on /0.0.0.0:19090; min worker threads=16, max worker threads=1000, max queued requests=1000
</pre>
</div>
<strong>Thrift不同语言环境需求：</strong>
<pre>
	* C++
		* Boost 1.33.1+
		* libevent (optional, to build the nonblocking server)
		* zlib (optional)

	* Java
		* Java 1.5+
		* Apache Ant
		* Apache Ivy (recommended)
		* Apache Commons Lang (recommended)
		* SLF4J

	* C#: Mono 1.2.4+ (and pkg-config to detect it) or Visual Studio 2005+
	* Python 2.4+ (including header files for extension modules)
	* PHP 5.0+ (optionally including header files for extension modules)
	* Ruby 1.8+ (including header files for extension modules)
	* Erlang R12 (R11 works but not recommended)
	* Perl 5
		* Bit::Vector
		* Class::Accessor



packages 需求：

	1. For ruby, install ruby-full ruby-dev librspec-ruby rake rubygems libdaemons-ruby libgemplugin-ruby mongrel.

	2. For python, install python-dev python-twisted.

	3. For perl, install libbit-vector-perl.

	4. For php, install php5-dev php5-cli.

	5. For c_glib, install libglib2.0-dev (Debian Lenny Users => sudo apt-get -t lenny-backports install libglib2.0-dev)

	6. For erlang, install erlang-base erlang-eunit erlang-dev

	7. For csharp, install mono-gmcs libmono-dev libmono-system-web2.0-cil

	8. For haskell, install ghc6 cabal-install libghc6-binary-dev libghc6-network-dev libghc6-http-dev
</pre>
<div>抄袭来源：</div>
<div><a href="http://abloz.com/2012/06/01/python-operating-hbase-thrift-to.html">http://abloz.com/2012/06/01/python-operating-hbase-thrift-to.html</a></div>
<div><a href="http://blog.csdn.net/fanzy618/article/details/4091602">http://blog.csdn.net/fanzy618/article/details/4091602</a></div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2012-06-29 12:07:06</wp:post_date>
		<wp:post_date_gmt>2012-06-29 04:07:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8thrift%e6%8e%a5%e5%8f%a3%e8%ae%bf%e9%97%aehbase</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hbase"><![CDATA[Hbase]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[383]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用redis-py访问Redis</title>
		<link>http://www.themysql.com/python/%e4%bd%bf%e7%94%a8redis-py%e8%ae%bf%e9%97%aeredis.html</link>
		<pubDate>Mon, 10 Sep 2012 03:40:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.themysql.com/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>使用redis-py访问Redis</strong>

<strong>一、安装</strong>
在<a href="https://github.com/andymccurdy/redis-py">官方网站</a>下载redis-py
执行python setup.py install进行安装

<strong>二、使用</strong>
<pre lang="python">
import redis
r=redis.Redis(host="10.75.18.59",port=7001,db=0)
r.info()
{'pubsub_channels': 0, 'used_memory_peak_human': '5.28M', 'aof_buffer_length': 0, 'bgrewriteaof_in_progress': 0, 'aof_current_size': 0, 'connected_slaves': 0, 'aof_base_size': 0, 'uptime_in_days': 0, 'multiplexing_api': 'epoll', 'lru_clock': 507056, 'last_save_time': 1347247101, 'redis_version': '2.4.15', 'redis_git_sha1': 0, 'gcc_version': '4.1.2', 'connected_clients': 3, 'redis_release': 1, 'keyspace_misses': 0, 'used_memory': 5544616, 'vm_enabled': 0, 'used_cpu_user_children': 0.0, 'aof_pending_rewrite': 0, 'used_memory_peak': 5536016, 'role': 'master', 'total_commands_processed': 106, 'latest_fork_usec': 0, 'loading': 0, 'used_memory_rss': 5935104, 'total_connections_received': 10, 'pubsub_patterns': 0, 'aof_enabled': 1, 'used_cpu_sys': 0.01, 'used_memory_human': '5.29M', 'used_cpu_sys_children': 0.0, 'blocked_clients': 0, 'used_cpu_user': 0.02, 'client_biggest_input_buf': 0, 'arch_bits': 64, 'mem_fragmentation_ratio': 1.07, 'expired_keys': 0, 'evicted_keys': 0, 'bgsave_in_progress': 0, 'client_longest_output_list': 0, 'mem_allocator': 'jemalloc-3.0.0', 'total_read_requests': 0, 'total_write_requests': 0, 'process_id': 5415, 'uptime_in_seconds': 741, 'changes_since_last_save': 0, 'redis_git_dirty': 0, 'pending_aofbuf_length': 0, 'keyspace_hits': 0}
r.info()["used_memory_human"]
'3.04G'
#使用完成之后需要手工调用disconnect释放资源，虽然connection的析构函数中会断开连接，但是类似这种连接最好是手工进行释放，更好的是放在finally中确保释放，防止对服务器端产生影响。
r.connection_pool.disconnect()
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2012-09-10 11:40:17</wp:post_date>
		<wp:post_date_gmt>2012-09-10 03:40:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8redis-py%e8%ae%bf%e9%97%aeredis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nosql"><![CDATA[NoSQL]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[87]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
